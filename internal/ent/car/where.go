// Code generated by ent, DO NOT EDIT.

package car

import (
	"go-ent-project/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdatedAt, v))
}

// Make applies equality check predicate on the "make" field. It's identical to MakeEQ.
func Make(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMake, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModel, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// Registration applies equality check predicate on the "registration" field. It's identical to RegistrationEQ.
func Registration(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldRegistration, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldColor, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUpdatedAt, v))
}

// MakeEQ applies the EQ predicate on the "make" field.
func MakeEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMake, v))
}

// MakeNEQ applies the NEQ predicate on the "make" field.
func MakeNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldMake, v))
}

// MakeIn applies the In predicate on the "make" field.
func MakeIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldMake, vs...))
}

// MakeNotIn applies the NotIn predicate on the "make" field.
func MakeNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldMake, vs...))
}

// MakeGT applies the GT predicate on the "make" field.
func MakeGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldMake, v))
}

// MakeGTE applies the GTE predicate on the "make" field.
func MakeGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldMake, v))
}

// MakeLT applies the LT predicate on the "make" field.
func MakeLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldMake, v))
}

// MakeLTE applies the LTE predicate on the "make" field.
func MakeLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldMake, v))
}

// MakeContains applies the Contains predicate on the "make" field.
func MakeContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldMake, v))
}

// MakeHasPrefix applies the HasPrefix predicate on the "make" field.
func MakeHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldMake, v))
}

// MakeHasSuffix applies the HasSuffix predicate on the "make" field.
func MakeHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldMake, v))
}

// MakeEqualFold applies the EqualFold predicate on the "make" field.
func MakeEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldMake, v))
}

// MakeContainsFold applies the ContainsFold predicate on the "make" field.
func MakeContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldMake, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldModel, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldYear, v))
}

// RegistrationEQ applies the EQ predicate on the "registration" field.
func RegistrationEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldRegistration, v))
}

// RegistrationNEQ applies the NEQ predicate on the "registration" field.
func RegistrationNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldRegistration, v))
}

// RegistrationIn applies the In predicate on the "registration" field.
func RegistrationIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldRegistration, vs...))
}

// RegistrationNotIn applies the NotIn predicate on the "registration" field.
func RegistrationNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldRegistration, vs...))
}

// RegistrationGT applies the GT predicate on the "registration" field.
func RegistrationGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldRegistration, v))
}

// RegistrationGTE applies the GTE predicate on the "registration" field.
func RegistrationGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldRegistration, v))
}

// RegistrationLT applies the LT predicate on the "registration" field.
func RegistrationLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldRegistration, v))
}

// RegistrationLTE applies the LTE predicate on the "registration" field.
func RegistrationLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldRegistration, v))
}

// RegistrationContains applies the Contains predicate on the "registration" field.
func RegistrationContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldRegistration, v))
}

// RegistrationHasPrefix applies the HasPrefix predicate on the "registration" field.
func RegistrationHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldRegistration, v))
}

// RegistrationHasSuffix applies the HasSuffix predicate on the "registration" field.
func RegistrationHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldRegistration, v))
}

// RegistrationEqualFold applies the EqualFold predicate on the "registration" field.
func RegistrationEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldRegistration, v))
}

// RegistrationContainsFold applies the ContainsFold predicate on the "registration" field.
func RegistrationContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldRegistration, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldColor, v))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldColor, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Car) predicate.Car {
	return predicate.Car(sql.NotPredicates(p))
}
