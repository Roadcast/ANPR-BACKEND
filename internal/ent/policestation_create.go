// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/car"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/internal/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PoliceStationCreate is the builder for creating a PoliceStation entity.
type PoliceStationCreate struct {
	config
	mutation *PoliceStationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (psc *PoliceStationCreate) SetCreatedAt(t time.Time) *PoliceStationCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableCreatedAt(t *time.Time) *PoliceStationCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PoliceStationCreate) SetUpdatedAt(t time.Time) *PoliceStationCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableUpdatedAt(t *time.Time) *PoliceStationCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetName sets the "name" field.
func (psc *PoliceStationCreate) SetName(s string) *PoliceStationCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetLocation sets the "location" field.
func (psc *PoliceStationCreate) SetLocation(s string) *PoliceStationCreate {
	psc.mutation.SetLocation(s)
	return psc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableLocation(s *string) *PoliceStationCreate {
	if s != nil {
		psc.SetLocation(*s)
	}
	return psc
}

// SetCode sets the "code" field.
func (psc *PoliceStationCreate) SetCode(s string) *PoliceStationCreate {
	psc.mutation.SetCode(s)
	return psc
}

// SetIdentifier sets the "identifier" field.
func (psc *PoliceStationCreate) SetIdentifier(s string) *PoliceStationCreate {
	psc.mutation.SetIdentifier(s)
	return psc
}

// SetParentStationID sets the "parent_station_id" field.
func (psc *PoliceStationCreate) SetParentStationID(u uuid.UUID) *PoliceStationCreate {
	psc.mutation.SetParentStationID(u)
	return psc
}

// SetNillableParentStationID sets the "parent_station_id" field if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableParentStationID(u *uuid.UUID) *PoliceStationCreate {
	if u != nil {
		psc.SetParentStationID(*u)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PoliceStationCreate) SetID(u uuid.UUID) *PoliceStationCreate {
	psc.mutation.SetID(u)
	return psc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableID(u *uuid.UUID) *PoliceStationCreate {
	if u != nil {
		psc.SetID(*u)
	}
	return psc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (psc *PoliceStationCreate) AddUserIDs(ids ...uuid.UUID) *PoliceStationCreate {
	psc.mutation.AddUserIDs(ids...)
	return psc
}

// AddUsers adds the "users" edges to the User entity.
func (psc *PoliceStationCreate) AddUsers(u ...*User) *PoliceStationCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psc.AddUserIDs(ids...)
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (psc *PoliceStationCreate) AddCameraIDs(ids ...uuid.UUID) *PoliceStationCreate {
	psc.mutation.AddCameraIDs(ids...)
	return psc
}

// AddCamera adds the "camera" edges to the Camera entity.
func (psc *PoliceStationCreate) AddCamera(c ...*Camera) *PoliceStationCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psc.AddCameraIDs(ids...)
}

// AddCarIDs adds the "car" edge to the Car entity by IDs.
func (psc *PoliceStationCreate) AddCarIDs(ids ...uuid.UUID) *PoliceStationCreate {
	psc.mutation.AddCarIDs(ids...)
	return psc
}

// AddCar adds the "car" edges to the Car entity.
func (psc *PoliceStationCreate) AddCar(c ...*Car) *PoliceStationCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psc.AddCarIDs(ids...)
}

// SetParentID sets the "parent" edge to the PoliceStation entity by ID.
func (psc *PoliceStationCreate) SetParentID(id uuid.UUID) *PoliceStationCreate {
	psc.mutation.SetParentID(id)
	return psc
}

// SetNillableParentID sets the "parent" edge to the PoliceStation entity by ID if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableParentID(id *uuid.UUID) *PoliceStationCreate {
	if id != nil {
		psc = psc.SetParentID(*id)
	}
	return psc
}

// SetParent sets the "parent" edge to the PoliceStation entity.
func (psc *PoliceStationCreate) SetParent(p *PoliceStation) *PoliceStationCreate {
	return psc.SetParentID(p.ID)
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by IDs.
func (psc *PoliceStationCreate) AddChildStationIDs(ids ...uuid.UUID) *PoliceStationCreate {
	psc.mutation.AddChildStationIDs(ids...)
	return psc
}

// AddChildStations adds the "child_stations" edges to the PoliceStation entity.
func (psc *PoliceStationCreate) AddChildStations(p ...*PoliceStation) *PoliceStationCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psc.AddChildStationIDs(ids...)
}

// Mutation returns the PoliceStationMutation object of the builder.
func (psc *PoliceStationCreate) Mutation() *PoliceStationMutation {
	return psc.mutation
}

// Save creates the PoliceStation in the database.
func (psc *PoliceStationCreate) Save(ctx context.Context) (*PoliceStation, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PoliceStationCreate) SaveX(ctx context.Context) *PoliceStation {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PoliceStationCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PoliceStationCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PoliceStationCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := policestation.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := policestation.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.ID(); !ok {
		v := policestation.DefaultID()
		psc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PoliceStationCreate) check() error {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PoliceStation.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PoliceStation.updated_at"`)}
	}
	if _, ok := psc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PoliceStation.name"`)}
	}
	if v, ok := psc.mutation.Name(); ok {
		if err := policestation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.name": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "PoliceStation.code"`)}
	}
	if v, ok := psc.mutation.Code(); ok {
		if err := policestation.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.code": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "PoliceStation.identifier"`)}
	}
	if v, ok := psc.mutation.Identifier(); ok {
		if err := policestation.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.identifier": %w`, err)}
		}
	}
	return nil
}

func (psc *PoliceStationCreate) sqlSave(ctx context.Context) (*PoliceStation, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PoliceStationCreate) createSpec() (*PoliceStation, *sqlgraph.CreateSpec) {
	var (
		_node = &PoliceStation{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(policestation.Table, sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = psc.conflict
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(policestation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(policestation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.Name(); ok {
		_spec.SetField(policestation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := psc.mutation.Location(); ok {
		_spec.SetField(policestation.FieldLocation, field.TypeString, value)
		_node.Location = &value
	}
	if value, ok := psc.mutation.Code(); ok {
		_spec.SetField(policestation.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := psc.mutation.Identifier(); ok {
		_spec.SetField(policestation.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if nodes := psc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentTable,
			Columns: []string{policestation.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentStationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ChildStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PoliceStation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PoliceStationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (psc *PoliceStationCreate) OnConflict(opts ...sql.ConflictOption) *PoliceStationUpsertOne {
	psc.conflict = opts
	return &PoliceStationUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PoliceStation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *PoliceStationCreate) OnConflictColumns(columns ...string) *PoliceStationUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &PoliceStationUpsertOne{
		create: psc,
	}
}

type (
	// PoliceStationUpsertOne is the builder for "upsert"-ing
	//  one PoliceStation node.
	PoliceStationUpsertOne struct {
		create *PoliceStationCreate
	}

	// PoliceStationUpsert is the "OnConflict" setter.
	PoliceStationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PoliceStationUpsert) SetUpdatedAt(v time.Time) *PoliceStationUpsert {
	u.Set(policestation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PoliceStationUpsert) UpdateUpdatedAt() *PoliceStationUpsert {
	u.SetExcluded(policestation.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *PoliceStationUpsert) SetName(v string) *PoliceStationUpsert {
	u.Set(policestation.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PoliceStationUpsert) UpdateName() *PoliceStationUpsert {
	u.SetExcluded(policestation.FieldName)
	return u
}

// SetLocation sets the "location" field.
func (u *PoliceStationUpsert) SetLocation(v string) *PoliceStationUpsert {
	u.Set(policestation.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *PoliceStationUpsert) UpdateLocation() *PoliceStationUpsert {
	u.SetExcluded(policestation.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *PoliceStationUpsert) ClearLocation() *PoliceStationUpsert {
	u.SetNull(policestation.FieldLocation)
	return u
}

// SetCode sets the "code" field.
func (u *PoliceStationUpsert) SetCode(v string) *PoliceStationUpsert {
	u.Set(policestation.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PoliceStationUpsert) UpdateCode() *PoliceStationUpsert {
	u.SetExcluded(policestation.FieldCode)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *PoliceStationUpsert) SetIdentifier(v string) *PoliceStationUpsert {
	u.Set(policestation.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *PoliceStationUpsert) UpdateIdentifier() *PoliceStationUpsert {
	u.SetExcluded(policestation.FieldIdentifier)
	return u
}

// SetParentStationID sets the "parent_station_id" field.
func (u *PoliceStationUpsert) SetParentStationID(v uuid.UUID) *PoliceStationUpsert {
	u.Set(policestation.FieldParentStationID, v)
	return u
}

// UpdateParentStationID sets the "parent_station_id" field to the value that was provided on create.
func (u *PoliceStationUpsert) UpdateParentStationID() *PoliceStationUpsert {
	u.SetExcluded(policestation.FieldParentStationID)
	return u
}

// ClearParentStationID clears the value of the "parent_station_id" field.
func (u *PoliceStationUpsert) ClearParentStationID() *PoliceStationUpsert {
	u.SetNull(policestation.FieldParentStationID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PoliceStation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(policestation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PoliceStationUpsertOne) UpdateNewValues() *PoliceStationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(policestation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(policestation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PoliceStation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PoliceStationUpsertOne) Ignore() *PoliceStationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PoliceStationUpsertOne) DoNothing() *PoliceStationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PoliceStationCreate.OnConflict
// documentation for more info.
func (u *PoliceStationUpsertOne) Update(set func(*PoliceStationUpsert)) *PoliceStationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PoliceStationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PoliceStationUpsertOne) SetUpdatedAt(v time.Time) *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PoliceStationUpsertOne) UpdateUpdatedAt() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PoliceStationUpsertOne) SetName(v string) *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PoliceStationUpsertOne) UpdateName() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateName()
	})
}

// SetLocation sets the "location" field.
func (u *PoliceStationUpsertOne) SetLocation(v string) *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *PoliceStationUpsertOne) UpdateLocation() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *PoliceStationUpsertOne) ClearLocation() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.ClearLocation()
	})
}

// SetCode sets the "code" field.
func (u *PoliceStationUpsertOne) SetCode(v string) *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PoliceStationUpsertOne) UpdateCode() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateCode()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *PoliceStationUpsertOne) SetIdentifier(v string) *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *PoliceStationUpsertOne) UpdateIdentifier() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateIdentifier()
	})
}

// SetParentStationID sets the "parent_station_id" field.
func (u *PoliceStationUpsertOne) SetParentStationID(v uuid.UUID) *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetParentStationID(v)
	})
}

// UpdateParentStationID sets the "parent_station_id" field to the value that was provided on create.
func (u *PoliceStationUpsertOne) UpdateParentStationID() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateParentStationID()
	})
}

// ClearParentStationID clears the value of the "parent_station_id" field.
func (u *PoliceStationUpsertOne) ClearParentStationID() *PoliceStationUpsertOne {
	return u.Update(func(s *PoliceStationUpsert) {
		s.ClearParentStationID()
	})
}

// Exec executes the query.
func (u *PoliceStationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PoliceStationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PoliceStationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PoliceStationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PoliceStationUpsertOne.ID is not supported by MySQL driver. Use PoliceStationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PoliceStationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PoliceStationCreateBulk is the builder for creating many PoliceStation entities in bulk.
type PoliceStationCreateBulk struct {
	config
	err      error
	builders []*PoliceStationCreate
	conflict []sql.ConflictOption
}

// Save creates the PoliceStation entities in the database.
func (pscb *PoliceStationCreateBulk) Save(ctx context.Context) ([]*PoliceStation, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PoliceStation, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoliceStationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PoliceStationCreateBulk) SaveX(ctx context.Context) []*PoliceStation {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PoliceStationCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PoliceStationCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PoliceStation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PoliceStationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pscb *PoliceStationCreateBulk) OnConflict(opts ...sql.ConflictOption) *PoliceStationUpsertBulk {
	pscb.conflict = opts
	return &PoliceStationUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PoliceStation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *PoliceStationCreateBulk) OnConflictColumns(columns ...string) *PoliceStationUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &PoliceStationUpsertBulk{
		create: pscb,
	}
}

// PoliceStationUpsertBulk is the builder for "upsert"-ing
// a bulk of PoliceStation nodes.
type PoliceStationUpsertBulk struct {
	create *PoliceStationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PoliceStation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(policestation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PoliceStationUpsertBulk) UpdateNewValues() *PoliceStationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(policestation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(policestation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PoliceStation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PoliceStationUpsertBulk) Ignore() *PoliceStationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PoliceStationUpsertBulk) DoNothing() *PoliceStationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PoliceStationCreateBulk.OnConflict
// documentation for more info.
func (u *PoliceStationUpsertBulk) Update(set func(*PoliceStationUpsert)) *PoliceStationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PoliceStationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PoliceStationUpsertBulk) SetUpdatedAt(v time.Time) *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PoliceStationUpsertBulk) UpdateUpdatedAt() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PoliceStationUpsertBulk) SetName(v string) *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PoliceStationUpsertBulk) UpdateName() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateName()
	})
}

// SetLocation sets the "location" field.
func (u *PoliceStationUpsertBulk) SetLocation(v string) *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *PoliceStationUpsertBulk) UpdateLocation() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *PoliceStationUpsertBulk) ClearLocation() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.ClearLocation()
	})
}

// SetCode sets the "code" field.
func (u *PoliceStationUpsertBulk) SetCode(v string) *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PoliceStationUpsertBulk) UpdateCode() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateCode()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *PoliceStationUpsertBulk) SetIdentifier(v string) *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *PoliceStationUpsertBulk) UpdateIdentifier() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateIdentifier()
	})
}

// SetParentStationID sets the "parent_station_id" field.
func (u *PoliceStationUpsertBulk) SetParentStationID(v uuid.UUID) *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.SetParentStationID(v)
	})
}

// UpdateParentStationID sets the "parent_station_id" field to the value that was provided on create.
func (u *PoliceStationUpsertBulk) UpdateParentStationID() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.UpdateParentStationID()
	})
}

// ClearParentStationID clears the value of the "parent_station_id" field.
func (u *PoliceStationUpsertBulk) ClearParentStationID() *PoliceStationUpsertBulk {
	return u.Update(func(s *PoliceStationUpsert) {
		s.ClearParentStationID()
	})
}

// Exec executes the query.
func (u *PoliceStationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PoliceStationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PoliceStationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PoliceStationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
