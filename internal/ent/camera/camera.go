// Code generated by ent, DO NOT EDIT.

package camera

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the camera type in the database.
	Label = "camera"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldImei holds the string denoting the imei field in the database.
	FieldImei = "imei"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldPoliceStationID holds the string denoting the police_station_id field in the database.
	FieldPoliceStationID = "police_station_id"
	// EdgePoliceStation holds the string denoting the police_station edge name in mutations.
	EdgePoliceStation = "police_station"
	// Table holds the table name of the camera in the database.
	Table = "cameras"
	// PoliceStationTable is the table that holds the police_station relation/edge.
	PoliceStationTable = "cameras"
	// PoliceStationInverseTable is the table name for the PoliceStation entity.
	// It exists in this package in order to avoid circular dependency with the "policestation" package.
	PoliceStationInverseTable = "police_stations"
	// PoliceStationColumn is the table column denoting the police_station relation/edge.
	PoliceStationColumn = "police_station_id"
)

// Columns holds all SQL columns for camera fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldModel,
	FieldImei,
	FieldLocation,
	FieldActive,
	FieldPoliceStationID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ModelValidator is a validator for the "model" field. It is called by the builders before save.
	ModelValidator func(string) error
	// ImeiValidator is a validator for the "imei" field. It is called by the builders before save.
	ImeiValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Camera queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByImei orders the results by the imei field.
func ByImei(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImei, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByPoliceStationID orders the results by the police_station_id field.
func ByPoliceStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoliceStationID, opts...).ToFunc()
}

// ByPoliceStationField orders the results by police_station field.
func ByPoliceStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPoliceStationStep(), sql.OrderByField(field, opts...))
	}
}
func newPoliceStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PoliceStationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PoliceStationTable, PoliceStationColumn),
	)
}
