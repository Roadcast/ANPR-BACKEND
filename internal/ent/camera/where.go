// Code generated by ent, DO NOT EDIT.

package camera

import (
	"go-ent-project/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldName, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldModel, v))
}

// Imei applies equality check predicate on the "imei" field. It's identical to ImeiEQ.
func Imei(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldImei, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLocation, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldActive, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldAddress, v))
}

// IsWorking applies equality check predicate on the "is_working" field. It's identical to IsWorkingEQ.
func IsWorking(v bool) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldIsWorking, v))
}

// District applies equality check predicate on the "district" field. It's identical to DistrictEQ.
func District(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDistrict, v))
}

// LastPing applies equality check predicate on the "last_ping" field. It's identical to LastPingEQ.
func LastPing(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLastPing, v))
}

// PoliceStationID applies equality check predicate on the "police_station_id" field. It's identical to PoliceStationIDEQ.
func PoliceStationID(v uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPoliceStationID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldName, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldModel, v))
}

// ImeiEQ applies the EQ predicate on the "imei" field.
func ImeiEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldImei, v))
}

// ImeiNEQ applies the NEQ predicate on the "imei" field.
func ImeiNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldImei, v))
}

// ImeiIn applies the In predicate on the "imei" field.
func ImeiIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldImei, vs...))
}

// ImeiNotIn applies the NotIn predicate on the "imei" field.
func ImeiNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldImei, vs...))
}

// ImeiGT applies the GT predicate on the "imei" field.
func ImeiGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldImei, v))
}

// ImeiGTE applies the GTE predicate on the "imei" field.
func ImeiGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldImei, v))
}

// ImeiLT applies the LT predicate on the "imei" field.
func ImeiLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldImei, v))
}

// ImeiLTE applies the LTE predicate on the "imei" field.
func ImeiLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldImei, v))
}

// ImeiContains applies the Contains predicate on the "imei" field.
func ImeiContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldImei, v))
}

// ImeiHasPrefix applies the HasPrefix predicate on the "imei" field.
func ImeiHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldImei, v))
}

// ImeiHasSuffix applies the HasSuffix predicate on the "imei" field.
func ImeiHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldImei, v))
}

// ImeiEqualFold applies the EqualFold predicate on the "imei" field.
func ImeiEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldImei, v))
}

// ImeiContainsFold applies the ContainsFold predicate on the "imei" field.
func ImeiContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldImei, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldLocation, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldActive, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldAddress, v))
}

// IsWorkingEQ applies the EQ predicate on the "is_working" field.
func IsWorkingEQ(v bool) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldIsWorking, v))
}

// IsWorkingNEQ applies the NEQ predicate on the "is_working" field.
func IsWorkingNEQ(v bool) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldIsWorking, v))
}

// DistrictEQ applies the EQ predicate on the "district" field.
func DistrictEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldDistrict, v))
}

// DistrictNEQ applies the NEQ predicate on the "district" field.
func DistrictNEQ(v string) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldDistrict, v))
}

// DistrictIn applies the In predicate on the "district" field.
func DistrictIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldDistrict, vs...))
}

// DistrictNotIn applies the NotIn predicate on the "district" field.
func DistrictNotIn(vs ...string) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldDistrict, vs...))
}

// DistrictGT applies the GT predicate on the "district" field.
func DistrictGT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldDistrict, v))
}

// DistrictGTE applies the GTE predicate on the "district" field.
func DistrictGTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldDistrict, v))
}

// DistrictLT applies the LT predicate on the "district" field.
func DistrictLT(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldDistrict, v))
}

// DistrictLTE applies the LTE predicate on the "district" field.
func DistrictLTE(v string) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldDistrict, v))
}

// DistrictContains applies the Contains predicate on the "district" field.
func DistrictContains(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContains(FieldDistrict, v))
}

// DistrictHasPrefix applies the HasPrefix predicate on the "district" field.
func DistrictHasPrefix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasPrefix(FieldDistrict, v))
}

// DistrictHasSuffix applies the HasSuffix predicate on the "district" field.
func DistrictHasSuffix(v string) predicate.Camera {
	return predicate.Camera(sql.FieldHasSuffix(FieldDistrict, v))
}

// DistrictEqualFold applies the EqualFold predicate on the "district" field.
func DistrictEqualFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldEqualFold(FieldDistrict, v))
}

// DistrictContainsFold applies the ContainsFold predicate on the "district" field.
func DistrictContainsFold(v string) predicate.Camera {
	return predicate.Camera(sql.FieldContainsFold(FieldDistrict, v))
}

// LastPingEQ applies the EQ predicate on the "last_ping" field.
func LastPingEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldLastPing, v))
}

// LastPingNEQ applies the NEQ predicate on the "last_ping" field.
func LastPingNEQ(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldLastPing, v))
}

// LastPingIn applies the In predicate on the "last_ping" field.
func LastPingIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldLastPing, vs...))
}

// LastPingNotIn applies the NotIn predicate on the "last_ping" field.
func LastPingNotIn(vs ...time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldLastPing, vs...))
}

// LastPingGT applies the GT predicate on the "last_ping" field.
func LastPingGT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGT(FieldLastPing, v))
}

// LastPingGTE applies the GTE predicate on the "last_ping" field.
func LastPingGTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldGTE(FieldLastPing, v))
}

// LastPingLT applies the LT predicate on the "last_ping" field.
func LastPingLT(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLT(FieldLastPing, v))
}

// LastPingLTE applies the LTE predicate on the "last_ping" field.
func LastPingLTE(v time.Time) predicate.Camera {
	return predicate.Camera(sql.FieldLTE(FieldLastPing, v))
}

// PoliceStationIDEQ applies the EQ predicate on the "police_station_id" field.
func PoliceStationIDEQ(v uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldEQ(FieldPoliceStationID, v))
}

// PoliceStationIDNEQ applies the NEQ predicate on the "police_station_id" field.
func PoliceStationIDNEQ(v uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldNEQ(FieldPoliceStationID, v))
}

// PoliceStationIDIn applies the In predicate on the "police_station_id" field.
func PoliceStationIDIn(vs ...uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldIn(FieldPoliceStationID, vs...))
}

// PoliceStationIDNotIn applies the NotIn predicate on the "police_station_id" field.
func PoliceStationIDNotIn(vs ...uuid.UUID) predicate.Camera {
	return predicate.Camera(sql.FieldNotIn(FieldPoliceStationID, vs...))
}

// PoliceStationIDIsNil applies the IsNil predicate on the "police_station_id" field.
func PoliceStationIDIsNil() predicate.Camera {
	return predicate.Camera(sql.FieldIsNull(FieldPoliceStationID))
}

// PoliceStationIDNotNil applies the NotNil predicate on the "police_station_id" field.
func PoliceStationIDNotNil() predicate.Camera {
	return predicate.Camera(sql.FieldNotNull(FieldPoliceStationID))
}

// HasPoliceStation applies the HasEdge predicate on the "police_station" edge.
func HasPoliceStation() predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PoliceStationTable, PoliceStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPoliceStationWith applies the HasEdge predicate on the "police_station" edge with a given conditions (other predicates).
func HasPoliceStationWith(preds ...predicate.PoliceStation) predicate.Camera {
	return predicate.Camera(func(s *sql.Selector) {
		step := newPoliceStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Camera) predicate.Camera {
	return predicate.Camera(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Camera) predicate.Camera {
	return predicate.Camera(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Camera) predicate.Camera {
	return predicate.Camera(sql.NotPredicates(p))
}
