// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CameraUpdate is the builder for updating Camera entities.
type CameraUpdate struct {
	config
	hooks    []Hook
	mutation *CameraMutation
}

// Where appends a list predicates to the CameraUpdate builder.
func (cu *CameraUpdate) Where(ps ...predicate.Camera) *CameraUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CameraUpdate) SetUpdatedAt(t time.Time) *CameraUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CameraUpdate) SetName(s string) *CameraUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableName(s *string) *CameraUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetModel sets the "model" field.
func (cu *CameraUpdate) SetModel(s string) *CameraUpdate {
	cu.mutation.SetModel(s)
	return cu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableModel(s *string) *CameraUpdate {
	if s != nil {
		cu.SetModel(*s)
	}
	return cu
}

// SetImei sets the "imei" field.
func (cu *CameraUpdate) SetImei(s string) *CameraUpdate {
	cu.mutation.SetImei(s)
	return cu
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableImei(s *string) *CameraUpdate {
	if s != nil {
		cu.SetImei(*s)
	}
	return cu
}

// SetLocation sets the "location" field.
func (cu *CameraUpdate) SetLocation(m map[string]interface{}) *CameraUpdate {
	cu.mutation.SetLocation(m)
	return cu
}

// SetActive sets the "active" field.
func (cu *CameraUpdate) SetActive(b bool) *CameraUpdate {
	cu.mutation.SetActive(b)
	return cu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cu *CameraUpdate) SetNillableActive(b *bool) *CameraUpdate {
	if b != nil {
		cu.SetActive(*b)
	}
	return cu
}

// Mutation returns the CameraMutation object of the builder.
func (cu *CameraUpdate) Mutation() *CameraMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CameraUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CameraUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CameraUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CameraUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CameraUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := camera.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CameraUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := camera.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Camera.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Model(); ok {
		if err := camera.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Camera.model": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Imei(); ok {
		if err := camera.ImeiValidator(v); err != nil {
			return &ValidationError{Name: "imei", err: fmt.Errorf(`ent: validator failed for field "Camera.imei": %w`, err)}
		}
	}
	return nil
}

func (cu *CameraUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(camera.Table, camera.Columns, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(camera.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(camera.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Model(); ok {
		_spec.SetField(camera.FieldModel, field.TypeString, value)
	}
	if value, ok := cu.mutation.Imei(); ok {
		_spec.SetField(camera.FieldImei, field.TypeString, value)
	}
	if value, ok := cu.mutation.Location(); ok {
		_spec.SetField(camera.FieldLocation, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.Active(); ok {
		_spec.SetField(camera.FieldActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{camera.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CameraUpdateOne is the builder for updating a single Camera entity.
type CameraUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CameraMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CameraUpdateOne) SetUpdatedAt(t time.Time) *CameraUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CameraUpdateOne) SetName(s string) *CameraUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableName(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetModel sets the "model" field.
func (cuo *CameraUpdateOne) SetModel(s string) *CameraUpdateOne {
	cuo.mutation.SetModel(s)
	return cuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableModel(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetModel(*s)
	}
	return cuo
}

// SetImei sets the "imei" field.
func (cuo *CameraUpdateOne) SetImei(s string) *CameraUpdateOne {
	cuo.mutation.SetImei(s)
	return cuo
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableImei(s *string) *CameraUpdateOne {
	if s != nil {
		cuo.SetImei(*s)
	}
	return cuo
}

// SetLocation sets the "location" field.
func (cuo *CameraUpdateOne) SetLocation(m map[string]interface{}) *CameraUpdateOne {
	cuo.mutation.SetLocation(m)
	return cuo
}

// SetActive sets the "active" field.
func (cuo *CameraUpdateOne) SetActive(b bool) *CameraUpdateOne {
	cuo.mutation.SetActive(b)
	return cuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cuo *CameraUpdateOne) SetNillableActive(b *bool) *CameraUpdateOne {
	if b != nil {
		cuo.SetActive(*b)
	}
	return cuo
}

// Mutation returns the CameraMutation object of the builder.
func (cuo *CameraUpdateOne) Mutation() *CameraMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CameraUpdate builder.
func (cuo *CameraUpdateOne) Where(ps ...predicate.Camera) *CameraUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CameraUpdateOne) Select(field string, fields ...string) *CameraUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Camera entity.
func (cuo *CameraUpdateOne) Save(ctx context.Context) (*Camera, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CameraUpdateOne) SaveX(ctx context.Context) *Camera {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CameraUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CameraUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CameraUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := camera.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CameraUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := camera.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Camera.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Model(); ok {
		if err := camera.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Camera.model": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Imei(); ok {
		if err := camera.ImeiValidator(v); err != nil {
			return &ValidationError{Name: "imei", err: fmt.Errorf(`ent: validator failed for field "Camera.imei": %w`, err)}
		}
	}
	return nil
}

func (cuo *CameraUpdateOne) sqlSave(ctx context.Context) (_node *Camera, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(camera.Table, camera.Columns, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Camera.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, camera.FieldID)
		for _, f := range fields {
			if !camera.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != camera.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(camera.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(camera.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Model(); ok {
		_spec.SetField(camera.FieldModel, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Imei(); ok {
		_spec.SetField(camera.FieldImei, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Location(); ok {
		_spec.SetField(camera.FieldLocation, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.Active(); ok {
		_spec.SetField(camera.FieldActive, field.TypeBool, value)
	}
	_node = &Camera{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{camera.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
