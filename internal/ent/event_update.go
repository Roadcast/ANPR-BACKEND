// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/event"
	"go-ent-project/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (eu *EventUpdate) SetPlateBoundingBox(i []int) *EventUpdate {
	eu.mutation.SetPlateBoundingBox(i)
	return eu
}

// AppendPlateBoundingBox appends i to the "plate_bounding_box" field.
func (eu *EventUpdate) AppendPlateBoundingBox(i []int) *EventUpdate {
	eu.mutation.AppendPlateBoundingBox(i)
	return eu
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (eu *EventUpdate) ClearPlateBoundingBox() *EventUpdate {
	eu.mutation.ClearPlateBoundingBox()
	return eu
}

// SetPlateChannel sets the "plate_channel" field.
func (eu *EventUpdate) SetPlateChannel(i int) *EventUpdate {
	eu.mutation.ResetPlateChannel()
	eu.mutation.SetPlateChannel(i)
	return eu
}

// SetNillablePlateChannel sets the "plate_channel" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateChannel(i *int) *EventUpdate {
	if i != nil {
		eu.SetPlateChannel(*i)
	}
	return eu
}

// AddPlateChannel adds i to the "plate_channel" field.
func (eu *EventUpdate) AddPlateChannel(i int) *EventUpdate {
	eu.mutation.AddPlateChannel(i)
	return eu
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (eu *EventUpdate) ClearPlateChannel() *EventUpdate {
	eu.mutation.ClearPlateChannel()
	return eu
}

// SetPlateConfidence sets the "plate_confidence" field.
func (eu *EventUpdate) SetPlateConfidence(i int) *EventUpdate {
	eu.mutation.ResetPlateConfidence()
	eu.mutation.SetPlateConfidence(i)
	return eu
}

// SetNillablePlateConfidence sets the "plate_confidence" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateConfidence(i *int) *EventUpdate {
	if i != nil {
		eu.SetPlateConfidence(*i)
	}
	return eu
}

// AddPlateConfidence adds i to the "plate_confidence" field.
func (eu *EventUpdate) AddPlateConfidence(i int) *EventUpdate {
	eu.mutation.AddPlateConfidence(i)
	return eu
}

// ClearPlateConfidence clears the value of the "plate_confidence" field.
func (eu *EventUpdate) ClearPlateConfidence() *EventUpdate {
	eu.mutation.ClearPlateConfidence()
	return eu
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (eu *EventUpdate) SetPlateIsExist(b bool) *EventUpdate {
	eu.mutation.SetPlateIsExist(b)
	return eu
}

// SetNillablePlateIsExist sets the "plate_is_exist" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateIsExist(b *bool) *EventUpdate {
	if b != nil {
		eu.SetPlateIsExist(*b)
	}
	return eu
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (eu *EventUpdate) ClearPlateIsExist() *EventUpdate {
	eu.mutation.ClearPlateIsExist()
	return eu
}

// SetPlateColor sets the "plate_color" field.
func (eu *EventUpdate) SetPlateColor(s string) *EventUpdate {
	eu.mutation.SetPlateColor(s)
	return eu
}

// SetNillablePlateColor sets the "plate_color" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateColor(s *string) *EventUpdate {
	if s != nil {
		eu.SetPlateColor(*s)
	}
	return eu
}

// ClearPlateColor clears the value of the "plate_color" field.
func (eu *EventUpdate) ClearPlateColor() *EventUpdate {
	eu.mutation.ClearPlateColor()
	return eu
}

// SetPlateNumber sets the "plate_number" field.
func (eu *EventUpdate) SetPlateNumber(s string) *EventUpdate {
	eu.mutation.SetPlateNumber(s)
	return eu
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateNumber(s *string) *EventUpdate {
	if s != nil {
		eu.SetPlateNumber(*s)
	}
	return eu
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (eu *EventUpdate) ClearPlateNumber() *EventUpdate {
	eu.mutation.ClearPlateNumber()
	return eu
}

// SetPlateType sets the "plate_type" field.
func (eu *EventUpdate) SetPlateType(s string) *EventUpdate {
	eu.mutation.SetPlateType(s)
	return eu
}

// SetNillablePlateType sets the "plate_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateType(s *string) *EventUpdate {
	if s != nil {
		eu.SetPlateType(*s)
	}
	return eu
}

// ClearPlateType clears the value of the "plate_type" field.
func (eu *EventUpdate) ClearPlateType() *EventUpdate {
	eu.mutation.ClearPlateType()
	return eu
}

// SetPlateRegion sets the "plate_region" field.
func (eu *EventUpdate) SetPlateRegion(s string) *EventUpdate {
	eu.mutation.SetPlateRegion(s)
	return eu
}

// SetNillablePlateRegion sets the "plate_region" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateRegion(s *string) *EventUpdate {
	if s != nil {
		eu.SetPlateRegion(*s)
	}
	return eu
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (eu *EventUpdate) ClearPlateRegion() *EventUpdate {
	eu.mutation.ClearPlateRegion()
	return eu
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (eu *EventUpdate) SetPlateUploadNum(i int) *EventUpdate {
	eu.mutation.ResetPlateUploadNum()
	eu.mutation.SetPlateUploadNum(i)
	return eu
}

// SetNillablePlateUploadNum sets the "plate_upload_num" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlateUploadNum(i *int) *EventUpdate {
	if i != nil {
		eu.SetPlateUploadNum(*i)
	}
	return eu
}

// AddPlateUploadNum adds i to the "plate_upload_num" field.
func (eu *EventUpdate) AddPlateUploadNum(i int) *EventUpdate {
	eu.mutation.AddPlateUploadNum(i)
	return eu
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (eu *EventUpdate) ClearPlateUploadNum() *EventUpdate {
	eu.mutation.ClearPlateUploadNum()
	return eu
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (eu *EventUpdate) SetSnapAccurateTime(s string) *EventUpdate {
	eu.mutation.SetSnapAccurateTime(s)
	return eu
}

// SetNillableSnapAccurateTime sets the "snap_accurate_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapAccurateTime(s *string) *EventUpdate {
	if s != nil {
		eu.SetSnapAccurateTime(*s)
	}
	return eu
}

// ClearSnapAccurateTime clears the value of the "snap_accurate_time" field.
func (eu *EventUpdate) ClearSnapAccurateTime() *EventUpdate {
	eu.mutation.ClearSnapAccurateTime()
	return eu
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (eu *EventUpdate) SetSnapAllowUser(b bool) *EventUpdate {
	eu.mutation.SetSnapAllowUser(b)
	return eu
}

// SetNillableSnapAllowUser sets the "snap_allow_user" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapAllowUser(b *bool) *EventUpdate {
	if b != nil {
		eu.SetSnapAllowUser(*b)
	}
	return eu
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (eu *EventUpdate) ClearSnapAllowUser() *EventUpdate {
	eu.mutation.ClearSnapAllowUser()
	return eu
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (eu *EventUpdate) SetSnapAllowUserEndTime(s string) *EventUpdate {
	eu.mutation.SetSnapAllowUserEndTime(s)
	return eu
}

// SetNillableSnapAllowUserEndTime sets the "snap_allow_user_end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapAllowUserEndTime(s *string) *EventUpdate {
	if s != nil {
		eu.SetSnapAllowUserEndTime(*s)
	}
	return eu
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (eu *EventUpdate) ClearSnapAllowUserEndTime() *EventUpdate {
	eu.mutation.ClearSnapAllowUserEndTime()
	return eu
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (eu *EventUpdate) SetSnapDstTune(i int) *EventUpdate {
	eu.mutation.ResetSnapDstTune()
	eu.mutation.SetSnapDstTune(i)
	return eu
}

// SetNillableSnapDstTune sets the "snap_dst_tune" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapDstTune(i *int) *EventUpdate {
	if i != nil {
		eu.SetSnapDstTune(*i)
	}
	return eu
}

// AddSnapDstTune adds i to the "snap_dst_tune" field.
func (eu *EventUpdate) AddSnapDstTune(i int) *EventUpdate {
	eu.mutation.AddSnapDstTune(i)
	return eu
}

// ClearSnapDstTune clears the value of the "snap_dst_tune" field.
func (eu *EventUpdate) ClearSnapDstTune() *EventUpdate {
	eu.mutation.ClearSnapDstTune()
	return eu
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (eu *EventUpdate) SetSnapDefenceCode(s string) *EventUpdate {
	eu.mutation.SetSnapDefenceCode(s)
	return eu
}

// SetNillableSnapDefenceCode sets the "snap_defence_code" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapDefenceCode(s *string) *EventUpdate {
	if s != nil {
		eu.SetSnapDefenceCode(*s)
	}
	return eu
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (eu *EventUpdate) ClearSnapDefenceCode() *EventUpdate {
	eu.mutation.ClearSnapDefenceCode()
	return eu
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (eu *EventUpdate) SetSnapDeviceID(s string) *EventUpdate {
	eu.mutation.SetSnapDeviceID(s)
	return eu
}

// SetNillableSnapDeviceID sets the "snap_device_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapDeviceID(s *string) *EventUpdate {
	if s != nil {
		eu.SetSnapDeviceID(*s)
	}
	return eu
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (eu *EventUpdate) ClearSnapDeviceID() *EventUpdate {
	eu.mutation.ClearSnapDeviceID()
	return eu
}

// SetSnapDirection sets the "snap_direction" field.
func (eu *EventUpdate) SetSnapDirection(s string) *EventUpdate {
	eu.mutation.SetSnapDirection(s)
	return eu
}

// SetNillableSnapDirection sets the "snap_direction" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapDirection(s *string) *EventUpdate {
	if s != nil {
		eu.SetSnapDirection(*s)
	}
	return eu
}

// ClearSnapDirection clears the value of the "snap_direction" field.
func (eu *EventUpdate) ClearSnapDirection() *EventUpdate {
	eu.mutation.ClearSnapDirection()
	return eu
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (eu *EventUpdate) SetSnapInCarPeopleNum(i int) *EventUpdate {
	eu.mutation.ResetSnapInCarPeopleNum()
	eu.mutation.SetSnapInCarPeopleNum(i)
	return eu
}

// SetNillableSnapInCarPeopleNum sets the "snap_in_car_people_num" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapInCarPeopleNum(i *int) *EventUpdate {
	if i != nil {
		eu.SetSnapInCarPeopleNum(*i)
	}
	return eu
}

// AddSnapInCarPeopleNum adds i to the "snap_in_car_people_num" field.
func (eu *EventUpdate) AddSnapInCarPeopleNum(i int) *EventUpdate {
	eu.mutation.AddSnapInCarPeopleNum(i)
	return eu
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (eu *EventUpdate) ClearSnapInCarPeopleNum() *EventUpdate {
	eu.mutation.ClearSnapInCarPeopleNum()
	return eu
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (eu *EventUpdate) SetSnapLanNo(i int) *EventUpdate {
	eu.mutation.ResetSnapLanNo()
	eu.mutation.SetSnapLanNo(i)
	return eu
}

// SetNillableSnapLanNo sets the "snap_lan_no" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapLanNo(i *int) *EventUpdate {
	if i != nil {
		eu.SetSnapLanNo(*i)
	}
	return eu
}

// AddSnapLanNo adds i to the "snap_lan_no" field.
func (eu *EventUpdate) AddSnapLanNo(i int) *EventUpdate {
	eu.mutation.AddSnapLanNo(i)
	return eu
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (eu *EventUpdate) ClearSnapLanNo() *EventUpdate {
	eu.mutation.ClearSnapLanNo()
	return eu
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (eu *EventUpdate) SetSnapOpenStrobe(b bool) *EventUpdate {
	eu.mutation.SetSnapOpenStrobe(b)
	return eu
}

// SetNillableSnapOpenStrobe sets the "snap_open_strobe" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapOpenStrobe(b *bool) *EventUpdate {
	if b != nil {
		eu.SetSnapOpenStrobe(*b)
	}
	return eu
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (eu *EventUpdate) ClearSnapOpenStrobe() *EventUpdate {
	eu.mutation.ClearSnapOpenStrobe()
	return eu
}

// SetSnapTime sets the "snap_time" field.
func (eu *EventUpdate) SetSnapTime(s string) *EventUpdate {
	eu.mutation.SetSnapTime(s)
	return eu
}

// SetNillableSnapTime sets the "snap_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapTime(s *string) *EventUpdate {
	if s != nil {
		eu.SetSnapTime(*s)
	}
	return eu
}

// ClearSnapTime clears the value of the "snap_time" field.
func (eu *EventUpdate) ClearSnapTime() *EventUpdate {
	eu.mutation.ClearSnapTime()
	return eu
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (eu *EventUpdate) SetSnapTimeZone(i int) *EventUpdate {
	eu.mutation.ResetSnapTimeZone()
	eu.mutation.SetSnapTimeZone(i)
	return eu
}

// SetNillableSnapTimeZone sets the "snap_time_zone" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSnapTimeZone(i *int) *EventUpdate {
	if i != nil {
		eu.SetSnapTimeZone(*i)
	}
	return eu
}

// AddSnapTimeZone adds i to the "snap_time_zone" field.
func (eu *EventUpdate) AddSnapTimeZone(i int) *EventUpdate {
	eu.mutation.AddSnapTimeZone(i)
	return eu
}

// ClearSnapTimeZone clears the value of the "snap_time_zone" field.
func (eu *EventUpdate) ClearSnapTimeZone() *EventUpdate {
	eu.mutation.ClearSnapTimeZone()
	return eu
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (eu *EventUpdate) SetVehicleSpeed(i int) *EventUpdate {
	eu.mutation.ResetVehicleSpeed()
	eu.mutation.SetVehicleSpeed(i)
	return eu
}

// SetNillableVehicleSpeed sets the "vehicle_speed" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVehicleSpeed(i *int) *EventUpdate {
	if i != nil {
		eu.SetVehicleSpeed(*i)
	}
	return eu
}

// AddVehicleSpeed adds i to the "vehicle_speed" field.
func (eu *EventUpdate) AddVehicleSpeed(i int) *EventUpdate {
	eu.mutation.AddVehicleSpeed(i)
	return eu
}

// ClearVehicleSpeed clears the value of the "vehicle_speed" field.
func (eu *EventUpdate) ClearVehicleSpeed() *EventUpdate {
	eu.mutation.ClearVehicleSpeed()
	return eu
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (eu *EventUpdate) SetVehicleBoundingBox(i []int) *EventUpdate {
	eu.mutation.SetVehicleBoundingBox(i)
	return eu
}

// AppendVehicleBoundingBox appends i to the "vehicle_bounding_box" field.
func (eu *EventUpdate) AppendVehicleBoundingBox(i []int) *EventUpdate {
	eu.mutation.AppendVehicleBoundingBox(i)
	return eu
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (eu *EventUpdate) ClearVehicleBoundingBox() *EventUpdate {
	eu.mutation.ClearVehicleBoundingBox()
	return eu
}

// SetVehicleColor sets the "vehicle_color" field.
func (eu *EventUpdate) SetVehicleColor(s string) *EventUpdate {
	eu.mutation.SetVehicleColor(s)
	return eu
}

// SetNillableVehicleColor sets the "vehicle_color" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVehicleColor(s *string) *EventUpdate {
	if s != nil {
		eu.SetVehicleColor(*s)
	}
	return eu
}

// ClearVehicleColor clears the value of the "vehicle_color" field.
func (eu *EventUpdate) ClearVehicleColor() *EventUpdate {
	eu.mutation.ClearVehicleColor()
	return eu
}

// SetVehicleSeries sets the "vehicle_series" field.
func (eu *EventUpdate) SetVehicleSeries(s string) *EventUpdate {
	eu.mutation.SetVehicleSeries(s)
	return eu
}

// SetNillableVehicleSeries sets the "vehicle_series" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVehicleSeries(s *string) *EventUpdate {
	if s != nil {
		eu.SetVehicleSeries(*s)
	}
	return eu
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (eu *EventUpdate) ClearVehicleSeries() *EventUpdate {
	eu.mutation.ClearVehicleSeries()
	return eu
}

// SetVehicleType sets the "vehicle_type" field.
func (eu *EventUpdate) SetVehicleType(s string) *EventUpdate {
	eu.mutation.SetVehicleType(s)
	return eu
}

// SetNillableVehicleType sets the "vehicle_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVehicleType(s *string) *EventUpdate {
	if s != nil {
		eu.SetVehicleType(*s)
	}
	return eu
}

// ClearVehicleType clears the value of the "vehicle_type" field.
func (eu *EventUpdate) ClearVehicleType() *EventUpdate {
	eu.mutation.ClearVehicleType()
	return eu
}

// SetIsBlockedVehicle sets the "is_blocked_vehicle" field.
func (eu *EventUpdate) SetIsBlockedVehicle(b bool) *EventUpdate {
	eu.mutation.SetIsBlockedVehicle(b)
	return eu
}

// SetNillableIsBlockedVehicle sets the "is_blocked_vehicle" field if the given value is not nil.
func (eu *EventUpdate) SetNillableIsBlockedVehicle(b *bool) *EventUpdate {
	if b != nil {
		eu.SetIsBlockedVehicle(*b)
	}
	return eu
}

// ClearIsBlockedVehicle clears the value of the "is_blocked_vehicle" field.
func (eu *EventUpdate) ClearIsBlockedVehicle() *EventUpdate {
	eu.mutation.ClearIsBlockedVehicle()
	return eu
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.PlateBoundingBox(); ok {
		_spec.SetField(event.FieldPlateBoundingBox, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedPlateBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldPlateBoundingBox, value)
		})
	}
	if eu.mutation.PlateBoundingBoxCleared() {
		_spec.ClearField(event.FieldPlateBoundingBox, field.TypeJSON)
	}
	if value, ok := eu.mutation.PlateChannel(); ok {
		_spec.SetField(event.FieldPlateChannel, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedPlateChannel(); ok {
		_spec.AddField(event.FieldPlateChannel, field.TypeInt, value)
	}
	if eu.mutation.PlateChannelCleared() {
		_spec.ClearField(event.FieldPlateChannel, field.TypeInt)
	}
	if value, ok := eu.mutation.PlateConfidence(); ok {
		_spec.SetField(event.FieldPlateConfidence, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedPlateConfidence(); ok {
		_spec.AddField(event.FieldPlateConfidence, field.TypeInt, value)
	}
	if eu.mutation.PlateConfidenceCleared() {
		_spec.ClearField(event.FieldPlateConfidence, field.TypeInt)
	}
	if value, ok := eu.mutation.PlateIsExist(); ok {
		_spec.SetField(event.FieldPlateIsExist, field.TypeBool, value)
	}
	if eu.mutation.PlateIsExistCleared() {
		_spec.ClearField(event.FieldPlateIsExist, field.TypeBool)
	}
	if value, ok := eu.mutation.PlateColor(); ok {
		_spec.SetField(event.FieldPlateColor, field.TypeString, value)
	}
	if eu.mutation.PlateColorCleared() {
		_spec.ClearField(event.FieldPlateColor, field.TypeString)
	}
	if value, ok := eu.mutation.PlateNumber(); ok {
		_spec.SetField(event.FieldPlateNumber, field.TypeString, value)
	}
	if eu.mutation.PlateNumberCleared() {
		_spec.ClearField(event.FieldPlateNumber, field.TypeString)
	}
	if value, ok := eu.mutation.PlateType(); ok {
		_spec.SetField(event.FieldPlateType, field.TypeString, value)
	}
	if eu.mutation.PlateTypeCleared() {
		_spec.ClearField(event.FieldPlateType, field.TypeString)
	}
	if value, ok := eu.mutation.PlateRegion(); ok {
		_spec.SetField(event.FieldPlateRegion, field.TypeString, value)
	}
	if eu.mutation.PlateRegionCleared() {
		_spec.ClearField(event.FieldPlateRegion, field.TypeString)
	}
	if value, ok := eu.mutation.PlateUploadNum(); ok {
		_spec.SetField(event.FieldPlateUploadNum, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedPlateUploadNum(); ok {
		_spec.AddField(event.FieldPlateUploadNum, field.TypeInt, value)
	}
	if eu.mutation.PlateUploadNumCleared() {
		_spec.ClearField(event.FieldPlateUploadNum, field.TypeInt)
	}
	if value, ok := eu.mutation.SnapAccurateTime(); ok {
		_spec.SetField(event.FieldSnapAccurateTime, field.TypeString, value)
	}
	if eu.mutation.SnapAccurateTimeCleared() {
		_spec.ClearField(event.FieldSnapAccurateTime, field.TypeString)
	}
	if value, ok := eu.mutation.SnapAllowUser(); ok {
		_spec.SetField(event.FieldSnapAllowUser, field.TypeBool, value)
	}
	if eu.mutation.SnapAllowUserCleared() {
		_spec.ClearField(event.FieldSnapAllowUser, field.TypeBool)
	}
	if value, ok := eu.mutation.SnapAllowUserEndTime(); ok {
		_spec.SetField(event.FieldSnapAllowUserEndTime, field.TypeString, value)
	}
	if eu.mutation.SnapAllowUserEndTimeCleared() {
		_spec.ClearField(event.FieldSnapAllowUserEndTime, field.TypeString)
	}
	if value, ok := eu.mutation.SnapDstTune(); ok {
		_spec.SetField(event.FieldSnapDstTune, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSnapDstTune(); ok {
		_spec.AddField(event.FieldSnapDstTune, field.TypeInt, value)
	}
	if eu.mutation.SnapDstTuneCleared() {
		_spec.ClearField(event.FieldSnapDstTune, field.TypeInt)
	}
	if value, ok := eu.mutation.SnapDefenceCode(); ok {
		_spec.SetField(event.FieldSnapDefenceCode, field.TypeString, value)
	}
	if eu.mutation.SnapDefenceCodeCleared() {
		_spec.ClearField(event.FieldSnapDefenceCode, field.TypeString)
	}
	if value, ok := eu.mutation.SnapDeviceID(); ok {
		_spec.SetField(event.FieldSnapDeviceID, field.TypeString, value)
	}
	if eu.mutation.SnapDeviceIDCleared() {
		_spec.ClearField(event.FieldSnapDeviceID, field.TypeString)
	}
	if value, ok := eu.mutation.SnapDirection(); ok {
		_spec.SetField(event.FieldSnapDirection, field.TypeString, value)
	}
	if eu.mutation.SnapDirectionCleared() {
		_spec.ClearField(event.FieldSnapDirection, field.TypeString)
	}
	if value, ok := eu.mutation.SnapInCarPeopleNum(); ok {
		_spec.SetField(event.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSnapInCarPeopleNum(); ok {
		_spec.AddField(event.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if eu.mutation.SnapInCarPeopleNumCleared() {
		_spec.ClearField(event.FieldSnapInCarPeopleNum, field.TypeInt)
	}
	if value, ok := eu.mutation.SnapLanNo(); ok {
		_spec.SetField(event.FieldSnapLanNo, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSnapLanNo(); ok {
		_spec.AddField(event.FieldSnapLanNo, field.TypeInt, value)
	}
	if eu.mutation.SnapLanNoCleared() {
		_spec.ClearField(event.FieldSnapLanNo, field.TypeInt)
	}
	if value, ok := eu.mutation.SnapOpenStrobe(); ok {
		_spec.SetField(event.FieldSnapOpenStrobe, field.TypeBool, value)
	}
	if eu.mutation.SnapOpenStrobeCleared() {
		_spec.ClearField(event.FieldSnapOpenStrobe, field.TypeBool)
	}
	if value, ok := eu.mutation.SnapTime(); ok {
		_spec.SetField(event.FieldSnapTime, field.TypeString, value)
	}
	if eu.mutation.SnapTimeCleared() {
		_spec.ClearField(event.FieldSnapTime, field.TypeString)
	}
	if value, ok := eu.mutation.SnapTimeZone(); ok {
		_spec.SetField(event.FieldSnapTimeZone, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSnapTimeZone(); ok {
		_spec.AddField(event.FieldSnapTimeZone, field.TypeInt, value)
	}
	if eu.mutation.SnapTimeZoneCleared() {
		_spec.ClearField(event.FieldSnapTimeZone, field.TypeInt)
	}
	if value, ok := eu.mutation.VehicleSpeed(); ok {
		_spec.SetField(event.FieldVehicleSpeed, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedVehicleSpeed(); ok {
		_spec.AddField(event.FieldVehicleSpeed, field.TypeInt, value)
	}
	if eu.mutation.VehicleSpeedCleared() {
		_spec.ClearField(event.FieldVehicleSpeed, field.TypeInt)
	}
	if value, ok := eu.mutation.VehicleBoundingBox(); ok {
		_spec.SetField(event.FieldVehicleBoundingBox, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedVehicleBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldVehicleBoundingBox, value)
		})
	}
	if eu.mutation.VehicleBoundingBoxCleared() {
		_spec.ClearField(event.FieldVehicleBoundingBox, field.TypeJSON)
	}
	if value, ok := eu.mutation.VehicleColor(); ok {
		_spec.SetField(event.FieldVehicleColor, field.TypeString, value)
	}
	if eu.mutation.VehicleColorCleared() {
		_spec.ClearField(event.FieldVehicleColor, field.TypeString)
	}
	if value, ok := eu.mutation.VehicleSeries(); ok {
		_spec.SetField(event.FieldVehicleSeries, field.TypeString, value)
	}
	if eu.mutation.VehicleSeriesCleared() {
		_spec.ClearField(event.FieldVehicleSeries, field.TypeString)
	}
	if value, ok := eu.mutation.VehicleType(); ok {
		_spec.SetField(event.FieldVehicleType, field.TypeString, value)
	}
	if eu.mutation.VehicleTypeCleared() {
		_spec.ClearField(event.FieldVehicleType, field.TypeString)
	}
	if value, ok := eu.mutation.IsBlockedVehicle(); ok {
		_spec.SetField(event.FieldIsBlockedVehicle, field.TypeBool, value)
	}
	if eu.mutation.IsBlockedVehicleCleared() {
		_spec.ClearField(event.FieldIsBlockedVehicle, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (euo *EventUpdateOne) SetPlateBoundingBox(i []int) *EventUpdateOne {
	euo.mutation.SetPlateBoundingBox(i)
	return euo
}

// AppendPlateBoundingBox appends i to the "plate_bounding_box" field.
func (euo *EventUpdateOne) AppendPlateBoundingBox(i []int) *EventUpdateOne {
	euo.mutation.AppendPlateBoundingBox(i)
	return euo
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (euo *EventUpdateOne) ClearPlateBoundingBox() *EventUpdateOne {
	euo.mutation.ClearPlateBoundingBox()
	return euo
}

// SetPlateChannel sets the "plate_channel" field.
func (euo *EventUpdateOne) SetPlateChannel(i int) *EventUpdateOne {
	euo.mutation.ResetPlateChannel()
	euo.mutation.SetPlateChannel(i)
	return euo
}

// SetNillablePlateChannel sets the "plate_channel" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateChannel(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetPlateChannel(*i)
	}
	return euo
}

// AddPlateChannel adds i to the "plate_channel" field.
func (euo *EventUpdateOne) AddPlateChannel(i int) *EventUpdateOne {
	euo.mutation.AddPlateChannel(i)
	return euo
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (euo *EventUpdateOne) ClearPlateChannel() *EventUpdateOne {
	euo.mutation.ClearPlateChannel()
	return euo
}

// SetPlateConfidence sets the "plate_confidence" field.
func (euo *EventUpdateOne) SetPlateConfidence(i int) *EventUpdateOne {
	euo.mutation.ResetPlateConfidence()
	euo.mutation.SetPlateConfidence(i)
	return euo
}

// SetNillablePlateConfidence sets the "plate_confidence" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateConfidence(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetPlateConfidence(*i)
	}
	return euo
}

// AddPlateConfidence adds i to the "plate_confidence" field.
func (euo *EventUpdateOne) AddPlateConfidence(i int) *EventUpdateOne {
	euo.mutation.AddPlateConfidence(i)
	return euo
}

// ClearPlateConfidence clears the value of the "plate_confidence" field.
func (euo *EventUpdateOne) ClearPlateConfidence() *EventUpdateOne {
	euo.mutation.ClearPlateConfidence()
	return euo
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (euo *EventUpdateOne) SetPlateIsExist(b bool) *EventUpdateOne {
	euo.mutation.SetPlateIsExist(b)
	return euo
}

// SetNillablePlateIsExist sets the "plate_is_exist" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateIsExist(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetPlateIsExist(*b)
	}
	return euo
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (euo *EventUpdateOne) ClearPlateIsExist() *EventUpdateOne {
	euo.mutation.ClearPlateIsExist()
	return euo
}

// SetPlateColor sets the "plate_color" field.
func (euo *EventUpdateOne) SetPlateColor(s string) *EventUpdateOne {
	euo.mutation.SetPlateColor(s)
	return euo
}

// SetNillablePlateColor sets the "plate_color" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateColor(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetPlateColor(*s)
	}
	return euo
}

// ClearPlateColor clears the value of the "plate_color" field.
func (euo *EventUpdateOne) ClearPlateColor() *EventUpdateOne {
	euo.mutation.ClearPlateColor()
	return euo
}

// SetPlateNumber sets the "plate_number" field.
func (euo *EventUpdateOne) SetPlateNumber(s string) *EventUpdateOne {
	euo.mutation.SetPlateNumber(s)
	return euo
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateNumber(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetPlateNumber(*s)
	}
	return euo
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (euo *EventUpdateOne) ClearPlateNumber() *EventUpdateOne {
	euo.mutation.ClearPlateNumber()
	return euo
}

// SetPlateType sets the "plate_type" field.
func (euo *EventUpdateOne) SetPlateType(s string) *EventUpdateOne {
	euo.mutation.SetPlateType(s)
	return euo
}

// SetNillablePlateType sets the "plate_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateType(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetPlateType(*s)
	}
	return euo
}

// ClearPlateType clears the value of the "plate_type" field.
func (euo *EventUpdateOne) ClearPlateType() *EventUpdateOne {
	euo.mutation.ClearPlateType()
	return euo
}

// SetPlateRegion sets the "plate_region" field.
func (euo *EventUpdateOne) SetPlateRegion(s string) *EventUpdateOne {
	euo.mutation.SetPlateRegion(s)
	return euo
}

// SetNillablePlateRegion sets the "plate_region" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateRegion(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetPlateRegion(*s)
	}
	return euo
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (euo *EventUpdateOne) ClearPlateRegion() *EventUpdateOne {
	euo.mutation.ClearPlateRegion()
	return euo
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (euo *EventUpdateOne) SetPlateUploadNum(i int) *EventUpdateOne {
	euo.mutation.ResetPlateUploadNum()
	euo.mutation.SetPlateUploadNum(i)
	return euo
}

// SetNillablePlateUploadNum sets the "plate_upload_num" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlateUploadNum(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetPlateUploadNum(*i)
	}
	return euo
}

// AddPlateUploadNum adds i to the "plate_upload_num" field.
func (euo *EventUpdateOne) AddPlateUploadNum(i int) *EventUpdateOne {
	euo.mutation.AddPlateUploadNum(i)
	return euo
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (euo *EventUpdateOne) ClearPlateUploadNum() *EventUpdateOne {
	euo.mutation.ClearPlateUploadNum()
	return euo
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (euo *EventUpdateOne) SetSnapAccurateTime(s string) *EventUpdateOne {
	euo.mutation.SetSnapAccurateTime(s)
	return euo
}

// SetNillableSnapAccurateTime sets the "snap_accurate_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapAccurateTime(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSnapAccurateTime(*s)
	}
	return euo
}

// ClearSnapAccurateTime clears the value of the "snap_accurate_time" field.
func (euo *EventUpdateOne) ClearSnapAccurateTime() *EventUpdateOne {
	euo.mutation.ClearSnapAccurateTime()
	return euo
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (euo *EventUpdateOne) SetSnapAllowUser(b bool) *EventUpdateOne {
	euo.mutation.SetSnapAllowUser(b)
	return euo
}

// SetNillableSnapAllowUser sets the "snap_allow_user" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapAllowUser(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetSnapAllowUser(*b)
	}
	return euo
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (euo *EventUpdateOne) ClearSnapAllowUser() *EventUpdateOne {
	euo.mutation.ClearSnapAllowUser()
	return euo
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (euo *EventUpdateOne) SetSnapAllowUserEndTime(s string) *EventUpdateOne {
	euo.mutation.SetSnapAllowUserEndTime(s)
	return euo
}

// SetNillableSnapAllowUserEndTime sets the "snap_allow_user_end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapAllowUserEndTime(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSnapAllowUserEndTime(*s)
	}
	return euo
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (euo *EventUpdateOne) ClearSnapAllowUserEndTime() *EventUpdateOne {
	euo.mutation.ClearSnapAllowUserEndTime()
	return euo
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (euo *EventUpdateOne) SetSnapDstTune(i int) *EventUpdateOne {
	euo.mutation.ResetSnapDstTune()
	euo.mutation.SetSnapDstTune(i)
	return euo
}

// SetNillableSnapDstTune sets the "snap_dst_tune" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapDstTune(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetSnapDstTune(*i)
	}
	return euo
}

// AddSnapDstTune adds i to the "snap_dst_tune" field.
func (euo *EventUpdateOne) AddSnapDstTune(i int) *EventUpdateOne {
	euo.mutation.AddSnapDstTune(i)
	return euo
}

// ClearSnapDstTune clears the value of the "snap_dst_tune" field.
func (euo *EventUpdateOne) ClearSnapDstTune() *EventUpdateOne {
	euo.mutation.ClearSnapDstTune()
	return euo
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (euo *EventUpdateOne) SetSnapDefenceCode(s string) *EventUpdateOne {
	euo.mutation.SetSnapDefenceCode(s)
	return euo
}

// SetNillableSnapDefenceCode sets the "snap_defence_code" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapDefenceCode(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSnapDefenceCode(*s)
	}
	return euo
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (euo *EventUpdateOne) ClearSnapDefenceCode() *EventUpdateOne {
	euo.mutation.ClearSnapDefenceCode()
	return euo
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (euo *EventUpdateOne) SetSnapDeviceID(s string) *EventUpdateOne {
	euo.mutation.SetSnapDeviceID(s)
	return euo
}

// SetNillableSnapDeviceID sets the "snap_device_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapDeviceID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSnapDeviceID(*s)
	}
	return euo
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (euo *EventUpdateOne) ClearSnapDeviceID() *EventUpdateOne {
	euo.mutation.ClearSnapDeviceID()
	return euo
}

// SetSnapDirection sets the "snap_direction" field.
func (euo *EventUpdateOne) SetSnapDirection(s string) *EventUpdateOne {
	euo.mutation.SetSnapDirection(s)
	return euo
}

// SetNillableSnapDirection sets the "snap_direction" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapDirection(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSnapDirection(*s)
	}
	return euo
}

// ClearSnapDirection clears the value of the "snap_direction" field.
func (euo *EventUpdateOne) ClearSnapDirection() *EventUpdateOne {
	euo.mutation.ClearSnapDirection()
	return euo
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (euo *EventUpdateOne) SetSnapInCarPeopleNum(i int) *EventUpdateOne {
	euo.mutation.ResetSnapInCarPeopleNum()
	euo.mutation.SetSnapInCarPeopleNum(i)
	return euo
}

// SetNillableSnapInCarPeopleNum sets the "snap_in_car_people_num" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapInCarPeopleNum(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetSnapInCarPeopleNum(*i)
	}
	return euo
}

// AddSnapInCarPeopleNum adds i to the "snap_in_car_people_num" field.
func (euo *EventUpdateOne) AddSnapInCarPeopleNum(i int) *EventUpdateOne {
	euo.mutation.AddSnapInCarPeopleNum(i)
	return euo
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (euo *EventUpdateOne) ClearSnapInCarPeopleNum() *EventUpdateOne {
	euo.mutation.ClearSnapInCarPeopleNum()
	return euo
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (euo *EventUpdateOne) SetSnapLanNo(i int) *EventUpdateOne {
	euo.mutation.ResetSnapLanNo()
	euo.mutation.SetSnapLanNo(i)
	return euo
}

// SetNillableSnapLanNo sets the "snap_lan_no" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapLanNo(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetSnapLanNo(*i)
	}
	return euo
}

// AddSnapLanNo adds i to the "snap_lan_no" field.
func (euo *EventUpdateOne) AddSnapLanNo(i int) *EventUpdateOne {
	euo.mutation.AddSnapLanNo(i)
	return euo
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (euo *EventUpdateOne) ClearSnapLanNo() *EventUpdateOne {
	euo.mutation.ClearSnapLanNo()
	return euo
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (euo *EventUpdateOne) SetSnapOpenStrobe(b bool) *EventUpdateOne {
	euo.mutation.SetSnapOpenStrobe(b)
	return euo
}

// SetNillableSnapOpenStrobe sets the "snap_open_strobe" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapOpenStrobe(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetSnapOpenStrobe(*b)
	}
	return euo
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (euo *EventUpdateOne) ClearSnapOpenStrobe() *EventUpdateOne {
	euo.mutation.ClearSnapOpenStrobe()
	return euo
}

// SetSnapTime sets the "snap_time" field.
func (euo *EventUpdateOne) SetSnapTime(s string) *EventUpdateOne {
	euo.mutation.SetSnapTime(s)
	return euo
}

// SetNillableSnapTime sets the "snap_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapTime(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSnapTime(*s)
	}
	return euo
}

// ClearSnapTime clears the value of the "snap_time" field.
func (euo *EventUpdateOne) ClearSnapTime() *EventUpdateOne {
	euo.mutation.ClearSnapTime()
	return euo
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (euo *EventUpdateOne) SetSnapTimeZone(i int) *EventUpdateOne {
	euo.mutation.ResetSnapTimeZone()
	euo.mutation.SetSnapTimeZone(i)
	return euo
}

// SetNillableSnapTimeZone sets the "snap_time_zone" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSnapTimeZone(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetSnapTimeZone(*i)
	}
	return euo
}

// AddSnapTimeZone adds i to the "snap_time_zone" field.
func (euo *EventUpdateOne) AddSnapTimeZone(i int) *EventUpdateOne {
	euo.mutation.AddSnapTimeZone(i)
	return euo
}

// ClearSnapTimeZone clears the value of the "snap_time_zone" field.
func (euo *EventUpdateOne) ClearSnapTimeZone() *EventUpdateOne {
	euo.mutation.ClearSnapTimeZone()
	return euo
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (euo *EventUpdateOne) SetVehicleSpeed(i int) *EventUpdateOne {
	euo.mutation.ResetVehicleSpeed()
	euo.mutation.SetVehicleSpeed(i)
	return euo
}

// SetNillableVehicleSpeed sets the "vehicle_speed" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVehicleSpeed(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetVehicleSpeed(*i)
	}
	return euo
}

// AddVehicleSpeed adds i to the "vehicle_speed" field.
func (euo *EventUpdateOne) AddVehicleSpeed(i int) *EventUpdateOne {
	euo.mutation.AddVehicleSpeed(i)
	return euo
}

// ClearVehicleSpeed clears the value of the "vehicle_speed" field.
func (euo *EventUpdateOne) ClearVehicleSpeed() *EventUpdateOne {
	euo.mutation.ClearVehicleSpeed()
	return euo
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (euo *EventUpdateOne) SetVehicleBoundingBox(i []int) *EventUpdateOne {
	euo.mutation.SetVehicleBoundingBox(i)
	return euo
}

// AppendVehicleBoundingBox appends i to the "vehicle_bounding_box" field.
func (euo *EventUpdateOne) AppendVehicleBoundingBox(i []int) *EventUpdateOne {
	euo.mutation.AppendVehicleBoundingBox(i)
	return euo
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (euo *EventUpdateOne) ClearVehicleBoundingBox() *EventUpdateOne {
	euo.mutation.ClearVehicleBoundingBox()
	return euo
}

// SetVehicleColor sets the "vehicle_color" field.
func (euo *EventUpdateOne) SetVehicleColor(s string) *EventUpdateOne {
	euo.mutation.SetVehicleColor(s)
	return euo
}

// SetNillableVehicleColor sets the "vehicle_color" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVehicleColor(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVehicleColor(*s)
	}
	return euo
}

// ClearVehicleColor clears the value of the "vehicle_color" field.
func (euo *EventUpdateOne) ClearVehicleColor() *EventUpdateOne {
	euo.mutation.ClearVehicleColor()
	return euo
}

// SetVehicleSeries sets the "vehicle_series" field.
func (euo *EventUpdateOne) SetVehicleSeries(s string) *EventUpdateOne {
	euo.mutation.SetVehicleSeries(s)
	return euo
}

// SetNillableVehicleSeries sets the "vehicle_series" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVehicleSeries(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVehicleSeries(*s)
	}
	return euo
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (euo *EventUpdateOne) ClearVehicleSeries() *EventUpdateOne {
	euo.mutation.ClearVehicleSeries()
	return euo
}

// SetVehicleType sets the "vehicle_type" field.
func (euo *EventUpdateOne) SetVehicleType(s string) *EventUpdateOne {
	euo.mutation.SetVehicleType(s)
	return euo
}

// SetNillableVehicleType sets the "vehicle_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVehicleType(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVehicleType(*s)
	}
	return euo
}

// ClearVehicleType clears the value of the "vehicle_type" field.
func (euo *EventUpdateOne) ClearVehicleType() *EventUpdateOne {
	euo.mutation.ClearVehicleType()
	return euo
}

// SetIsBlockedVehicle sets the "is_blocked_vehicle" field.
func (euo *EventUpdateOne) SetIsBlockedVehicle(b bool) *EventUpdateOne {
	euo.mutation.SetIsBlockedVehicle(b)
	return euo
}

// SetNillableIsBlockedVehicle sets the "is_blocked_vehicle" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableIsBlockedVehicle(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetIsBlockedVehicle(*b)
	}
	return euo
}

// ClearIsBlockedVehicle clears the value of the "is_blocked_vehicle" field.
func (euo *EventUpdateOne) ClearIsBlockedVehicle() *EventUpdateOne {
	euo.mutation.ClearIsBlockedVehicle()
	return euo
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.PlateBoundingBox(); ok {
		_spec.SetField(event.FieldPlateBoundingBox, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedPlateBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldPlateBoundingBox, value)
		})
	}
	if euo.mutation.PlateBoundingBoxCleared() {
		_spec.ClearField(event.FieldPlateBoundingBox, field.TypeJSON)
	}
	if value, ok := euo.mutation.PlateChannel(); ok {
		_spec.SetField(event.FieldPlateChannel, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedPlateChannel(); ok {
		_spec.AddField(event.FieldPlateChannel, field.TypeInt, value)
	}
	if euo.mutation.PlateChannelCleared() {
		_spec.ClearField(event.FieldPlateChannel, field.TypeInt)
	}
	if value, ok := euo.mutation.PlateConfidence(); ok {
		_spec.SetField(event.FieldPlateConfidence, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedPlateConfidence(); ok {
		_spec.AddField(event.FieldPlateConfidence, field.TypeInt, value)
	}
	if euo.mutation.PlateConfidenceCleared() {
		_spec.ClearField(event.FieldPlateConfidence, field.TypeInt)
	}
	if value, ok := euo.mutation.PlateIsExist(); ok {
		_spec.SetField(event.FieldPlateIsExist, field.TypeBool, value)
	}
	if euo.mutation.PlateIsExistCleared() {
		_spec.ClearField(event.FieldPlateIsExist, field.TypeBool)
	}
	if value, ok := euo.mutation.PlateColor(); ok {
		_spec.SetField(event.FieldPlateColor, field.TypeString, value)
	}
	if euo.mutation.PlateColorCleared() {
		_spec.ClearField(event.FieldPlateColor, field.TypeString)
	}
	if value, ok := euo.mutation.PlateNumber(); ok {
		_spec.SetField(event.FieldPlateNumber, field.TypeString, value)
	}
	if euo.mutation.PlateNumberCleared() {
		_spec.ClearField(event.FieldPlateNumber, field.TypeString)
	}
	if value, ok := euo.mutation.PlateType(); ok {
		_spec.SetField(event.FieldPlateType, field.TypeString, value)
	}
	if euo.mutation.PlateTypeCleared() {
		_spec.ClearField(event.FieldPlateType, field.TypeString)
	}
	if value, ok := euo.mutation.PlateRegion(); ok {
		_spec.SetField(event.FieldPlateRegion, field.TypeString, value)
	}
	if euo.mutation.PlateRegionCleared() {
		_spec.ClearField(event.FieldPlateRegion, field.TypeString)
	}
	if value, ok := euo.mutation.PlateUploadNum(); ok {
		_spec.SetField(event.FieldPlateUploadNum, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedPlateUploadNum(); ok {
		_spec.AddField(event.FieldPlateUploadNum, field.TypeInt, value)
	}
	if euo.mutation.PlateUploadNumCleared() {
		_spec.ClearField(event.FieldPlateUploadNum, field.TypeInt)
	}
	if value, ok := euo.mutation.SnapAccurateTime(); ok {
		_spec.SetField(event.FieldSnapAccurateTime, field.TypeString, value)
	}
	if euo.mutation.SnapAccurateTimeCleared() {
		_spec.ClearField(event.FieldSnapAccurateTime, field.TypeString)
	}
	if value, ok := euo.mutation.SnapAllowUser(); ok {
		_spec.SetField(event.FieldSnapAllowUser, field.TypeBool, value)
	}
	if euo.mutation.SnapAllowUserCleared() {
		_spec.ClearField(event.FieldSnapAllowUser, field.TypeBool)
	}
	if value, ok := euo.mutation.SnapAllowUserEndTime(); ok {
		_spec.SetField(event.FieldSnapAllowUserEndTime, field.TypeString, value)
	}
	if euo.mutation.SnapAllowUserEndTimeCleared() {
		_spec.ClearField(event.FieldSnapAllowUserEndTime, field.TypeString)
	}
	if value, ok := euo.mutation.SnapDstTune(); ok {
		_spec.SetField(event.FieldSnapDstTune, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSnapDstTune(); ok {
		_spec.AddField(event.FieldSnapDstTune, field.TypeInt, value)
	}
	if euo.mutation.SnapDstTuneCleared() {
		_spec.ClearField(event.FieldSnapDstTune, field.TypeInt)
	}
	if value, ok := euo.mutation.SnapDefenceCode(); ok {
		_spec.SetField(event.FieldSnapDefenceCode, field.TypeString, value)
	}
	if euo.mutation.SnapDefenceCodeCleared() {
		_spec.ClearField(event.FieldSnapDefenceCode, field.TypeString)
	}
	if value, ok := euo.mutation.SnapDeviceID(); ok {
		_spec.SetField(event.FieldSnapDeviceID, field.TypeString, value)
	}
	if euo.mutation.SnapDeviceIDCleared() {
		_spec.ClearField(event.FieldSnapDeviceID, field.TypeString)
	}
	if value, ok := euo.mutation.SnapDirection(); ok {
		_spec.SetField(event.FieldSnapDirection, field.TypeString, value)
	}
	if euo.mutation.SnapDirectionCleared() {
		_spec.ClearField(event.FieldSnapDirection, field.TypeString)
	}
	if value, ok := euo.mutation.SnapInCarPeopleNum(); ok {
		_spec.SetField(event.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSnapInCarPeopleNum(); ok {
		_spec.AddField(event.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if euo.mutation.SnapInCarPeopleNumCleared() {
		_spec.ClearField(event.FieldSnapInCarPeopleNum, field.TypeInt)
	}
	if value, ok := euo.mutation.SnapLanNo(); ok {
		_spec.SetField(event.FieldSnapLanNo, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSnapLanNo(); ok {
		_spec.AddField(event.FieldSnapLanNo, field.TypeInt, value)
	}
	if euo.mutation.SnapLanNoCleared() {
		_spec.ClearField(event.FieldSnapLanNo, field.TypeInt)
	}
	if value, ok := euo.mutation.SnapOpenStrobe(); ok {
		_spec.SetField(event.FieldSnapOpenStrobe, field.TypeBool, value)
	}
	if euo.mutation.SnapOpenStrobeCleared() {
		_spec.ClearField(event.FieldSnapOpenStrobe, field.TypeBool)
	}
	if value, ok := euo.mutation.SnapTime(); ok {
		_spec.SetField(event.FieldSnapTime, field.TypeString, value)
	}
	if euo.mutation.SnapTimeCleared() {
		_spec.ClearField(event.FieldSnapTime, field.TypeString)
	}
	if value, ok := euo.mutation.SnapTimeZone(); ok {
		_spec.SetField(event.FieldSnapTimeZone, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSnapTimeZone(); ok {
		_spec.AddField(event.FieldSnapTimeZone, field.TypeInt, value)
	}
	if euo.mutation.SnapTimeZoneCleared() {
		_spec.ClearField(event.FieldSnapTimeZone, field.TypeInt)
	}
	if value, ok := euo.mutation.VehicleSpeed(); ok {
		_spec.SetField(event.FieldVehicleSpeed, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedVehicleSpeed(); ok {
		_spec.AddField(event.FieldVehicleSpeed, field.TypeInt, value)
	}
	if euo.mutation.VehicleSpeedCleared() {
		_spec.ClearField(event.FieldVehicleSpeed, field.TypeInt)
	}
	if value, ok := euo.mutation.VehicleBoundingBox(); ok {
		_spec.SetField(event.FieldVehicleBoundingBox, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedVehicleBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldVehicleBoundingBox, value)
		})
	}
	if euo.mutation.VehicleBoundingBoxCleared() {
		_spec.ClearField(event.FieldVehicleBoundingBox, field.TypeJSON)
	}
	if value, ok := euo.mutation.VehicleColor(); ok {
		_spec.SetField(event.FieldVehicleColor, field.TypeString, value)
	}
	if euo.mutation.VehicleColorCleared() {
		_spec.ClearField(event.FieldVehicleColor, field.TypeString)
	}
	if value, ok := euo.mutation.VehicleSeries(); ok {
		_spec.SetField(event.FieldVehicleSeries, field.TypeString, value)
	}
	if euo.mutation.VehicleSeriesCleared() {
		_spec.ClearField(event.FieldVehicleSeries, field.TypeString)
	}
	if value, ok := euo.mutation.VehicleType(); ok {
		_spec.SetField(event.FieldVehicleType, field.TypeString, value)
	}
	if euo.mutation.VehicleTypeCleared() {
		_spec.ClearField(event.FieldVehicleType, field.TypeString)
	}
	if value, ok := euo.mutation.IsBlockedVehicle(); ok {
		_spec.SetField(event.FieldIsBlockedVehicle, field.TypeBool, value)
	}
	if euo.mutation.IsBlockedVehicleCleared() {
		_spec.ClearField(event.FieldIsBlockedVehicle, field.TypeBool)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
