// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/event"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EventCreate) SetUpdatedAt(t time.Time) *EventCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (ec *EventCreate) SetPlateBoundingBox(i []int) *EventCreate {
	ec.mutation.SetPlateBoundingBox(i)
	return ec
}

// SetPlateChannel sets the "plate_channel" field.
func (ec *EventCreate) SetPlateChannel(i int) *EventCreate {
	ec.mutation.SetPlateChannel(i)
	return ec
}

// SetNillablePlateChannel sets the "plate_channel" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateChannel(i *int) *EventCreate {
	if i != nil {
		ec.SetPlateChannel(*i)
	}
	return ec
}

// SetPlateConfidence sets the "plate_confidence" field.
func (ec *EventCreate) SetPlateConfidence(i int) *EventCreate {
	ec.mutation.SetPlateConfidence(i)
	return ec
}

// SetNillablePlateConfidence sets the "plate_confidence" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateConfidence(i *int) *EventCreate {
	if i != nil {
		ec.SetPlateConfidence(*i)
	}
	return ec
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (ec *EventCreate) SetPlateIsExist(b bool) *EventCreate {
	ec.mutation.SetPlateIsExist(b)
	return ec
}

// SetNillablePlateIsExist sets the "plate_is_exist" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateIsExist(b *bool) *EventCreate {
	if b != nil {
		ec.SetPlateIsExist(*b)
	}
	return ec
}

// SetPlateColor sets the "plate_color" field.
func (ec *EventCreate) SetPlateColor(s string) *EventCreate {
	ec.mutation.SetPlateColor(s)
	return ec
}

// SetNillablePlateColor sets the "plate_color" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateColor(s *string) *EventCreate {
	if s != nil {
		ec.SetPlateColor(*s)
	}
	return ec
}

// SetPlateNumber sets the "plate_number" field.
func (ec *EventCreate) SetPlateNumber(s string) *EventCreate {
	ec.mutation.SetPlateNumber(s)
	return ec
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateNumber(s *string) *EventCreate {
	if s != nil {
		ec.SetPlateNumber(*s)
	}
	return ec
}

// SetPlateType sets the "plate_type" field.
func (ec *EventCreate) SetPlateType(s string) *EventCreate {
	ec.mutation.SetPlateType(s)
	return ec
}

// SetNillablePlateType sets the "plate_type" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateType(s *string) *EventCreate {
	if s != nil {
		ec.SetPlateType(*s)
	}
	return ec
}

// SetPlateRegion sets the "plate_region" field.
func (ec *EventCreate) SetPlateRegion(s string) *EventCreate {
	ec.mutation.SetPlateRegion(s)
	return ec
}

// SetNillablePlateRegion sets the "plate_region" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateRegion(s *string) *EventCreate {
	if s != nil {
		ec.SetPlateRegion(*s)
	}
	return ec
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (ec *EventCreate) SetPlateUploadNum(i int) *EventCreate {
	ec.mutation.SetPlateUploadNum(i)
	return ec
}

// SetNillablePlateUploadNum sets the "plate_upload_num" field if the given value is not nil.
func (ec *EventCreate) SetNillablePlateUploadNum(i *int) *EventCreate {
	if i != nil {
		ec.SetPlateUploadNum(*i)
	}
	return ec
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (ec *EventCreate) SetSnapAccurateTime(s string) *EventCreate {
	ec.mutation.SetSnapAccurateTime(s)
	return ec
}

// SetNillableSnapAccurateTime sets the "snap_accurate_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapAccurateTime(s *string) *EventCreate {
	if s != nil {
		ec.SetSnapAccurateTime(*s)
	}
	return ec
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (ec *EventCreate) SetSnapAllowUser(b bool) *EventCreate {
	ec.mutation.SetSnapAllowUser(b)
	return ec
}

// SetNillableSnapAllowUser sets the "snap_allow_user" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapAllowUser(b *bool) *EventCreate {
	if b != nil {
		ec.SetSnapAllowUser(*b)
	}
	return ec
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (ec *EventCreate) SetSnapAllowUserEndTime(s string) *EventCreate {
	ec.mutation.SetSnapAllowUserEndTime(s)
	return ec
}

// SetNillableSnapAllowUserEndTime sets the "snap_allow_user_end_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapAllowUserEndTime(s *string) *EventCreate {
	if s != nil {
		ec.SetSnapAllowUserEndTime(*s)
	}
	return ec
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (ec *EventCreate) SetSnapDstTune(i int) *EventCreate {
	ec.mutation.SetSnapDstTune(i)
	return ec
}

// SetNillableSnapDstTune sets the "snap_dst_tune" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapDstTune(i *int) *EventCreate {
	if i != nil {
		ec.SetSnapDstTune(*i)
	}
	return ec
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (ec *EventCreate) SetSnapDefenceCode(s string) *EventCreate {
	ec.mutation.SetSnapDefenceCode(s)
	return ec
}

// SetNillableSnapDefenceCode sets the "snap_defence_code" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapDefenceCode(s *string) *EventCreate {
	if s != nil {
		ec.SetSnapDefenceCode(*s)
	}
	return ec
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (ec *EventCreate) SetSnapDeviceID(s string) *EventCreate {
	ec.mutation.SetSnapDeviceID(s)
	return ec
}

// SetNillableSnapDeviceID sets the "snap_device_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapDeviceID(s *string) *EventCreate {
	if s != nil {
		ec.SetSnapDeviceID(*s)
	}
	return ec
}

// SetSnapDirection sets the "snap_direction" field.
func (ec *EventCreate) SetSnapDirection(s string) *EventCreate {
	ec.mutation.SetSnapDirection(s)
	return ec
}

// SetNillableSnapDirection sets the "snap_direction" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapDirection(s *string) *EventCreate {
	if s != nil {
		ec.SetSnapDirection(*s)
	}
	return ec
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (ec *EventCreate) SetSnapInCarPeopleNum(i int) *EventCreate {
	ec.mutation.SetSnapInCarPeopleNum(i)
	return ec
}

// SetNillableSnapInCarPeopleNum sets the "snap_in_car_people_num" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapInCarPeopleNum(i *int) *EventCreate {
	if i != nil {
		ec.SetSnapInCarPeopleNum(*i)
	}
	return ec
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (ec *EventCreate) SetSnapLanNo(i int) *EventCreate {
	ec.mutation.SetSnapLanNo(i)
	return ec
}

// SetNillableSnapLanNo sets the "snap_lan_no" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapLanNo(i *int) *EventCreate {
	if i != nil {
		ec.SetSnapLanNo(*i)
	}
	return ec
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (ec *EventCreate) SetSnapOpenStrobe(b bool) *EventCreate {
	ec.mutation.SetSnapOpenStrobe(b)
	return ec
}

// SetNillableSnapOpenStrobe sets the "snap_open_strobe" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapOpenStrobe(b *bool) *EventCreate {
	if b != nil {
		ec.SetSnapOpenStrobe(*b)
	}
	return ec
}

// SetSnapTime sets the "snap_time" field.
func (ec *EventCreate) SetSnapTime(s string) *EventCreate {
	ec.mutation.SetSnapTime(s)
	return ec
}

// SetNillableSnapTime sets the "snap_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapTime(s *string) *EventCreate {
	if s != nil {
		ec.SetSnapTime(*s)
	}
	return ec
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (ec *EventCreate) SetSnapTimeZone(i int) *EventCreate {
	ec.mutation.SetSnapTimeZone(i)
	return ec
}

// SetNillableSnapTimeZone sets the "snap_time_zone" field if the given value is not nil.
func (ec *EventCreate) SetNillableSnapTimeZone(i *int) *EventCreate {
	if i != nil {
		ec.SetSnapTimeZone(*i)
	}
	return ec
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (ec *EventCreate) SetVehicleSpeed(i int) *EventCreate {
	ec.mutation.SetVehicleSpeed(i)
	return ec
}

// SetNillableVehicleSpeed sets the "vehicle_speed" field if the given value is not nil.
func (ec *EventCreate) SetNillableVehicleSpeed(i *int) *EventCreate {
	if i != nil {
		ec.SetVehicleSpeed(*i)
	}
	return ec
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (ec *EventCreate) SetVehicleBoundingBox(i []int) *EventCreate {
	ec.mutation.SetVehicleBoundingBox(i)
	return ec
}

// SetVehicleColor sets the "vehicle_color" field.
func (ec *EventCreate) SetVehicleColor(s string) *EventCreate {
	ec.mutation.SetVehicleColor(s)
	return ec
}

// SetNillableVehicleColor sets the "vehicle_color" field if the given value is not nil.
func (ec *EventCreate) SetNillableVehicleColor(s *string) *EventCreate {
	if s != nil {
		ec.SetVehicleColor(*s)
	}
	return ec
}

// SetVehicleSeries sets the "vehicle_series" field.
func (ec *EventCreate) SetVehicleSeries(s string) *EventCreate {
	ec.mutation.SetVehicleSeries(s)
	return ec
}

// SetNillableVehicleSeries sets the "vehicle_series" field if the given value is not nil.
func (ec *EventCreate) SetNillableVehicleSeries(s *string) *EventCreate {
	if s != nil {
		ec.SetVehicleSeries(*s)
	}
	return ec
}

// SetVehicleType sets the "vehicle_type" field.
func (ec *EventCreate) SetVehicleType(s string) *EventCreate {
	ec.mutation.SetVehicleType(s)
	return ec
}

// SetNillableVehicleType sets the "vehicle_type" field if the given value is not nil.
func (ec *EventCreate) SetNillableVehicleType(s *string) *EventCreate {
	if s != nil {
		ec.SetVehicleType(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EventCreate) SetID(u uuid.UUID) *EventCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EventCreate) SetNillableID(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := event.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := event.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := event.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.PlateBoundingBox(); ok {
		_spec.SetField(event.FieldPlateBoundingBox, field.TypeJSON, value)
		_node.PlateBoundingBox = value
	}
	if value, ok := ec.mutation.PlateChannel(); ok {
		_spec.SetField(event.FieldPlateChannel, field.TypeInt, value)
		_node.PlateChannel = value
	}
	if value, ok := ec.mutation.PlateConfidence(); ok {
		_spec.SetField(event.FieldPlateConfidence, field.TypeInt, value)
		_node.PlateConfidence = value
	}
	if value, ok := ec.mutation.PlateIsExist(); ok {
		_spec.SetField(event.FieldPlateIsExist, field.TypeBool, value)
		_node.PlateIsExist = value
	}
	if value, ok := ec.mutation.PlateColor(); ok {
		_spec.SetField(event.FieldPlateColor, field.TypeString, value)
		_node.PlateColor = value
	}
	if value, ok := ec.mutation.PlateNumber(); ok {
		_spec.SetField(event.FieldPlateNumber, field.TypeString, value)
		_node.PlateNumber = value
	}
	if value, ok := ec.mutation.PlateType(); ok {
		_spec.SetField(event.FieldPlateType, field.TypeString, value)
		_node.PlateType = value
	}
	if value, ok := ec.mutation.PlateRegion(); ok {
		_spec.SetField(event.FieldPlateRegion, field.TypeString, value)
		_node.PlateRegion = value
	}
	if value, ok := ec.mutation.PlateUploadNum(); ok {
		_spec.SetField(event.FieldPlateUploadNum, field.TypeInt, value)
		_node.PlateUploadNum = value
	}
	if value, ok := ec.mutation.SnapAccurateTime(); ok {
		_spec.SetField(event.FieldSnapAccurateTime, field.TypeString, value)
		_node.SnapAccurateTime = value
	}
	if value, ok := ec.mutation.SnapAllowUser(); ok {
		_spec.SetField(event.FieldSnapAllowUser, field.TypeBool, value)
		_node.SnapAllowUser = value
	}
	if value, ok := ec.mutation.SnapAllowUserEndTime(); ok {
		_spec.SetField(event.FieldSnapAllowUserEndTime, field.TypeString, value)
		_node.SnapAllowUserEndTime = value
	}
	if value, ok := ec.mutation.SnapDstTune(); ok {
		_spec.SetField(event.FieldSnapDstTune, field.TypeInt, value)
		_node.SnapDstTune = value
	}
	if value, ok := ec.mutation.SnapDefenceCode(); ok {
		_spec.SetField(event.FieldSnapDefenceCode, field.TypeString, value)
		_node.SnapDefenceCode = value
	}
	if value, ok := ec.mutation.SnapDeviceID(); ok {
		_spec.SetField(event.FieldSnapDeviceID, field.TypeString, value)
		_node.SnapDeviceID = value
	}
	if value, ok := ec.mutation.SnapDirection(); ok {
		_spec.SetField(event.FieldSnapDirection, field.TypeString, value)
		_node.SnapDirection = value
	}
	if value, ok := ec.mutation.SnapInCarPeopleNum(); ok {
		_spec.SetField(event.FieldSnapInCarPeopleNum, field.TypeInt, value)
		_node.SnapInCarPeopleNum = value
	}
	if value, ok := ec.mutation.SnapLanNo(); ok {
		_spec.SetField(event.FieldSnapLanNo, field.TypeInt, value)
		_node.SnapLanNo = value
	}
	if value, ok := ec.mutation.SnapOpenStrobe(); ok {
		_spec.SetField(event.FieldSnapOpenStrobe, field.TypeBool, value)
		_node.SnapOpenStrobe = value
	}
	if value, ok := ec.mutation.SnapTime(); ok {
		_spec.SetField(event.FieldSnapTime, field.TypeString, value)
		_node.SnapTime = value
	}
	if value, ok := ec.mutation.SnapTimeZone(); ok {
		_spec.SetField(event.FieldSnapTimeZone, field.TypeInt, value)
		_node.SnapTimeZone = value
	}
	if value, ok := ec.mutation.VehicleSpeed(); ok {
		_spec.SetField(event.FieldVehicleSpeed, field.TypeInt, value)
		_node.VehicleSpeed = value
	}
	if value, ok := ec.mutation.VehicleBoundingBox(); ok {
		_spec.SetField(event.FieldVehicleBoundingBox, field.TypeJSON, value)
		_node.VehicleBoundingBox = value
	}
	if value, ok := ec.mutation.VehicleColor(); ok {
		_spec.SetField(event.FieldVehicleColor, field.TypeString, value)
		_node.VehicleColor = value
	}
	if value, ok := ec.mutation.VehicleSeries(); ok {
		_spec.SetField(event.FieldVehicleSeries, field.TypeString, value)
		_node.VehicleSeries = value
	}
	if value, ok := ec.mutation.VehicleType(); ok {
		_spec.SetField(event.FieldVehicleType, field.TypeString, value)
		_node.VehicleType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsert) SetUpdatedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateUpdatedAt() *EventUpsert {
	u.SetExcluded(event.FieldUpdatedAt)
	return u
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (u *EventUpsert) SetPlateBoundingBox(v []int) *EventUpsert {
	u.Set(event.FieldPlateBoundingBox, v)
	return u
}

// UpdatePlateBoundingBox sets the "plate_bounding_box" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateBoundingBox() *EventUpsert {
	u.SetExcluded(event.FieldPlateBoundingBox)
	return u
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (u *EventUpsert) ClearPlateBoundingBox() *EventUpsert {
	u.SetNull(event.FieldPlateBoundingBox)
	return u
}

// SetPlateChannel sets the "plate_channel" field.
func (u *EventUpsert) SetPlateChannel(v int) *EventUpsert {
	u.Set(event.FieldPlateChannel, v)
	return u
}

// UpdatePlateChannel sets the "plate_channel" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateChannel() *EventUpsert {
	u.SetExcluded(event.FieldPlateChannel)
	return u
}

// AddPlateChannel adds v to the "plate_channel" field.
func (u *EventUpsert) AddPlateChannel(v int) *EventUpsert {
	u.Add(event.FieldPlateChannel, v)
	return u
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (u *EventUpsert) ClearPlateChannel() *EventUpsert {
	u.SetNull(event.FieldPlateChannel)
	return u
}

// SetPlateConfidence sets the "plate_confidence" field.
func (u *EventUpsert) SetPlateConfidence(v int) *EventUpsert {
	u.Set(event.FieldPlateConfidence, v)
	return u
}

// UpdatePlateConfidence sets the "plate_confidence" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateConfidence() *EventUpsert {
	u.SetExcluded(event.FieldPlateConfidence)
	return u
}

// AddPlateConfidence adds v to the "plate_confidence" field.
func (u *EventUpsert) AddPlateConfidence(v int) *EventUpsert {
	u.Add(event.FieldPlateConfidence, v)
	return u
}

// ClearPlateConfidence clears the value of the "plate_confidence" field.
func (u *EventUpsert) ClearPlateConfidence() *EventUpsert {
	u.SetNull(event.FieldPlateConfidence)
	return u
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (u *EventUpsert) SetPlateIsExist(v bool) *EventUpsert {
	u.Set(event.FieldPlateIsExist, v)
	return u
}

// UpdatePlateIsExist sets the "plate_is_exist" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateIsExist() *EventUpsert {
	u.SetExcluded(event.FieldPlateIsExist)
	return u
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (u *EventUpsert) ClearPlateIsExist() *EventUpsert {
	u.SetNull(event.FieldPlateIsExist)
	return u
}

// SetPlateColor sets the "plate_color" field.
func (u *EventUpsert) SetPlateColor(v string) *EventUpsert {
	u.Set(event.FieldPlateColor, v)
	return u
}

// UpdatePlateColor sets the "plate_color" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateColor() *EventUpsert {
	u.SetExcluded(event.FieldPlateColor)
	return u
}

// ClearPlateColor clears the value of the "plate_color" field.
func (u *EventUpsert) ClearPlateColor() *EventUpsert {
	u.SetNull(event.FieldPlateColor)
	return u
}

// SetPlateNumber sets the "plate_number" field.
func (u *EventUpsert) SetPlateNumber(v string) *EventUpsert {
	u.Set(event.FieldPlateNumber, v)
	return u
}

// UpdatePlateNumber sets the "plate_number" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateNumber() *EventUpsert {
	u.SetExcluded(event.FieldPlateNumber)
	return u
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (u *EventUpsert) ClearPlateNumber() *EventUpsert {
	u.SetNull(event.FieldPlateNumber)
	return u
}

// SetPlateType sets the "plate_type" field.
func (u *EventUpsert) SetPlateType(v string) *EventUpsert {
	u.Set(event.FieldPlateType, v)
	return u
}

// UpdatePlateType sets the "plate_type" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateType() *EventUpsert {
	u.SetExcluded(event.FieldPlateType)
	return u
}

// ClearPlateType clears the value of the "plate_type" field.
func (u *EventUpsert) ClearPlateType() *EventUpsert {
	u.SetNull(event.FieldPlateType)
	return u
}

// SetPlateRegion sets the "plate_region" field.
func (u *EventUpsert) SetPlateRegion(v string) *EventUpsert {
	u.Set(event.FieldPlateRegion, v)
	return u
}

// UpdatePlateRegion sets the "plate_region" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateRegion() *EventUpsert {
	u.SetExcluded(event.FieldPlateRegion)
	return u
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (u *EventUpsert) ClearPlateRegion() *EventUpsert {
	u.SetNull(event.FieldPlateRegion)
	return u
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (u *EventUpsert) SetPlateUploadNum(v int) *EventUpsert {
	u.Set(event.FieldPlateUploadNum, v)
	return u
}

// UpdatePlateUploadNum sets the "plate_upload_num" field to the value that was provided on create.
func (u *EventUpsert) UpdatePlateUploadNum() *EventUpsert {
	u.SetExcluded(event.FieldPlateUploadNum)
	return u
}

// AddPlateUploadNum adds v to the "plate_upload_num" field.
func (u *EventUpsert) AddPlateUploadNum(v int) *EventUpsert {
	u.Add(event.FieldPlateUploadNum, v)
	return u
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (u *EventUpsert) ClearPlateUploadNum() *EventUpsert {
	u.SetNull(event.FieldPlateUploadNum)
	return u
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (u *EventUpsert) SetSnapAccurateTime(v string) *EventUpsert {
	u.Set(event.FieldSnapAccurateTime, v)
	return u
}

// UpdateSnapAccurateTime sets the "snap_accurate_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapAccurateTime() *EventUpsert {
	u.SetExcluded(event.FieldSnapAccurateTime)
	return u
}

// ClearSnapAccurateTime clears the value of the "snap_accurate_time" field.
func (u *EventUpsert) ClearSnapAccurateTime() *EventUpsert {
	u.SetNull(event.FieldSnapAccurateTime)
	return u
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (u *EventUpsert) SetSnapAllowUser(v bool) *EventUpsert {
	u.Set(event.FieldSnapAllowUser, v)
	return u
}

// UpdateSnapAllowUser sets the "snap_allow_user" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapAllowUser() *EventUpsert {
	u.SetExcluded(event.FieldSnapAllowUser)
	return u
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (u *EventUpsert) ClearSnapAllowUser() *EventUpsert {
	u.SetNull(event.FieldSnapAllowUser)
	return u
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (u *EventUpsert) SetSnapAllowUserEndTime(v string) *EventUpsert {
	u.Set(event.FieldSnapAllowUserEndTime, v)
	return u
}

// UpdateSnapAllowUserEndTime sets the "snap_allow_user_end_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapAllowUserEndTime() *EventUpsert {
	u.SetExcluded(event.FieldSnapAllowUserEndTime)
	return u
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (u *EventUpsert) ClearSnapAllowUserEndTime() *EventUpsert {
	u.SetNull(event.FieldSnapAllowUserEndTime)
	return u
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (u *EventUpsert) SetSnapDstTune(v int) *EventUpsert {
	u.Set(event.FieldSnapDstTune, v)
	return u
}

// UpdateSnapDstTune sets the "snap_dst_tune" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapDstTune() *EventUpsert {
	u.SetExcluded(event.FieldSnapDstTune)
	return u
}

// AddSnapDstTune adds v to the "snap_dst_tune" field.
func (u *EventUpsert) AddSnapDstTune(v int) *EventUpsert {
	u.Add(event.FieldSnapDstTune, v)
	return u
}

// ClearSnapDstTune clears the value of the "snap_dst_tune" field.
func (u *EventUpsert) ClearSnapDstTune() *EventUpsert {
	u.SetNull(event.FieldSnapDstTune)
	return u
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (u *EventUpsert) SetSnapDefenceCode(v string) *EventUpsert {
	u.Set(event.FieldSnapDefenceCode, v)
	return u
}

// UpdateSnapDefenceCode sets the "snap_defence_code" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapDefenceCode() *EventUpsert {
	u.SetExcluded(event.FieldSnapDefenceCode)
	return u
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (u *EventUpsert) ClearSnapDefenceCode() *EventUpsert {
	u.SetNull(event.FieldSnapDefenceCode)
	return u
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (u *EventUpsert) SetSnapDeviceID(v string) *EventUpsert {
	u.Set(event.FieldSnapDeviceID, v)
	return u
}

// UpdateSnapDeviceID sets the "snap_device_id" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapDeviceID() *EventUpsert {
	u.SetExcluded(event.FieldSnapDeviceID)
	return u
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (u *EventUpsert) ClearSnapDeviceID() *EventUpsert {
	u.SetNull(event.FieldSnapDeviceID)
	return u
}

// SetSnapDirection sets the "snap_direction" field.
func (u *EventUpsert) SetSnapDirection(v string) *EventUpsert {
	u.Set(event.FieldSnapDirection, v)
	return u
}

// UpdateSnapDirection sets the "snap_direction" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapDirection() *EventUpsert {
	u.SetExcluded(event.FieldSnapDirection)
	return u
}

// ClearSnapDirection clears the value of the "snap_direction" field.
func (u *EventUpsert) ClearSnapDirection() *EventUpsert {
	u.SetNull(event.FieldSnapDirection)
	return u
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (u *EventUpsert) SetSnapInCarPeopleNum(v int) *EventUpsert {
	u.Set(event.FieldSnapInCarPeopleNum, v)
	return u
}

// UpdateSnapInCarPeopleNum sets the "snap_in_car_people_num" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapInCarPeopleNum() *EventUpsert {
	u.SetExcluded(event.FieldSnapInCarPeopleNum)
	return u
}

// AddSnapInCarPeopleNum adds v to the "snap_in_car_people_num" field.
func (u *EventUpsert) AddSnapInCarPeopleNum(v int) *EventUpsert {
	u.Add(event.FieldSnapInCarPeopleNum, v)
	return u
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (u *EventUpsert) ClearSnapInCarPeopleNum() *EventUpsert {
	u.SetNull(event.FieldSnapInCarPeopleNum)
	return u
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (u *EventUpsert) SetSnapLanNo(v int) *EventUpsert {
	u.Set(event.FieldSnapLanNo, v)
	return u
}

// UpdateSnapLanNo sets the "snap_lan_no" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapLanNo() *EventUpsert {
	u.SetExcluded(event.FieldSnapLanNo)
	return u
}

// AddSnapLanNo adds v to the "snap_lan_no" field.
func (u *EventUpsert) AddSnapLanNo(v int) *EventUpsert {
	u.Add(event.FieldSnapLanNo, v)
	return u
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (u *EventUpsert) ClearSnapLanNo() *EventUpsert {
	u.SetNull(event.FieldSnapLanNo)
	return u
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (u *EventUpsert) SetSnapOpenStrobe(v bool) *EventUpsert {
	u.Set(event.FieldSnapOpenStrobe, v)
	return u
}

// UpdateSnapOpenStrobe sets the "snap_open_strobe" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapOpenStrobe() *EventUpsert {
	u.SetExcluded(event.FieldSnapOpenStrobe)
	return u
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (u *EventUpsert) ClearSnapOpenStrobe() *EventUpsert {
	u.SetNull(event.FieldSnapOpenStrobe)
	return u
}

// SetSnapTime sets the "snap_time" field.
func (u *EventUpsert) SetSnapTime(v string) *EventUpsert {
	u.Set(event.FieldSnapTime, v)
	return u
}

// UpdateSnapTime sets the "snap_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapTime() *EventUpsert {
	u.SetExcluded(event.FieldSnapTime)
	return u
}

// ClearSnapTime clears the value of the "snap_time" field.
func (u *EventUpsert) ClearSnapTime() *EventUpsert {
	u.SetNull(event.FieldSnapTime)
	return u
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (u *EventUpsert) SetSnapTimeZone(v int) *EventUpsert {
	u.Set(event.FieldSnapTimeZone, v)
	return u
}

// UpdateSnapTimeZone sets the "snap_time_zone" field to the value that was provided on create.
func (u *EventUpsert) UpdateSnapTimeZone() *EventUpsert {
	u.SetExcluded(event.FieldSnapTimeZone)
	return u
}

// AddSnapTimeZone adds v to the "snap_time_zone" field.
func (u *EventUpsert) AddSnapTimeZone(v int) *EventUpsert {
	u.Add(event.FieldSnapTimeZone, v)
	return u
}

// ClearSnapTimeZone clears the value of the "snap_time_zone" field.
func (u *EventUpsert) ClearSnapTimeZone() *EventUpsert {
	u.SetNull(event.FieldSnapTimeZone)
	return u
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (u *EventUpsert) SetVehicleSpeed(v int) *EventUpsert {
	u.Set(event.FieldVehicleSpeed, v)
	return u
}

// UpdateVehicleSpeed sets the "vehicle_speed" field to the value that was provided on create.
func (u *EventUpsert) UpdateVehicleSpeed() *EventUpsert {
	u.SetExcluded(event.FieldVehicleSpeed)
	return u
}

// AddVehicleSpeed adds v to the "vehicle_speed" field.
func (u *EventUpsert) AddVehicleSpeed(v int) *EventUpsert {
	u.Add(event.FieldVehicleSpeed, v)
	return u
}

// ClearVehicleSpeed clears the value of the "vehicle_speed" field.
func (u *EventUpsert) ClearVehicleSpeed() *EventUpsert {
	u.SetNull(event.FieldVehicleSpeed)
	return u
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (u *EventUpsert) SetVehicleBoundingBox(v []int) *EventUpsert {
	u.Set(event.FieldVehicleBoundingBox, v)
	return u
}

// UpdateVehicleBoundingBox sets the "vehicle_bounding_box" field to the value that was provided on create.
func (u *EventUpsert) UpdateVehicleBoundingBox() *EventUpsert {
	u.SetExcluded(event.FieldVehicleBoundingBox)
	return u
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (u *EventUpsert) ClearVehicleBoundingBox() *EventUpsert {
	u.SetNull(event.FieldVehicleBoundingBox)
	return u
}

// SetVehicleColor sets the "vehicle_color" field.
func (u *EventUpsert) SetVehicleColor(v string) *EventUpsert {
	u.Set(event.FieldVehicleColor, v)
	return u
}

// UpdateVehicleColor sets the "vehicle_color" field to the value that was provided on create.
func (u *EventUpsert) UpdateVehicleColor() *EventUpsert {
	u.SetExcluded(event.FieldVehicleColor)
	return u
}

// ClearVehicleColor clears the value of the "vehicle_color" field.
func (u *EventUpsert) ClearVehicleColor() *EventUpsert {
	u.SetNull(event.FieldVehicleColor)
	return u
}

// SetVehicleSeries sets the "vehicle_series" field.
func (u *EventUpsert) SetVehicleSeries(v string) *EventUpsert {
	u.Set(event.FieldVehicleSeries, v)
	return u
}

// UpdateVehicleSeries sets the "vehicle_series" field to the value that was provided on create.
func (u *EventUpsert) UpdateVehicleSeries() *EventUpsert {
	u.SetExcluded(event.FieldVehicleSeries)
	return u
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (u *EventUpsert) ClearVehicleSeries() *EventUpsert {
	u.SetNull(event.FieldVehicleSeries)
	return u
}

// SetVehicleType sets the "vehicle_type" field.
func (u *EventUpsert) SetVehicleType(v string) *EventUpsert {
	u.Set(event.FieldVehicleType, v)
	return u
}

// UpdateVehicleType sets the "vehicle_type" field to the value that was provided on create.
func (u *EventUpsert) UpdateVehicleType() *EventUpsert {
	u.SetExcluded(event.FieldVehicleType)
	return u
}

// ClearVehicleType clears the value of the "vehicle_type" field.
func (u *EventUpsert) ClearVehicleType() *EventUpsert {
	u.SetNull(event.FieldVehicleType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(event.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(event.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(event.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertOne) SetUpdatedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUpdatedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (u *EventUpsertOne) SetPlateBoundingBox(v []int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateBoundingBox(v)
	})
}

// UpdatePlateBoundingBox sets the "plate_bounding_box" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateBoundingBox() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateBoundingBox()
	})
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (u *EventUpsertOne) ClearPlateBoundingBox() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateBoundingBox()
	})
}

// SetPlateChannel sets the "plate_channel" field.
func (u *EventUpsertOne) SetPlateChannel(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateChannel(v)
	})
}

// AddPlateChannel adds v to the "plate_channel" field.
func (u *EventUpsertOne) AddPlateChannel(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddPlateChannel(v)
	})
}

// UpdatePlateChannel sets the "plate_channel" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateChannel() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateChannel()
	})
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (u *EventUpsertOne) ClearPlateChannel() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateChannel()
	})
}

// SetPlateConfidence sets the "plate_confidence" field.
func (u *EventUpsertOne) SetPlateConfidence(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateConfidence(v)
	})
}

// AddPlateConfidence adds v to the "plate_confidence" field.
func (u *EventUpsertOne) AddPlateConfidence(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddPlateConfidence(v)
	})
}

// UpdatePlateConfidence sets the "plate_confidence" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateConfidence() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateConfidence()
	})
}

// ClearPlateConfidence clears the value of the "plate_confidence" field.
func (u *EventUpsertOne) ClearPlateConfidence() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateConfidence()
	})
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (u *EventUpsertOne) SetPlateIsExist(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateIsExist(v)
	})
}

// UpdatePlateIsExist sets the "plate_is_exist" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateIsExist() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateIsExist()
	})
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (u *EventUpsertOne) ClearPlateIsExist() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateIsExist()
	})
}

// SetPlateColor sets the "plate_color" field.
func (u *EventUpsertOne) SetPlateColor(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateColor(v)
	})
}

// UpdatePlateColor sets the "plate_color" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateColor() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateColor()
	})
}

// ClearPlateColor clears the value of the "plate_color" field.
func (u *EventUpsertOne) ClearPlateColor() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateColor()
	})
}

// SetPlateNumber sets the "plate_number" field.
func (u *EventUpsertOne) SetPlateNumber(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateNumber(v)
	})
}

// UpdatePlateNumber sets the "plate_number" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateNumber() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateNumber()
	})
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (u *EventUpsertOne) ClearPlateNumber() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateNumber()
	})
}

// SetPlateType sets the "plate_type" field.
func (u *EventUpsertOne) SetPlateType(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateType(v)
	})
}

// UpdatePlateType sets the "plate_type" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateType()
	})
}

// ClearPlateType clears the value of the "plate_type" field.
func (u *EventUpsertOne) ClearPlateType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateType()
	})
}

// SetPlateRegion sets the "plate_region" field.
func (u *EventUpsertOne) SetPlateRegion(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateRegion(v)
	})
}

// UpdatePlateRegion sets the "plate_region" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateRegion() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateRegion()
	})
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (u *EventUpsertOne) ClearPlateRegion() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateRegion()
	})
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (u *EventUpsertOne) SetPlateUploadNum(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateUploadNum(v)
	})
}

// AddPlateUploadNum adds v to the "plate_upload_num" field.
func (u *EventUpsertOne) AddPlateUploadNum(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddPlateUploadNum(v)
	})
}

// UpdatePlateUploadNum sets the "plate_upload_num" field to the value that was provided on create.
func (u *EventUpsertOne) UpdatePlateUploadNum() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateUploadNum()
	})
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (u *EventUpsertOne) ClearPlateUploadNum() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateUploadNum()
	})
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (u *EventUpsertOne) SetSnapAccurateTime(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapAccurateTime(v)
	})
}

// UpdateSnapAccurateTime sets the "snap_accurate_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapAccurateTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapAccurateTime()
	})
}

// ClearSnapAccurateTime clears the value of the "snap_accurate_time" field.
func (u *EventUpsertOne) ClearSnapAccurateTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapAccurateTime()
	})
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (u *EventUpsertOne) SetSnapAllowUser(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapAllowUser(v)
	})
}

// UpdateSnapAllowUser sets the "snap_allow_user" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapAllowUser() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapAllowUser()
	})
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (u *EventUpsertOne) ClearSnapAllowUser() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapAllowUser()
	})
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (u *EventUpsertOne) SetSnapAllowUserEndTime(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapAllowUserEndTime(v)
	})
}

// UpdateSnapAllowUserEndTime sets the "snap_allow_user_end_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapAllowUserEndTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapAllowUserEndTime()
	})
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (u *EventUpsertOne) ClearSnapAllowUserEndTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapAllowUserEndTime()
	})
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (u *EventUpsertOne) SetSnapDstTune(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDstTune(v)
	})
}

// AddSnapDstTune adds v to the "snap_dst_tune" field.
func (u *EventUpsertOne) AddSnapDstTune(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapDstTune(v)
	})
}

// UpdateSnapDstTune sets the "snap_dst_tune" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapDstTune() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDstTune()
	})
}

// ClearSnapDstTune clears the value of the "snap_dst_tune" field.
func (u *EventUpsertOne) ClearSnapDstTune() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDstTune()
	})
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (u *EventUpsertOne) SetSnapDefenceCode(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDefenceCode(v)
	})
}

// UpdateSnapDefenceCode sets the "snap_defence_code" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapDefenceCode() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDefenceCode()
	})
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (u *EventUpsertOne) ClearSnapDefenceCode() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDefenceCode()
	})
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (u *EventUpsertOne) SetSnapDeviceID(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDeviceID(v)
	})
}

// UpdateSnapDeviceID sets the "snap_device_id" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapDeviceID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDeviceID()
	})
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (u *EventUpsertOne) ClearSnapDeviceID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDeviceID()
	})
}

// SetSnapDirection sets the "snap_direction" field.
func (u *EventUpsertOne) SetSnapDirection(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDirection(v)
	})
}

// UpdateSnapDirection sets the "snap_direction" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapDirection() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDirection()
	})
}

// ClearSnapDirection clears the value of the "snap_direction" field.
func (u *EventUpsertOne) ClearSnapDirection() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDirection()
	})
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (u *EventUpsertOne) SetSnapInCarPeopleNum(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapInCarPeopleNum(v)
	})
}

// AddSnapInCarPeopleNum adds v to the "snap_in_car_people_num" field.
func (u *EventUpsertOne) AddSnapInCarPeopleNum(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapInCarPeopleNum(v)
	})
}

// UpdateSnapInCarPeopleNum sets the "snap_in_car_people_num" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapInCarPeopleNum() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapInCarPeopleNum()
	})
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (u *EventUpsertOne) ClearSnapInCarPeopleNum() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapInCarPeopleNum()
	})
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (u *EventUpsertOne) SetSnapLanNo(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapLanNo(v)
	})
}

// AddSnapLanNo adds v to the "snap_lan_no" field.
func (u *EventUpsertOne) AddSnapLanNo(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapLanNo(v)
	})
}

// UpdateSnapLanNo sets the "snap_lan_no" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapLanNo() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapLanNo()
	})
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (u *EventUpsertOne) ClearSnapLanNo() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapLanNo()
	})
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (u *EventUpsertOne) SetSnapOpenStrobe(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapOpenStrobe(v)
	})
}

// UpdateSnapOpenStrobe sets the "snap_open_strobe" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapOpenStrobe() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapOpenStrobe()
	})
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (u *EventUpsertOne) ClearSnapOpenStrobe() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapOpenStrobe()
	})
}

// SetSnapTime sets the "snap_time" field.
func (u *EventUpsertOne) SetSnapTime(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapTime(v)
	})
}

// UpdateSnapTime sets the "snap_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapTime()
	})
}

// ClearSnapTime clears the value of the "snap_time" field.
func (u *EventUpsertOne) ClearSnapTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapTime()
	})
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (u *EventUpsertOne) SetSnapTimeZone(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapTimeZone(v)
	})
}

// AddSnapTimeZone adds v to the "snap_time_zone" field.
func (u *EventUpsertOne) AddSnapTimeZone(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapTimeZone(v)
	})
}

// UpdateSnapTimeZone sets the "snap_time_zone" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSnapTimeZone() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapTimeZone()
	})
}

// ClearSnapTimeZone clears the value of the "snap_time_zone" field.
func (u *EventUpsertOne) ClearSnapTimeZone() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapTimeZone()
	})
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (u *EventUpsertOne) SetVehicleSpeed(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleSpeed(v)
	})
}

// AddVehicleSpeed adds v to the "vehicle_speed" field.
func (u *EventUpsertOne) AddVehicleSpeed(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddVehicleSpeed(v)
	})
}

// UpdateVehicleSpeed sets the "vehicle_speed" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVehicleSpeed() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleSpeed()
	})
}

// ClearVehicleSpeed clears the value of the "vehicle_speed" field.
func (u *EventUpsertOne) ClearVehicleSpeed() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleSpeed()
	})
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (u *EventUpsertOne) SetVehicleBoundingBox(v []int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleBoundingBox(v)
	})
}

// UpdateVehicleBoundingBox sets the "vehicle_bounding_box" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVehicleBoundingBox() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleBoundingBox()
	})
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (u *EventUpsertOne) ClearVehicleBoundingBox() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleBoundingBox()
	})
}

// SetVehicleColor sets the "vehicle_color" field.
func (u *EventUpsertOne) SetVehicleColor(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleColor(v)
	})
}

// UpdateVehicleColor sets the "vehicle_color" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVehicleColor() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleColor()
	})
}

// ClearVehicleColor clears the value of the "vehicle_color" field.
func (u *EventUpsertOne) ClearVehicleColor() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleColor()
	})
}

// SetVehicleSeries sets the "vehicle_series" field.
func (u *EventUpsertOne) SetVehicleSeries(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleSeries(v)
	})
}

// UpdateVehicleSeries sets the "vehicle_series" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVehicleSeries() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleSeries()
	})
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (u *EventUpsertOne) ClearVehicleSeries() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleSeries()
	})
}

// SetVehicleType sets the "vehicle_type" field.
func (u *EventUpsertOne) SetVehicleType(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleType(v)
	})
}

// UpdateVehicleType sets the "vehicle_type" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVehicleType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleType()
	})
}

// ClearVehicleType clears the value of the "vehicle_type" field.
func (u *EventUpsertOne) ClearVehicleType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleType()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EventUpsertOne.ID is not supported by MySQL driver. Use EventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(event.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(event.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(event.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertBulk) SetUpdatedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUpdatedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (u *EventUpsertBulk) SetPlateBoundingBox(v []int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateBoundingBox(v)
	})
}

// UpdatePlateBoundingBox sets the "plate_bounding_box" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateBoundingBox() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateBoundingBox()
	})
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (u *EventUpsertBulk) ClearPlateBoundingBox() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateBoundingBox()
	})
}

// SetPlateChannel sets the "plate_channel" field.
func (u *EventUpsertBulk) SetPlateChannel(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateChannel(v)
	})
}

// AddPlateChannel adds v to the "plate_channel" field.
func (u *EventUpsertBulk) AddPlateChannel(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddPlateChannel(v)
	})
}

// UpdatePlateChannel sets the "plate_channel" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateChannel() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateChannel()
	})
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (u *EventUpsertBulk) ClearPlateChannel() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateChannel()
	})
}

// SetPlateConfidence sets the "plate_confidence" field.
func (u *EventUpsertBulk) SetPlateConfidence(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateConfidence(v)
	})
}

// AddPlateConfidence adds v to the "plate_confidence" field.
func (u *EventUpsertBulk) AddPlateConfidence(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddPlateConfidence(v)
	})
}

// UpdatePlateConfidence sets the "plate_confidence" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateConfidence() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateConfidence()
	})
}

// ClearPlateConfidence clears the value of the "plate_confidence" field.
func (u *EventUpsertBulk) ClearPlateConfidence() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateConfidence()
	})
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (u *EventUpsertBulk) SetPlateIsExist(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateIsExist(v)
	})
}

// UpdatePlateIsExist sets the "plate_is_exist" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateIsExist() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateIsExist()
	})
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (u *EventUpsertBulk) ClearPlateIsExist() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateIsExist()
	})
}

// SetPlateColor sets the "plate_color" field.
func (u *EventUpsertBulk) SetPlateColor(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateColor(v)
	})
}

// UpdatePlateColor sets the "plate_color" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateColor() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateColor()
	})
}

// ClearPlateColor clears the value of the "plate_color" field.
func (u *EventUpsertBulk) ClearPlateColor() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateColor()
	})
}

// SetPlateNumber sets the "plate_number" field.
func (u *EventUpsertBulk) SetPlateNumber(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateNumber(v)
	})
}

// UpdatePlateNumber sets the "plate_number" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateNumber() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateNumber()
	})
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (u *EventUpsertBulk) ClearPlateNumber() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateNumber()
	})
}

// SetPlateType sets the "plate_type" field.
func (u *EventUpsertBulk) SetPlateType(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateType(v)
	})
}

// UpdatePlateType sets the "plate_type" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateType()
	})
}

// ClearPlateType clears the value of the "plate_type" field.
func (u *EventUpsertBulk) ClearPlateType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateType()
	})
}

// SetPlateRegion sets the "plate_region" field.
func (u *EventUpsertBulk) SetPlateRegion(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateRegion(v)
	})
}

// UpdatePlateRegion sets the "plate_region" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateRegion() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateRegion()
	})
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (u *EventUpsertBulk) ClearPlateRegion() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateRegion()
	})
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (u *EventUpsertBulk) SetPlateUploadNum(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetPlateUploadNum(v)
	})
}

// AddPlateUploadNum adds v to the "plate_upload_num" field.
func (u *EventUpsertBulk) AddPlateUploadNum(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddPlateUploadNum(v)
	})
}

// UpdatePlateUploadNum sets the "plate_upload_num" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdatePlateUploadNum() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdatePlateUploadNum()
	})
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (u *EventUpsertBulk) ClearPlateUploadNum() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearPlateUploadNum()
	})
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (u *EventUpsertBulk) SetSnapAccurateTime(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapAccurateTime(v)
	})
}

// UpdateSnapAccurateTime sets the "snap_accurate_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapAccurateTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapAccurateTime()
	})
}

// ClearSnapAccurateTime clears the value of the "snap_accurate_time" field.
func (u *EventUpsertBulk) ClearSnapAccurateTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapAccurateTime()
	})
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (u *EventUpsertBulk) SetSnapAllowUser(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapAllowUser(v)
	})
}

// UpdateSnapAllowUser sets the "snap_allow_user" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapAllowUser() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapAllowUser()
	})
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (u *EventUpsertBulk) ClearSnapAllowUser() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapAllowUser()
	})
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (u *EventUpsertBulk) SetSnapAllowUserEndTime(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapAllowUserEndTime(v)
	})
}

// UpdateSnapAllowUserEndTime sets the "snap_allow_user_end_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapAllowUserEndTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapAllowUserEndTime()
	})
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (u *EventUpsertBulk) ClearSnapAllowUserEndTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapAllowUserEndTime()
	})
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (u *EventUpsertBulk) SetSnapDstTune(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDstTune(v)
	})
}

// AddSnapDstTune adds v to the "snap_dst_tune" field.
func (u *EventUpsertBulk) AddSnapDstTune(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapDstTune(v)
	})
}

// UpdateSnapDstTune sets the "snap_dst_tune" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapDstTune() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDstTune()
	})
}

// ClearSnapDstTune clears the value of the "snap_dst_tune" field.
func (u *EventUpsertBulk) ClearSnapDstTune() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDstTune()
	})
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (u *EventUpsertBulk) SetSnapDefenceCode(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDefenceCode(v)
	})
}

// UpdateSnapDefenceCode sets the "snap_defence_code" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapDefenceCode() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDefenceCode()
	})
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (u *EventUpsertBulk) ClearSnapDefenceCode() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDefenceCode()
	})
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (u *EventUpsertBulk) SetSnapDeviceID(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDeviceID(v)
	})
}

// UpdateSnapDeviceID sets the "snap_device_id" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapDeviceID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDeviceID()
	})
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (u *EventUpsertBulk) ClearSnapDeviceID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDeviceID()
	})
}

// SetSnapDirection sets the "snap_direction" field.
func (u *EventUpsertBulk) SetSnapDirection(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapDirection(v)
	})
}

// UpdateSnapDirection sets the "snap_direction" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapDirection() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapDirection()
	})
}

// ClearSnapDirection clears the value of the "snap_direction" field.
func (u *EventUpsertBulk) ClearSnapDirection() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapDirection()
	})
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (u *EventUpsertBulk) SetSnapInCarPeopleNum(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapInCarPeopleNum(v)
	})
}

// AddSnapInCarPeopleNum adds v to the "snap_in_car_people_num" field.
func (u *EventUpsertBulk) AddSnapInCarPeopleNum(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapInCarPeopleNum(v)
	})
}

// UpdateSnapInCarPeopleNum sets the "snap_in_car_people_num" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapInCarPeopleNum() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapInCarPeopleNum()
	})
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (u *EventUpsertBulk) ClearSnapInCarPeopleNum() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapInCarPeopleNum()
	})
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (u *EventUpsertBulk) SetSnapLanNo(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapLanNo(v)
	})
}

// AddSnapLanNo adds v to the "snap_lan_no" field.
func (u *EventUpsertBulk) AddSnapLanNo(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapLanNo(v)
	})
}

// UpdateSnapLanNo sets the "snap_lan_no" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapLanNo() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapLanNo()
	})
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (u *EventUpsertBulk) ClearSnapLanNo() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapLanNo()
	})
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (u *EventUpsertBulk) SetSnapOpenStrobe(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapOpenStrobe(v)
	})
}

// UpdateSnapOpenStrobe sets the "snap_open_strobe" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapOpenStrobe() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapOpenStrobe()
	})
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (u *EventUpsertBulk) ClearSnapOpenStrobe() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapOpenStrobe()
	})
}

// SetSnapTime sets the "snap_time" field.
func (u *EventUpsertBulk) SetSnapTime(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapTime(v)
	})
}

// UpdateSnapTime sets the "snap_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapTime()
	})
}

// ClearSnapTime clears the value of the "snap_time" field.
func (u *EventUpsertBulk) ClearSnapTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapTime()
	})
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (u *EventUpsertBulk) SetSnapTimeZone(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSnapTimeZone(v)
	})
}

// AddSnapTimeZone adds v to the "snap_time_zone" field.
func (u *EventUpsertBulk) AddSnapTimeZone(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddSnapTimeZone(v)
	})
}

// UpdateSnapTimeZone sets the "snap_time_zone" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSnapTimeZone() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSnapTimeZone()
	})
}

// ClearSnapTimeZone clears the value of the "snap_time_zone" field.
func (u *EventUpsertBulk) ClearSnapTimeZone() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearSnapTimeZone()
	})
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (u *EventUpsertBulk) SetVehicleSpeed(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleSpeed(v)
	})
}

// AddVehicleSpeed adds v to the "vehicle_speed" field.
func (u *EventUpsertBulk) AddVehicleSpeed(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddVehicleSpeed(v)
	})
}

// UpdateVehicleSpeed sets the "vehicle_speed" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVehicleSpeed() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleSpeed()
	})
}

// ClearVehicleSpeed clears the value of the "vehicle_speed" field.
func (u *EventUpsertBulk) ClearVehicleSpeed() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleSpeed()
	})
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (u *EventUpsertBulk) SetVehicleBoundingBox(v []int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleBoundingBox(v)
	})
}

// UpdateVehicleBoundingBox sets the "vehicle_bounding_box" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVehicleBoundingBox() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleBoundingBox()
	})
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (u *EventUpsertBulk) ClearVehicleBoundingBox() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleBoundingBox()
	})
}

// SetVehicleColor sets the "vehicle_color" field.
func (u *EventUpsertBulk) SetVehicleColor(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleColor(v)
	})
}

// UpdateVehicleColor sets the "vehicle_color" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVehicleColor() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleColor()
	})
}

// ClearVehicleColor clears the value of the "vehicle_color" field.
func (u *EventUpsertBulk) ClearVehicleColor() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleColor()
	})
}

// SetVehicleSeries sets the "vehicle_series" field.
func (u *EventUpsertBulk) SetVehicleSeries(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleSeries(v)
	})
}

// UpdateVehicleSeries sets the "vehicle_series" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVehicleSeries() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleSeries()
	})
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (u *EventUpsertBulk) ClearVehicleSeries() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleSeries()
	})
}

// SetVehicleType sets the "vehicle_type" field.
func (u *EventUpsertBulk) SetVehicleType(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVehicleType(v)
	})
}

// UpdateVehicleType sets the "vehicle_type" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVehicleType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVehicleType()
	})
}

// ClearVehicleType clears the value of the "vehicle_type" field.
func (u *EventUpsertBulk) ClearVehicleType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearVehicleType()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
