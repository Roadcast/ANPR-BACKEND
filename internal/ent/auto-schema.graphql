directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Camera implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  model: String!
  imei: String!
  location: String!
  active: Boolean!
  policeStationID: ID
  policeStation: PoliceStation
}
"""
A connection to a list of items.
"""
type CameraConnection {
  """
  A list of edges.
  """
  edges: [CameraEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CameraEdge {
  """
  The item at the end of the edge.
  """
  node: Camera
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Camera connections
"""
input CameraOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Cameras.
  """
  field: CameraOrderField!
}
"""
Properties by which Camera connections can be ordered.
"""
enum CameraOrderField {
  CreatedAt
  UpdatedAt
  NAME
}
"""
CameraWhereInput is used for filtering Camera objects.
Input was generated by ent.
"""
input CameraWhereInput {
  not: CameraWhereInput
  and: [CameraWhereInput!]
  or: [CameraWhereInput!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  model field predicates
  """
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """
  imei field predicates
  """
  imei: String
  imeiNEQ: String
  imeiIn: [String!]
  imeiNotIn: [String!]
  imeiGT: String
  imeiGTE: String
  imeiLT: String
  imeiLTE: String
  imeiContains: String
  imeiHasPrefix: String
  imeiHasSuffix: String
  imeiEqualFold: String
  imeiContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  police_station edge predicates
  """
  hasPoliceStation: Boolean
  hasPoliceStationWith: [PoliceStationWhereInput!]
}
type Car implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  make: String
  model: String
  year: Int
  registration: String!
  color: String
  policeStationID: ID
  stolenDate: Time
  firNumber: String
  policeStation: PoliceStation
}
"""
A connection to a list of items.
"""
type CarConnection {
  """
  A list of edges.
  """
  edges: [CarEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarEdge {
  """
  The item at the end of the edge.
  """
  node: Car
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Car connections
"""
input CarOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Cars.
  """
  field: CarOrderField!
}
"""
Properties by which Car connections can be ordered.
"""
enum CarOrderField {
  CreatedAt
  UpdatedAt
}
"""
CarWhereInput is used for filtering Car objects.
Input was generated by ent.
"""
input CarWhereInput {
  not: CarWhereInput
  and: [CarWhereInput!]
  or: [CarWhereInput!]
  """
  make field predicates
  """
  make: String
  makeNEQ: String
  makeIn: [String!]
  makeNotIn: [String!]
  makeGT: String
  makeGTE: String
  makeLT: String
  makeLTE: String
  makeContains: String
  makeHasPrefix: String
  makeHasSuffix: String
  makeIsNil: Boolean
  makeNotNil: Boolean
  makeEqualFold: String
  makeContainsFold: String
  """
  model field predicates
  """
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelIsNil: Boolean
  modelNotNil: Boolean
  modelEqualFold: String
  modelContainsFold: String
  """
  year field predicates
  """
  year: Int
  yearNEQ: Int
  yearIn: [Int!]
  yearNotIn: [Int!]
  yearGT: Int
  yearGTE: Int
  yearLT: Int
  yearLTE: Int
  yearIsNil: Boolean
  yearNotNil: Boolean
  """
  registration field predicates
  """
  registration: String
  registrationNEQ: String
  registrationIn: [String!]
  registrationNotIn: [String!]
  registrationGT: String
  registrationGTE: String
  registrationLT: String
  registrationLTE: String
  registrationContains: String
  registrationHasPrefix: String
  registrationHasSuffix: String
  registrationEqualFold: String
  registrationContainsFold: String
  """
  color field predicates
  """
  color: String
  colorNEQ: String
  colorIn: [String!]
  colorNotIn: [String!]
  colorGT: String
  colorGTE: String
  colorLT: String
  colorLTE: String
  colorContains: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorIsNil: Boolean
  colorNotNil: Boolean
  colorEqualFold: String
  colorContainsFold: String
  """
  stolen_date field predicates
  """
  stolenDate: Time
  stolenDateNEQ: Time
  stolenDateIn: [Time!]
  stolenDateNotIn: [Time!]
  stolenDateGT: Time
  stolenDateGTE: Time
  stolenDateLT: Time
  stolenDateLTE: Time
  stolenDateIsNil: Boolean
  stolenDateNotNil: Boolean
  """
  fir_number field predicates
  """
  firNumber: String
  firNumberNEQ: String
  firNumberIn: [String!]
  firNumberNotIn: [String!]
  firNumberGT: String
  firNumberGTE: String
  firNumberLT: String
  firNumberLTE: String
  firNumberContains: String
  firNumberHasPrefix: String
  firNumberHasSuffix: String
  firNumberIsNil: Boolean
  firNumberNotNil: Boolean
  firNumberEqualFold: String
  firNumberContainsFold: String
  """
  police_station edge predicates
  """
  hasPoliceStation: Boolean
  hasPoliceStationWith: [PoliceStationWhereInput!]
}
"""
CreateCameraInput is used for create Camera object.
Input was generated by ent.
"""
input CreateCameraInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  model: String!
  imei: String!
  location: String!
  active: Boolean
  policeStationID: ID
}
"""
CreateCarInput is used for create Car object.
Input was generated by ent.
"""
input CreateCarInput {
  createdAt: Time
  updatedAt: Time
  make: String
  model: String
  year: Int
  registration: String!
  color: String
  stolenDate: Time
  firNumber: String
  policeStationID: ID
}
"""
CreateEventInput is used for create Event object.
Input was generated by ent.
"""
input CreateEventInput {
  createdAt: Time
  updatedAt: Time
  """
  Bounding box coordinates of the plate
  """
  plateBoundingBox: [Int!]
  """
  Channel of the plate
  """
  plateChannel: Int
  """
  Indicates whether the plate exists
  """
  plateIsExist: Boolean
  """
  Color of the plate
  """
  plateColor: String
  """
  Number on the plate
  """
  plateNumber: String
  """
  Type of the plate
  """
  plateType: String
  """
  Region of the plate
  """
  plateRegion: String
  """
  Upload number of the plate
  """
  plateUploadNum: Int
  """
  Indicates if user interaction is allowed
  """
  snapAllowUser: Boolean
  """
  End time for user interaction allowance
  """
  snapAllowUserEndTime: String
  """
  Defence code
  """
  snapDefenceCode: String
  """
  Device ID
  """
  snapDeviceID: String
  """
  Number of people in the car
  """
  snapInCarPeopleNum: Int
  """
  LAN number
  """
  snapLanNo: Int
  """
  Indicates if strobe is open
  """
  snapOpenStrobe: Boolean
  """
  Bounding box coordinates of the vehicle
  """
  vehicleBoundingBox: [Int!]
  """
  Vehicle series
  """
  vehicleSeries: String
}
"""
CreatePermissionInput is used for create Permission object.
Input was generated by ent.
"""
input CreatePermissionInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  canRead: Boolean
  canCreate: Boolean
  canUpdate: Boolean
  canDelete: Boolean
}
"""
CreatePoliceStationInput is used for create PoliceStation object.
Input was generated by ent.
"""
input CreatePoliceStationInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  location: String
  code: String!
  identifier: String!
  userIDs: [ID!]
  cameraIDs: [ID!]
  carIDs: [ID!]
  parentID: ID
  childStationIDs: [ID!]
}
"""
CreateRoleInput is used for create Role object.
Input was generated by ent.
"""
input CreateRoleInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  permissionIDs: [ID!]
  userIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  email: String!
  password: String!
  phone: String
  active: Boolean
  roleID: ID!
  policeStationID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Event implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """
  Bounding box coordinates of the plate
  """
  plateBoundingBox: [Int!]
  """
  Channel of the plate
  """
  plateChannel: Int
  """
  Indicates whether the plate exists
  """
  plateIsExist: Boolean
  """
  Color of the plate
  """
  plateColor: String
  """
  Number on the plate
  """
  plateNumber: String
  """
  Type of the plate
  """
  plateType: String
  """
  Region of the plate
  """
  plateRegion: String
  """
  Upload number of the plate
  """
  plateUploadNum: Int
  """
  Indicates if user interaction is allowed
  """
  snapAllowUser: Boolean
  """
  End time for user interaction allowance
  """
  snapAllowUserEndTime: String
  """
  Defence code
  """
  snapDefenceCode: String
  """
  Device ID
  """
  snapDeviceID: String
  """
  Number of people in the car
  """
  snapInCarPeopleNum: Int
  """
  LAN number
  """
  snapLanNo: Int
  """
  Indicates if strobe is open
  """
  snapOpenStrobe: Boolean
  """
  Bounding box coordinates of the vehicle
  """
  vehicleBoundingBox: [Int!]
  """
  Vehicle series
  """
  vehicleSeries: String
}
"""
A connection to a list of items.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EventEdge {
  """
  The item at the end of the edge.
  """
  node: Event
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Event connections
"""
input EventOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Events.
  """
  field: EventOrderField!
}
"""
Properties by which Event connections can be ordered.
"""
enum EventOrderField {
  CreatedAt
  UpdatedAt
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  """
  plate_channel field predicates
  """
  plateChannel: Int
  plateChannelNEQ: Int
  plateChannelIn: [Int!]
  plateChannelNotIn: [Int!]
  plateChannelGT: Int
  plateChannelGTE: Int
  plateChannelLT: Int
  plateChannelLTE: Int
  plateChannelIsNil: Boolean
  plateChannelNotNil: Boolean
  """
  plate_is_exist field predicates
  """
  plateIsExist: Boolean
  plateIsExistNEQ: Boolean
  plateIsExistIsNil: Boolean
  plateIsExistNotNil: Boolean
  """
  plate_color field predicates
  """
  plateColor: String
  plateColorNEQ: String
  plateColorIn: [String!]
  plateColorNotIn: [String!]
  plateColorGT: String
  plateColorGTE: String
  plateColorLT: String
  plateColorLTE: String
  plateColorContains: String
  plateColorHasPrefix: String
  plateColorHasSuffix: String
  plateColorIsNil: Boolean
  plateColorNotNil: Boolean
  plateColorEqualFold: String
  plateColorContainsFold: String
  """
  plate_number field predicates
  """
  plateNumber: String
  plateNumberNEQ: String
  plateNumberIn: [String!]
  plateNumberNotIn: [String!]
  plateNumberGT: String
  plateNumberGTE: String
  plateNumberLT: String
  plateNumberLTE: String
  plateNumberContains: String
  plateNumberHasPrefix: String
  plateNumberHasSuffix: String
  plateNumberIsNil: Boolean
  plateNumberNotNil: Boolean
  plateNumberEqualFold: String
  plateNumberContainsFold: String
  """
  plate_type field predicates
  """
  plateType: String
  plateTypeNEQ: String
  plateTypeIn: [String!]
  plateTypeNotIn: [String!]
  plateTypeGT: String
  plateTypeGTE: String
  plateTypeLT: String
  plateTypeLTE: String
  plateTypeContains: String
  plateTypeHasPrefix: String
  plateTypeHasSuffix: String
  plateTypeIsNil: Boolean
  plateTypeNotNil: Boolean
  plateTypeEqualFold: String
  plateTypeContainsFold: String
  """
  plate_region field predicates
  """
  plateRegion: String
  plateRegionNEQ: String
  plateRegionIn: [String!]
  plateRegionNotIn: [String!]
  plateRegionGT: String
  plateRegionGTE: String
  plateRegionLT: String
  plateRegionLTE: String
  plateRegionContains: String
  plateRegionHasPrefix: String
  plateRegionHasSuffix: String
  plateRegionIsNil: Boolean
  plateRegionNotNil: Boolean
  plateRegionEqualFold: String
  plateRegionContainsFold: String
  """
  plate_upload_num field predicates
  """
  plateUploadNum: Int
  plateUploadNumNEQ: Int
  plateUploadNumIn: [Int!]
  plateUploadNumNotIn: [Int!]
  plateUploadNumGT: Int
  plateUploadNumGTE: Int
  plateUploadNumLT: Int
  plateUploadNumLTE: Int
  plateUploadNumIsNil: Boolean
  plateUploadNumNotNil: Boolean
  """
  snap_allow_user field predicates
  """
  snapAllowUser: Boolean
  snapAllowUserNEQ: Boolean
  snapAllowUserIsNil: Boolean
  snapAllowUserNotNil: Boolean
  """
  snap_allow_user_end_time field predicates
  """
  snapAllowUserEndTime: String
  snapAllowUserEndTimeNEQ: String
  snapAllowUserEndTimeIn: [String!]
  snapAllowUserEndTimeNotIn: [String!]
  snapAllowUserEndTimeGT: String
  snapAllowUserEndTimeGTE: String
  snapAllowUserEndTimeLT: String
  snapAllowUserEndTimeLTE: String
  snapAllowUserEndTimeContains: String
  snapAllowUserEndTimeHasPrefix: String
  snapAllowUserEndTimeHasSuffix: String
  snapAllowUserEndTimeIsNil: Boolean
  snapAllowUserEndTimeNotNil: Boolean
  snapAllowUserEndTimeEqualFold: String
  snapAllowUserEndTimeContainsFold: String
  """
  snap_defence_code field predicates
  """
  snapDefenceCode: String
  snapDefenceCodeNEQ: String
  snapDefenceCodeIn: [String!]
  snapDefenceCodeNotIn: [String!]
  snapDefenceCodeGT: String
  snapDefenceCodeGTE: String
  snapDefenceCodeLT: String
  snapDefenceCodeLTE: String
  snapDefenceCodeContains: String
  snapDefenceCodeHasPrefix: String
  snapDefenceCodeHasSuffix: String
  snapDefenceCodeIsNil: Boolean
  snapDefenceCodeNotNil: Boolean
  snapDefenceCodeEqualFold: String
  snapDefenceCodeContainsFold: String
  """
  snap_device_id field predicates
  """
  snapDeviceID: String
  snapDeviceIDNEQ: String
  snapDeviceIDIn: [String!]
  snapDeviceIDNotIn: [String!]
  snapDeviceIDGT: String
  snapDeviceIDGTE: String
  snapDeviceIDLT: String
  snapDeviceIDLTE: String
  snapDeviceIDContains: String
  snapDeviceIDHasPrefix: String
  snapDeviceIDHasSuffix: String
  snapDeviceIDIsNil: Boolean
  snapDeviceIDNotNil: Boolean
  snapDeviceIDEqualFold: String
  snapDeviceIDContainsFold: String
  """
  snap_in_car_people_num field predicates
  """
  snapInCarPeopleNum: Int
  snapInCarPeopleNumNEQ: Int
  snapInCarPeopleNumIn: [Int!]
  snapInCarPeopleNumNotIn: [Int!]
  snapInCarPeopleNumGT: Int
  snapInCarPeopleNumGTE: Int
  snapInCarPeopleNumLT: Int
  snapInCarPeopleNumLTE: Int
  snapInCarPeopleNumIsNil: Boolean
  snapInCarPeopleNumNotNil: Boolean
  """
  snap_lan_no field predicates
  """
  snapLanNo: Int
  snapLanNoNEQ: Int
  snapLanNoIn: [Int!]
  snapLanNoNotIn: [Int!]
  snapLanNoGT: Int
  snapLanNoGTE: Int
  snapLanNoLT: Int
  snapLanNoLTE: Int
  snapLanNoIsNil: Boolean
  snapLanNoNotNil: Boolean
  """
  snap_open_strobe field predicates
  """
  snapOpenStrobe: Boolean
  snapOpenStrobeNEQ: Boolean
  snapOpenStrobeIsNil: Boolean
  snapOpenStrobeNotNil: Boolean
  """
  vehicle_series field predicates
  """
  vehicleSeries: String
  vehicleSeriesNEQ: String
  vehicleSeriesIn: [String!]
  vehicleSeriesNotIn: [String!]
  vehicleSeriesGT: String
  vehicleSeriesGTE: String
  vehicleSeriesLT: String
  vehicleSeriesLTE: String
  vehicleSeriesContains: String
  vehicleSeriesHasPrefix: String
  vehicleSeriesHasSuffix: String
  vehicleSeriesIsNil: Boolean
  vehicleSeriesNotNil: Boolean
  vehicleSeriesEqualFold: String
  vehicleSeriesContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "go-ent-project/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  canRead: Boolean!
  canCreate: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}
"""
A connection to a list of items.
"""
type PermissionConnection {
  """
  A list of edges.
  """
  edges: [PermissionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PermissionEdge {
  """
  The item at the end of the edge.
  """
  node: Permission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  CreatedAt
  UpdatedAt
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type PoliceStation implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  location: String
  code: String!
  identifier: String!
  parentStationID: ID
  users: [User!]
  camera: [Camera!]
  car: [Car!]
  parent: PoliceStation
  childStations: [PoliceStation!]
}
"""
A connection to a list of items.
"""
type PoliceStationConnection {
  """
  A list of edges.
  """
  edges: [PoliceStationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PoliceStationEdge {
  """
  The item at the end of the edge.
  """
  node: PoliceStation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PoliceStation connections
"""
input PoliceStationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PoliceStations.
  """
  field: PoliceStationOrderField!
}
"""
Properties by which PoliceStation connections can be ordered.
"""
enum PoliceStationOrderField {
  CreatedAt
  UpdatedAt
  NAME
}
"""
PoliceStationWhereInput is used for filtering PoliceStation objects.
Input was generated by ent.
"""
input PoliceStationWhereInput {
  not: PoliceStationWhereInput
  and: [PoliceStationWhereInput!]
  or: [PoliceStationWhereInput!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  identifier field predicates
  """
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """
  parent_station_id field predicates
  """
  parentStationID: ID
  parentStationIDNEQ: ID
  parentStationIDIn: [ID!]
  parentStationIDNotIn: [ID!]
  parentStationIDIsNil: Boolean
  parentStationIDNotNil: Boolean
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  camera edge predicates
  """
  hasCamera: Boolean
  hasCameraWith: [CameraWhereInput!]
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [PoliceStationWhereInput!]
  """
  child_stations edge predicates
  """
  hasChildStations: Boolean
  hasChildStationsWith: [PoliceStationWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  cameras(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Cameras returned from the connection.
    """
    orderBy: [CameraOrder!]

    """
    Filtering options for Cameras returned from the connection.
    """
    where: CameraWhereInput
  ): CameraConnection!
  cars(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Cars returned from the connection.
    """
    orderBy: [CarOrder!]

    """
    Filtering options for Cars returned from the connection.
    """
    where: CarWhereInput
  ): CarConnection!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: [EventOrder!]

    """
    Filtering options for Events returned from the connection.
    """
    where: EventWhereInput
  ): EventConnection!
  permissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Permissions returned from the connection.
    """
    orderBy: [PermissionOrder!]

    """
    Filtering options for Permissions returned from the connection.
    """
    where: PermissionWhereInput
  ): PermissionConnection!
  policeStations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PoliceStations returned from the connection.
    """
    orderBy: [PoliceStationOrder!]

    """
    Filtering options for PoliceStations returned from the connection.
    """
    where: PoliceStationWhereInput
  ): PoliceStationConnection!
  roles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Roles returned from the connection.
    """
    orderBy: [RoleOrder!]

    """
    Filtering options for Roles returned from the connection.
    """
    where: RoleWhereInput
  ): RoleConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
type Role implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  permissions: [Permission!]
  users: [User!]
}
"""
A connection to a list of items.
"""
type RoleConnection {
  """
  A list of edges.
  """
  edges: [RoleEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoleEdge {
  """
  The item at the end of the edge.
  """
  node: Role
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Role connections
"""
input RoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Roles.
  """
  field: RoleOrderField!
}
"""
Properties by which Role connections can be ordered.
"""
enum RoleOrderField {
  CreatedAt
  UpdatedAt
}
"""
RoleWhereInput is used for filtering Role objects.
Input was generated by ent.
"""
input RoleWhereInput {
  not: RoleWhereInput
  and: [RoleWhereInput!]
  or: [RoleWhereInput!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateCameraInput is used for update Camera object.
Input was generated by ent.
"""
input UpdateCameraInput {
  updatedAt: Time
  name: String
  model: String
  imei: String
  location: String
  active: Boolean
  policeStationID: ID
  clearPoliceStation: Boolean
}
"""
UpdateCarInput is used for update Car object.
Input was generated by ent.
"""
input UpdateCarInput {
  updatedAt: Time
  make: String
  clearMake: Boolean
  model: String
  clearModel: Boolean
  year: Int
  clearYear: Boolean
  registration: String
  color: String
  clearColor: Boolean
  stolenDate: Time
  clearStolenDate: Boolean
  firNumber: String
  clearFirNumber: Boolean
  policeStationID: ID
  clearPoliceStation: Boolean
}
"""
UpdateEventInput is used for update Event object.
Input was generated by ent.
"""
input UpdateEventInput {
  updatedAt: Time
  """
  Bounding box coordinates of the plate
  """
  plateBoundingBox: [Int!]
  appendPlateBoundingBox: [Int!]
  clearPlateBoundingBox: Boolean
  """
  Channel of the plate
  """
  plateChannel: Int
  clearPlateChannel: Boolean
  """
  Indicates whether the plate exists
  """
  plateIsExist: Boolean
  clearPlateIsExist: Boolean
  """
  Color of the plate
  """
  plateColor: String
  clearPlateColor: Boolean
  """
  Number on the plate
  """
  plateNumber: String
  clearPlateNumber: Boolean
  """
  Type of the plate
  """
  plateType: String
  clearPlateType: Boolean
  """
  Region of the plate
  """
  plateRegion: String
  clearPlateRegion: Boolean
  """
  Upload number of the plate
  """
  plateUploadNum: Int
  clearPlateUploadNum: Boolean
  """
  Indicates if user interaction is allowed
  """
  snapAllowUser: Boolean
  clearSnapAllowUser: Boolean
  """
  End time for user interaction allowance
  """
  snapAllowUserEndTime: String
  clearSnapAllowUserEndTime: Boolean
  """
  Defence code
  """
  snapDefenceCode: String
  clearSnapDefenceCode: Boolean
  """
  Device ID
  """
  snapDeviceID: String
  clearSnapDeviceID: Boolean
  """
  Number of people in the car
  """
  snapInCarPeopleNum: Int
  clearSnapInCarPeopleNum: Boolean
  """
  LAN number
  """
  snapLanNo: Int
  clearSnapLanNo: Boolean
  """
  Indicates if strobe is open
  """
  snapOpenStrobe: Boolean
  clearSnapOpenStrobe: Boolean
  """
  Bounding box coordinates of the vehicle
  """
  vehicleBoundingBox: [Int!]
  appendVehicleBoundingBox: [Int!]
  clearVehicleBoundingBox: Boolean
  """
  Vehicle series
  """
  vehicleSeries: String
  clearVehicleSeries: Boolean
}
"""
UpdatePermissionInput is used for update Permission object.
Input was generated by ent.
"""
input UpdatePermissionInput {
  updatedAt: Time
  name: String
  canRead: Boolean
  canCreate: Boolean
  canUpdate: Boolean
  canDelete: Boolean
}
"""
UpdatePoliceStationInput is used for update PoliceStation object.
Input was generated by ent.
"""
input UpdatePoliceStationInput {
  updatedAt: Time
  name: String
  location: String
  clearLocation: Boolean
  code: String
  identifier: String
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addCameraIDs: [ID!]
  removeCameraIDs: [ID!]
  clearCamera: Boolean
  addCarIDs: [ID!]
  removeCarIDs: [ID!]
  clearCar: Boolean
  parentID: ID
  clearParent: Boolean
  addChildStationIDs: [ID!]
  removeChildStationIDs: [ID!]
  clearChildStations: Boolean
}
"""
UpdateRoleInput is used for update Role object.
Input was generated by ent.
"""
input UpdateRoleInput {
  updatedAt: Time
  name: String
  addPermissionIDs: [ID!]
  removePermissionIDs: [ID!]
  clearPermissions: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  name: String
  email: String
  password: String
  phone: String
  clearPhone: Boolean
  active: Boolean
  roleID: ID
  policeStationID: ID
  clearPoliceStation: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  email: String!
  phone: String
  active: Boolean!
  roleID: ID!
  policeStationID: ID
  role: Role!
  policeStation: PoliceStation
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CreatedAt
  UpdatedAt
  NAME
  EMAIL
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  role edge predicates
  """
  hasRole: Boolean
  hasRoleWith: [RoleWhereInput!]
  """
  police_station edge predicates
  """
  hasPoliceStation: Boolean
  hasPoliceStationWith: [PoliceStationWhereInput!]
}
