// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ps *PoliceStation) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ps.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ps.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ps.QueryUsers().All(ctx)
	}
	return result, err
}

func (ps *PoliceStation) ParentStation(ctx context.Context) (*PoliceStation, error) {
	result, err := ps.Edges.ParentStationOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryParentStation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *PoliceStation) ChildStations(ctx context.Context) (result []*PoliceStation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ps.NamedChildStations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ps.Edges.ChildStationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ps.QueryChildStations().All(ctx)
	}
	return result, err
}

func (r *Role) Permissions(ctx context.Context) (result []*Permission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedPermissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.PermissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryPermissions().All(ctx)
	}
	return result, err
}

func (r *Role) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryUsers().All(ctx)
	}
	return result, err
}

func (u *User) Role(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRole(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RoleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRole().All(ctx)
	}
	return result, err
}

func (u *User) PoliceStation(ctx context.Context) (result []*PoliceStation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPoliceStation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PoliceStationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPoliceStation().All(ctx)
	}
	return result, err
}
