// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/predicate"
	"go-ent-project/internal/ent/vehicledata"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VehicleDataUpdate is the builder for updating VehicleData entities.
type VehicleDataUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleDataMutation
}

// Where appends a list predicates to the VehicleDataUpdate builder.
func (vdu *VehicleDataUpdate) Where(ps ...predicate.VehicleData) *VehicleDataUpdate {
	vdu.mutation.Where(ps...)
	return vdu
}

// SetUpdatedAt sets the "updated_at" field.
func (vdu *VehicleDataUpdate) SetUpdatedAt(t time.Time) *VehicleDataUpdate {
	vdu.mutation.SetUpdatedAt(t)
	return vdu
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (vdu *VehicleDataUpdate) SetPlateBoundingBox(i []int) *VehicleDataUpdate {
	vdu.mutation.SetPlateBoundingBox(i)
	return vdu
}

// AppendPlateBoundingBox appends i to the "plate_bounding_box" field.
func (vdu *VehicleDataUpdate) AppendPlateBoundingBox(i []int) *VehicleDataUpdate {
	vdu.mutation.AppendPlateBoundingBox(i)
	return vdu
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (vdu *VehicleDataUpdate) ClearPlateBoundingBox() *VehicleDataUpdate {
	vdu.mutation.ClearPlateBoundingBox()
	return vdu
}

// SetPlateChannel sets the "plate_channel" field.
func (vdu *VehicleDataUpdate) SetPlateChannel(i int) *VehicleDataUpdate {
	vdu.mutation.ResetPlateChannel()
	vdu.mutation.SetPlateChannel(i)
	return vdu
}

// SetNillablePlateChannel sets the "plate_channel" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateChannel(i *int) *VehicleDataUpdate {
	if i != nil {
		vdu.SetPlateChannel(*i)
	}
	return vdu
}

// AddPlateChannel adds i to the "plate_channel" field.
func (vdu *VehicleDataUpdate) AddPlateChannel(i int) *VehicleDataUpdate {
	vdu.mutation.AddPlateChannel(i)
	return vdu
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (vdu *VehicleDataUpdate) ClearPlateChannel() *VehicleDataUpdate {
	vdu.mutation.ClearPlateChannel()
	return vdu
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (vdu *VehicleDataUpdate) SetPlateIsExist(b bool) *VehicleDataUpdate {
	vdu.mutation.SetPlateIsExist(b)
	return vdu
}

// SetNillablePlateIsExist sets the "plate_is_exist" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateIsExist(b *bool) *VehicleDataUpdate {
	if b != nil {
		vdu.SetPlateIsExist(*b)
	}
	return vdu
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (vdu *VehicleDataUpdate) ClearPlateIsExist() *VehicleDataUpdate {
	vdu.mutation.ClearPlateIsExist()
	return vdu
}

// SetPlateColor sets the "plate_color" field.
func (vdu *VehicleDataUpdate) SetPlateColor(s string) *VehicleDataUpdate {
	vdu.mutation.SetPlateColor(s)
	return vdu
}

// SetNillablePlateColor sets the "plate_color" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateColor(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetPlateColor(*s)
	}
	return vdu
}

// ClearPlateColor clears the value of the "plate_color" field.
func (vdu *VehicleDataUpdate) ClearPlateColor() *VehicleDataUpdate {
	vdu.mutation.ClearPlateColor()
	return vdu
}

// SetPlateNumber sets the "plate_number" field.
func (vdu *VehicleDataUpdate) SetPlateNumber(s string) *VehicleDataUpdate {
	vdu.mutation.SetPlateNumber(s)
	return vdu
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateNumber(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetPlateNumber(*s)
	}
	return vdu
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (vdu *VehicleDataUpdate) ClearPlateNumber() *VehicleDataUpdate {
	vdu.mutation.ClearPlateNumber()
	return vdu
}

// SetPlateType sets the "plate_type" field.
func (vdu *VehicleDataUpdate) SetPlateType(s string) *VehicleDataUpdate {
	vdu.mutation.SetPlateType(s)
	return vdu
}

// SetNillablePlateType sets the "plate_type" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateType(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetPlateType(*s)
	}
	return vdu
}

// ClearPlateType clears the value of the "plate_type" field.
func (vdu *VehicleDataUpdate) ClearPlateType() *VehicleDataUpdate {
	vdu.mutation.ClearPlateType()
	return vdu
}

// SetPlateRegion sets the "plate_region" field.
func (vdu *VehicleDataUpdate) SetPlateRegion(s string) *VehicleDataUpdate {
	vdu.mutation.SetPlateRegion(s)
	return vdu
}

// SetNillablePlateRegion sets the "plate_region" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateRegion(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetPlateRegion(*s)
	}
	return vdu
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (vdu *VehicleDataUpdate) ClearPlateRegion() *VehicleDataUpdate {
	vdu.mutation.ClearPlateRegion()
	return vdu
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (vdu *VehicleDataUpdate) SetPlateUploadNum(i int) *VehicleDataUpdate {
	vdu.mutation.ResetPlateUploadNum()
	vdu.mutation.SetPlateUploadNum(i)
	return vdu
}

// SetNillablePlateUploadNum sets the "plate_upload_num" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillablePlateUploadNum(i *int) *VehicleDataUpdate {
	if i != nil {
		vdu.SetPlateUploadNum(*i)
	}
	return vdu
}

// AddPlateUploadNum adds i to the "plate_upload_num" field.
func (vdu *VehicleDataUpdate) AddPlateUploadNum(i int) *VehicleDataUpdate {
	vdu.mutation.AddPlateUploadNum(i)
	return vdu
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (vdu *VehicleDataUpdate) ClearPlateUploadNum() *VehicleDataUpdate {
	vdu.mutation.ClearPlateUploadNum()
	return vdu
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (vdu *VehicleDataUpdate) SetSnapAllowUser(b bool) *VehicleDataUpdate {
	vdu.mutation.SetSnapAllowUser(b)
	return vdu
}

// SetNillableSnapAllowUser sets the "snap_allow_user" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapAllowUser(b *bool) *VehicleDataUpdate {
	if b != nil {
		vdu.SetSnapAllowUser(*b)
	}
	return vdu
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (vdu *VehicleDataUpdate) ClearSnapAllowUser() *VehicleDataUpdate {
	vdu.mutation.ClearSnapAllowUser()
	return vdu
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (vdu *VehicleDataUpdate) SetSnapAllowUserEndTime(s string) *VehicleDataUpdate {
	vdu.mutation.SetSnapAllowUserEndTime(s)
	return vdu
}

// SetNillableSnapAllowUserEndTime sets the "snap_allow_user_end_time" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapAllowUserEndTime(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetSnapAllowUserEndTime(*s)
	}
	return vdu
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (vdu *VehicleDataUpdate) ClearSnapAllowUserEndTime() *VehicleDataUpdate {
	vdu.mutation.ClearSnapAllowUserEndTime()
	return vdu
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (vdu *VehicleDataUpdate) SetSnapDefenceCode(s string) *VehicleDataUpdate {
	vdu.mutation.SetSnapDefenceCode(s)
	return vdu
}

// SetNillableSnapDefenceCode sets the "snap_defence_code" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapDefenceCode(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetSnapDefenceCode(*s)
	}
	return vdu
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (vdu *VehicleDataUpdate) ClearSnapDefenceCode() *VehicleDataUpdate {
	vdu.mutation.ClearSnapDefenceCode()
	return vdu
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (vdu *VehicleDataUpdate) SetSnapDeviceID(s string) *VehicleDataUpdate {
	vdu.mutation.SetSnapDeviceID(s)
	return vdu
}

// SetNillableSnapDeviceID sets the "snap_device_id" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapDeviceID(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetSnapDeviceID(*s)
	}
	return vdu
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (vdu *VehicleDataUpdate) ClearSnapDeviceID() *VehicleDataUpdate {
	vdu.mutation.ClearSnapDeviceID()
	return vdu
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (vdu *VehicleDataUpdate) SetSnapInCarPeopleNum(i int) *VehicleDataUpdate {
	vdu.mutation.ResetSnapInCarPeopleNum()
	vdu.mutation.SetSnapInCarPeopleNum(i)
	return vdu
}

// SetNillableSnapInCarPeopleNum sets the "snap_in_car_people_num" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapInCarPeopleNum(i *int) *VehicleDataUpdate {
	if i != nil {
		vdu.SetSnapInCarPeopleNum(*i)
	}
	return vdu
}

// AddSnapInCarPeopleNum adds i to the "snap_in_car_people_num" field.
func (vdu *VehicleDataUpdate) AddSnapInCarPeopleNum(i int) *VehicleDataUpdate {
	vdu.mutation.AddSnapInCarPeopleNum(i)
	return vdu
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (vdu *VehicleDataUpdate) ClearSnapInCarPeopleNum() *VehicleDataUpdate {
	vdu.mutation.ClearSnapInCarPeopleNum()
	return vdu
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (vdu *VehicleDataUpdate) SetSnapLanNo(i int) *VehicleDataUpdate {
	vdu.mutation.ResetSnapLanNo()
	vdu.mutation.SetSnapLanNo(i)
	return vdu
}

// SetNillableSnapLanNo sets the "snap_lan_no" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapLanNo(i *int) *VehicleDataUpdate {
	if i != nil {
		vdu.SetSnapLanNo(*i)
	}
	return vdu
}

// AddSnapLanNo adds i to the "snap_lan_no" field.
func (vdu *VehicleDataUpdate) AddSnapLanNo(i int) *VehicleDataUpdate {
	vdu.mutation.AddSnapLanNo(i)
	return vdu
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (vdu *VehicleDataUpdate) ClearSnapLanNo() *VehicleDataUpdate {
	vdu.mutation.ClearSnapLanNo()
	return vdu
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (vdu *VehicleDataUpdate) SetSnapOpenStrobe(b bool) *VehicleDataUpdate {
	vdu.mutation.SetSnapOpenStrobe(b)
	return vdu
}

// SetNillableSnapOpenStrobe sets the "snap_open_strobe" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableSnapOpenStrobe(b *bool) *VehicleDataUpdate {
	if b != nil {
		vdu.SetSnapOpenStrobe(*b)
	}
	return vdu
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (vdu *VehicleDataUpdate) ClearSnapOpenStrobe() *VehicleDataUpdate {
	vdu.mutation.ClearSnapOpenStrobe()
	return vdu
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (vdu *VehicleDataUpdate) SetVehicleBoundingBox(i []int) *VehicleDataUpdate {
	vdu.mutation.SetVehicleBoundingBox(i)
	return vdu
}

// AppendVehicleBoundingBox appends i to the "vehicle_bounding_box" field.
func (vdu *VehicleDataUpdate) AppendVehicleBoundingBox(i []int) *VehicleDataUpdate {
	vdu.mutation.AppendVehicleBoundingBox(i)
	return vdu
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (vdu *VehicleDataUpdate) ClearVehicleBoundingBox() *VehicleDataUpdate {
	vdu.mutation.ClearVehicleBoundingBox()
	return vdu
}

// SetVehicleSeries sets the "vehicle_series" field.
func (vdu *VehicleDataUpdate) SetVehicleSeries(s string) *VehicleDataUpdate {
	vdu.mutation.SetVehicleSeries(s)
	return vdu
}

// SetNillableVehicleSeries sets the "vehicle_series" field if the given value is not nil.
func (vdu *VehicleDataUpdate) SetNillableVehicleSeries(s *string) *VehicleDataUpdate {
	if s != nil {
		vdu.SetVehicleSeries(*s)
	}
	return vdu
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (vdu *VehicleDataUpdate) ClearVehicleSeries() *VehicleDataUpdate {
	vdu.mutation.ClearVehicleSeries()
	return vdu
}

// Mutation returns the VehicleDataMutation object of the builder.
func (vdu *VehicleDataUpdate) Mutation() *VehicleDataMutation {
	return vdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VehicleDataUpdate) Save(ctx context.Context) (int, error) {
	vdu.defaults()
	return withHooks(ctx, vdu.sqlSave, vdu.mutation, vdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VehicleDataUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VehicleDataUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VehicleDataUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdu *VehicleDataUpdate) defaults() {
	if _, ok := vdu.mutation.UpdatedAt(); !ok {
		v := vehicledata.UpdateDefaultUpdatedAt()
		vdu.mutation.SetUpdatedAt(v)
	}
}

func (vdu *VehicleDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vehicledata.Table, vehicledata.Columns, sqlgraph.NewFieldSpec(vehicledata.FieldID, field.TypeInt))
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicledata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vdu.mutation.PlateBoundingBox(); ok {
		_spec.SetField(vehicledata.FieldPlateBoundingBox, field.TypeJSON, value)
	}
	if value, ok := vdu.mutation.AppendedPlateBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vehicledata.FieldPlateBoundingBox, value)
		})
	}
	if vdu.mutation.PlateBoundingBoxCleared() {
		_spec.ClearField(vehicledata.FieldPlateBoundingBox, field.TypeJSON)
	}
	if value, ok := vdu.mutation.PlateChannel(); ok {
		_spec.SetField(vehicledata.FieldPlateChannel, field.TypeInt, value)
	}
	if value, ok := vdu.mutation.AddedPlateChannel(); ok {
		_spec.AddField(vehicledata.FieldPlateChannel, field.TypeInt, value)
	}
	if vdu.mutation.PlateChannelCleared() {
		_spec.ClearField(vehicledata.FieldPlateChannel, field.TypeInt)
	}
	if value, ok := vdu.mutation.PlateIsExist(); ok {
		_spec.SetField(vehicledata.FieldPlateIsExist, field.TypeBool, value)
	}
	if vdu.mutation.PlateIsExistCleared() {
		_spec.ClearField(vehicledata.FieldPlateIsExist, field.TypeBool)
	}
	if value, ok := vdu.mutation.PlateColor(); ok {
		_spec.SetField(vehicledata.FieldPlateColor, field.TypeString, value)
	}
	if vdu.mutation.PlateColorCleared() {
		_spec.ClearField(vehicledata.FieldPlateColor, field.TypeString)
	}
	if value, ok := vdu.mutation.PlateNumber(); ok {
		_spec.SetField(vehicledata.FieldPlateNumber, field.TypeString, value)
	}
	if vdu.mutation.PlateNumberCleared() {
		_spec.ClearField(vehicledata.FieldPlateNumber, field.TypeString)
	}
	if value, ok := vdu.mutation.PlateType(); ok {
		_spec.SetField(vehicledata.FieldPlateType, field.TypeString, value)
	}
	if vdu.mutation.PlateTypeCleared() {
		_spec.ClearField(vehicledata.FieldPlateType, field.TypeString)
	}
	if value, ok := vdu.mutation.PlateRegion(); ok {
		_spec.SetField(vehicledata.FieldPlateRegion, field.TypeString, value)
	}
	if vdu.mutation.PlateRegionCleared() {
		_spec.ClearField(vehicledata.FieldPlateRegion, field.TypeString)
	}
	if value, ok := vdu.mutation.PlateUploadNum(); ok {
		_spec.SetField(vehicledata.FieldPlateUploadNum, field.TypeInt, value)
	}
	if value, ok := vdu.mutation.AddedPlateUploadNum(); ok {
		_spec.AddField(vehicledata.FieldPlateUploadNum, field.TypeInt, value)
	}
	if vdu.mutation.PlateUploadNumCleared() {
		_spec.ClearField(vehicledata.FieldPlateUploadNum, field.TypeInt)
	}
	if value, ok := vdu.mutation.SnapAllowUser(); ok {
		_spec.SetField(vehicledata.FieldSnapAllowUser, field.TypeBool, value)
	}
	if vdu.mutation.SnapAllowUserCleared() {
		_spec.ClearField(vehicledata.FieldSnapAllowUser, field.TypeBool)
	}
	if value, ok := vdu.mutation.SnapAllowUserEndTime(); ok {
		_spec.SetField(vehicledata.FieldSnapAllowUserEndTime, field.TypeString, value)
	}
	if vdu.mutation.SnapAllowUserEndTimeCleared() {
		_spec.ClearField(vehicledata.FieldSnapAllowUserEndTime, field.TypeString)
	}
	if value, ok := vdu.mutation.SnapDefenceCode(); ok {
		_spec.SetField(vehicledata.FieldSnapDefenceCode, field.TypeString, value)
	}
	if vdu.mutation.SnapDefenceCodeCleared() {
		_spec.ClearField(vehicledata.FieldSnapDefenceCode, field.TypeString)
	}
	if value, ok := vdu.mutation.SnapDeviceID(); ok {
		_spec.SetField(vehicledata.FieldSnapDeviceID, field.TypeString, value)
	}
	if vdu.mutation.SnapDeviceIDCleared() {
		_spec.ClearField(vehicledata.FieldSnapDeviceID, field.TypeString)
	}
	if value, ok := vdu.mutation.SnapInCarPeopleNum(); ok {
		_spec.SetField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if value, ok := vdu.mutation.AddedSnapInCarPeopleNum(); ok {
		_spec.AddField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if vdu.mutation.SnapInCarPeopleNumCleared() {
		_spec.ClearField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt)
	}
	if value, ok := vdu.mutation.SnapLanNo(); ok {
		_spec.SetField(vehicledata.FieldSnapLanNo, field.TypeInt, value)
	}
	if value, ok := vdu.mutation.AddedSnapLanNo(); ok {
		_spec.AddField(vehicledata.FieldSnapLanNo, field.TypeInt, value)
	}
	if vdu.mutation.SnapLanNoCleared() {
		_spec.ClearField(vehicledata.FieldSnapLanNo, field.TypeInt)
	}
	if value, ok := vdu.mutation.SnapOpenStrobe(); ok {
		_spec.SetField(vehicledata.FieldSnapOpenStrobe, field.TypeBool, value)
	}
	if vdu.mutation.SnapOpenStrobeCleared() {
		_spec.ClearField(vehicledata.FieldSnapOpenStrobe, field.TypeBool)
	}
	if value, ok := vdu.mutation.VehicleBoundingBox(); ok {
		_spec.SetField(vehicledata.FieldVehicleBoundingBox, field.TypeJSON, value)
	}
	if value, ok := vdu.mutation.AppendedVehicleBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vehicledata.FieldVehicleBoundingBox, value)
		})
	}
	if vdu.mutation.VehicleBoundingBoxCleared() {
		_spec.ClearField(vehicledata.FieldVehicleBoundingBox, field.TypeJSON)
	}
	if value, ok := vdu.mutation.VehicleSeries(); ok {
		_spec.SetField(vehicledata.FieldVehicleSeries, field.TypeString, value)
	}
	if vdu.mutation.VehicleSeriesCleared() {
		_spec.ClearField(vehicledata.FieldVehicleSeries, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicledata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vdu.mutation.done = true
	return n, nil
}

// VehicleDataUpdateOne is the builder for updating a single VehicleData entity.
type VehicleDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleDataMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vduo *VehicleDataUpdateOne) SetUpdatedAt(t time.Time) *VehicleDataUpdateOne {
	vduo.mutation.SetUpdatedAt(t)
	return vduo
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (vduo *VehicleDataUpdateOne) SetPlateBoundingBox(i []int) *VehicleDataUpdateOne {
	vduo.mutation.SetPlateBoundingBox(i)
	return vduo
}

// AppendPlateBoundingBox appends i to the "plate_bounding_box" field.
func (vduo *VehicleDataUpdateOne) AppendPlateBoundingBox(i []int) *VehicleDataUpdateOne {
	vduo.mutation.AppendPlateBoundingBox(i)
	return vduo
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (vduo *VehicleDataUpdateOne) ClearPlateBoundingBox() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateBoundingBox()
	return vduo
}

// SetPlateChannel sets the "plate_channel" field.
func (vduo *VehicleDataUpdateOne) SetPlateChannel(i int) *VehicleDataUpdateOne {
	vduo.mutation.ResetPlateChannel()
	vduo.mutation.SetPlateChannel(i)
	return vduo
}

// SetNillablePlateChannel sets the "plate_channel" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateChannel(i *int) *VehicleDataUpdateOne {
	if i != nil {
		vduo.SetPlateChannel(*i)
	}
	return vduo
}

// AddPlateChannel adds i to the "plate_channel" field.
func (vduo *VehicleDataUpdateOne) AddPlateChannel(i int) *VehicleDataUpdateOne {
	vduo.mutation.AddPlateChannel(i)
	return vduo
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (vduo *VehicleDataUpdateOne) ClearPlateChannel() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateChannel()
	return vduo
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (vduo *VehicleDataUpdateOne) SetPlateIsExist(b bool) *VehicleDataUpdateOne {
	vduo.mutation.SetPlateIsExist(b)
	return vduo
}

// SetNillablePlateIsExist sets the "plate_is_exist" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateIsExist(b *bool) *VehicleDataUpdateOne {
	if b != nil {
		vduo.SetPlateIsExist(*b)
	}
	return vduo
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (vduo *VehicleDataUpdateOne) ClearPlateIsExist() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateIsExist()
	return vduo
}

// SetPlateColor sets the "plate_color" field.
func (vduo *VehicleDataUpdateOne) SetPlateColor(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetPlateColor(s)
	return vduo
}

// SetNillablePlateColor sets the "plate_color" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateColor(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetPlateColor(*s)
	}
	return vduo
}

// ClearPlateColor clears the value of the "plate_color" field.
func (vduo *VehicleDataUpdateOne) ClearPlateColor() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateColor()
	return vduo
}

// SetPlateNumber sets the "plate_number" field.
func (vduo *VehicleDataUpdateOne) SetPlateNumber(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetPlateNumber(s)
	return vduo
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateNumber(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetPlateNumber(*s)
	}
	return vduo
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (vduo *VehicleDataUpdateOne) ClearPlateNumber() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateNumber()
	return vduo
}

// SetPlateType sets the "plate_type" field.
func (vduo *VehicleDataUpdateOne) SetPlateType(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetPlateType(s)
	return vduo
}

// SetNillablePlateType sets the "plate_type" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateType(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetPlateType(*s)
	}
	return vduo
}

// ClearPlateType clears the value of the "plate_type" field.
func (vduo *VehicleDataUpdateOne) ClearPlateType() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateType()
	return vduo
}

// SetPlateRegion sets the "plate_region" field.
func (vduo *VehicleDataUpdateOne) SetPlateRegion(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetPlateRegion(s)
	return vduo
}

// SetNillablePlateRegion sets the "plate_region" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateRegion(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetPlateRegion(*s)
	}
	return vduo
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (vduo *VehicleDataUpdateOne) ClearPlateRegion() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateRegion()
	return vduo
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (vduo *VehicleDataUpdateOne) SetPlateUploadNum(i int) *VehicleDataUpdateOne {
	vduo.mutation.ResetPlateUploadNum()
	vduo.mutation.SetPlateUploadNum(i)
	return vduo
}

// SetNillablePlateUploadNum sets the "plate_upload_num" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillablePlateUploadNum(i *int) *VehicleDataUpdateOne {
	if i != nil {
		vduo.SetPlateUploadNum(*i)
	}
	return vduo
}

// AddPlateUploadNum adds i to the "plate_upload_num" field.
func (vduo *VehicleDataUpdateOne) AddPlateUploadNum(i int) *VehicleDataUpdateOne {
	vduo.mutation.AddPlateUploadNum(i)
	return vduo
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (vduo *VehicleDataUpdateOne) ClearPlateUploadNum() *VehicleDataUpdateOne {
	vduo.mutation.ClearPlateUploadNum()
	return vduo
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (vduo *VehicleDataUpdateOne) SetSnapAllowUser(b bool) *VehicleDataUpdateOne {
	vduo.mutation.SetSnapAllowUser(b)
	return vduo
}

// SetNillableSnapAllowUser sets the "snap_allow_user" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapAllowUser(b *bool) *VehicleDataUpdateOne {
	if b != nil {
		vduo.SetSnapAllowUser(*b)
	}
	return vduo
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (vduo *VehicleDataUpdateOne) ClearSnapAllowUser() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapAllowUser()
	return vduo
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (vduo *VehicleDataUpdateOne) SetSnapAllowUserEndTime(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetSnapAllowUserEndTime(s)
	return vduo
}

// SetNillableSnapAllowUserEndTime sets the "snap_allow_user_end_time" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapAllowUserEndTime(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetSnapAllowUserEndTime(*s)
	}
	return vduo
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (vduo *VehicleDataUpdateOne) ClearSnapAllowUserEndTime() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapAllowUserEndTime()
	return vduo
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (vduo *VehicleDataUpdateOne) SetSnapDefenceCode(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetSnapDefenceCode(s)
	return vduo
}

// SetNillableSnapDefenceCode sets the "snap_defence_code" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapDefenceCode(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetSnapDefenceCode(*s)
	}
	return vduo
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (vduo *VehicleDataUpdateOne) ClearSnapDefenceCode() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapDefenceCode()
	return vduo
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (vduo *VehicleDataUpdateOne) SetSnapDeviceID(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetSnapDeviceID(s)
	return vduo
}

// SetNillableSnapDeviceID sets the "snap_device_id" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapDeviceID(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetSnapDeviceID(*s)
	}
	return vduo
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (vduo *VehicleDataUpdateOne) ClearSnapDeviceID() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapDeviceID()
	return vduo
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (vduo *VehicleDataUpdateOne) SetSnapInCarPeopleNum(i int) *VehicleDataUpdateOne {
	vduo.mutation.ResetSnapInCarPeopleNum()
	vduo.mutation.SetSnapInCarPeopleNum(i)
	return vduo
}

// SetNillableSnapInCarPeopleNum sets the "snap_in_car_people_num" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapInCarPeopleNum(i *int) *VehicleDataUpdateOne {
	if i != nil {
		vduo.SetSnapInCarPeopleNum(*i)
	}
	return vduo
}

// AddSnapInCarPeopleNum adds i to the "snap_in_car_people_num" field.
func (vduo *VehicleDataUpdateOne) AddSnapInCarPeopleNum(i int) *VehicleDataUpdateOne {
	vduo.mutation.AddSnapInCarPeopleNum(i)
	return vduo
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (vduo *VehicleDataUpdateOne) ClearSnapInCarPeopleNum() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapInCarPeopleNum()
	return vduo
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (vduo *VehicleDataUpdateOne) SetSnapLanNo(i int) *VehicleDataUpdateOne {
	vduo.mutation.ResetSnapLanNo()
	vduo.mutation.SetSnapLanNo(i)
	return vduo
}

// SetNillableSnapLanNo sets the "snap_lan_no" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapLanNo(i *int) *VehicleDataUpdateOne {
	if i != nil {
		vduo.SetSnapLanNo(*i)
	}
	return vduo
}

// AddSnapLanNo adds i to the "snap_lan_no" field.
func (vduo *VehicleDataUpdateOne) AddSnapLanNo(i int) *VehicleDataUpdateOne {
	vduo.mutation.AddSnapLanNo(i)
	return vduo
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (vduo *VehicleDataUpdateOne) ClearSnapLanNo() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapLanNo()
	return vduo
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (vduo *VehicleDataUpdateOne) SetSnapOpenStrobe(b bool) *VehicleDataUpdateOne {
	vduo.mutation.SetSnapOpenStrobe(b)
	return vduo
}

// SetNillableSnapOpenStrobe sets the "snap_open_strobe" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableSnapOpenStrobe(b *bool) *VehicleDataUpdateOne {
	if b != nil {
		vduo.SetSnapOpenStrobe(*b)
	}
	return vduo
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (vduo *VehicleDataUpdateOne) ClearSnapOpenStrobe() *VehicleDataUpdateOne {
	vduo.mutation.ClearSnapOpenStrobe()
	return vduo
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (vduo *VehicleDataUpdateOne) SetVehicleBoundingBox(i []int) *VehicleDataUpdateOne {
	vduo.mutation.SetVehicleBoundingBox(i)
	return vduo
}

// AppendVehicleBoundingBox appends i to the "vehicle_bounding_box" field.
func (vduo *VehicleDataUpdateOne) AppendVehicleBoundingBox(i []int) *VehicleDataUpdateOne {
	vduo.mutation.AppendVehicleBoundingBox(i)
	return vduo
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (vduo *VehicleDataUpdateOne) ClearVehicleBoundingBox() *VehicleDataUpdateOne {
	vduo.mutation.ClearVehicleBoundingBox()
	return vduo
}

// SetVehicleSeries sets the "vehicle_series" field.
func (vduo *VehicleDataUpdateOne) SetVehicleSeries(s string) *VehicleDataUpdateOne {
	vduo.mutation.SetVehicleSeries(s)
	return vduo
}

// SetNillableVehicleSeries sets the "vehicle_series" field if the given value is not nil.
func (vduo *VehicleDataUpdateOne) SetNillableVehicleSeries(s *string) *VehicleDataUpdateOne {
	if s != nil {
		vduo.SetVehicleSeries(*s)
	}
	return vduo
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (vduo *VehicleDataUpdateOne) ClearVehicleSeries() *VehicleDataUpdateOne {
	vduo.mutation.ClearVehicleSeries()
	return vduo
}

// Mutation returns the VehicleDataMutation object of the builder.
func (vduo *VehicleDataUpdateOne) Mutation() *VehicleDataMutation {
	return vduo.mutation
}

// Where appends a list predicates to the VehicleDataUpdate builder.
func (vduo *VehicleDataUpdateOne) Where(ps ...predicate.VehicleData) *VehicleDataUpdateOne {
	vduo.mutation.Where(ps...)
	return vduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VehicleDataUpdateOne) Select(field string, fields ...string) *VehicleDataUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VehicleData entity.
func (vduo *VehicleDataUpdateOne) Save(ctx context.Context) (*VehicleData, error) {
	vduo.defaults()
	return withHooks(ctx, vduo.sqlSave, vduo.mutation, vduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VehicleDataUpdateOne) SaveX(ctx context.Context) *VehicleData {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VehicleDataUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VehicleDataUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vduo *VehicleDataUpdateOne) defaults() {
	if _, ok := vduo.mutation.UpdatedAt(); !ok {
		v := vehicledata.UpdateDefaultUpdatedAt()
		vduo.mutation.SetUpdatedAt(v)
	}
}

func (vduo *VehicleDataUpdateOne) sqlSave(ctx context.Context) (_node *VehicleData, err error) {
	_spec := sqlgraph.NewUpdateSpec(vehicledata.Table, vehicledata.Columns, sqlgraph.NewFieldSpec(vehicledata.FieldID, field.TypeInt))
	id, ok := vduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VehicleData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicledata.FieldID)
		for _, f := range fields {
			if !vehicledata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicledata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicledata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vduo.mutation.PlateBoundingBox(); ok {
		_spec.SetField(vehicledata.FieldPlateBoundingBox, field.TypeJSON, value)
	}
	if value, ok := vduo.mutation.AppendedPlateBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vehicledata.FieldPlateBoundingBox, value)
		})
	}
	if vduo.mutation.PlateBoundingBoxCleared() {
		_spec.ClearField(vehicledata.FieldPlateBoundingBox, field.TypeJSON)
	}
	if value, ok := vduo.mutation.PlateChannel(); ok {
		_spec.SetField(vehicledata.FieldPlateChannel, field.TypeInt, value)
	}
	if value, ok := vduo.mutation.AddedPlateChannel(); ok {
		_spec.AddField(vehicledata.FieldPlateChannel, field.TypeInt, value)
	}
	if vduo.mutation.PlateChannelCleared() {
		_spec.ClearField(vehicledata.FieldPlateChannel, field.TypeInt)
	}
	if value, ok := vduo.mutation.PlateIsExist(); ok {
		_spec.SetField(vehicledata.FieldPlateIsExist, field.TypeBool, value)
	}
	if vduo.mutation.PlateIsExistCleared() {
		_spec.ClearField(vehicledata.FieldPlateIsExist, field.TypeBool)
	}
	if value, ok := vduo.mutation.PlateColor(); ok {
		_spec.SetField(vehicledata.FieldPlateColor, field.TypeString, value)
	}
	if vduo.mutation.PlateColorCleared() {
		_spec.ClearField(vehicledata.FieldPlateColor, field.TypeString)
	}
	if value, ok := vduo.mutation.PlateNumber(); ok {
		_spec.SetField(vehicledata.FieldPlateNumber, field.TypeString, value)
	}
	if vduo.mutation.PlateNumberCleared() {
		_spec.ClearField(vehicledata.FieldPlateNumber, field.TypeString)
	}
	if value, ok := vduo.mutation.PlateType(); ok {
		_spec.SetField(vehicledata.FieldPlateType, field.TypeString, value)
	}
	if vduo.mutation.PlateTypeCleared() {
		_spec.ClearField(vehicledata.FieldPlateType, field.TypeString)
	}
	if value, ok := vduo.mutation.PlateRegion(); ok {
		_spec.SetField(vehicledata.FieldPlateRegion, field.TypeString, value)
	}
	if vduo.mutation.PlateRegionCleared() {
		_spec.ClearField(vehicledata.FieldPlateRegion, field.TypeString)
	}
	if value, ok := vduo.mutation.PlateUploadNum(); ok {
		_spec.SetField(vehicledata.FieldPlateUploadNum, field.TypeInt, value)
	}
	if value, ok := vduo.mutation.AddedPlateUploadNum(); ok {
		_spec.AddField(vehicledata.FieldPlateUploadNum, field.TypeInt, value)
	}
	if vduo.mutation.PlateUploadNumCleared() {
		_spec.ClearField(vehicledata.FieldPlateUploadNum, field.TypeInt)
	}
	if value, ok := vduo.mutation.SnapAllowUser(); ok {
		_spec.SetField(vehicledata.FieldSnapAllowUser, field.TypeBool, value)
	}
	if vduo.mutation.SnapAllowUserCleared() {
		_spec.ClearField(vehicledata.FieldSnapAllowUser, field.TypeBool)
	}
	if value, ok := vduo.mutation.SnapAllowUserEndTime(); ok {
		_spec.SetField(vehicledata.FieldSnapAllowUserEndTime, field.TypeString, value)
	}
	if vduo.mutation.SnapAllowUserEndTimeCleared() {
		_spec.ClearField(vehicledata.FieldSnapAllowUserEndTime, field.TypeString)
	}
	if value, ok := vduo.mutation.SnapDefenceCode(); ok {
		_spec.SetField(vehicledata.FieldSnapDefenceCode, field.TypeString, value)
	}
	if vduo.mutation.SnapDefenceCodeCleared() {
		_spec.ClearField(vehicledata.FieldSnapDefenceCode, field.TypeString)
	}
	if value, ok := vduo.mutation.SnapDeviceID(); ok {
		_spec.SetField(vehicledata.FieldSnapDeviceID, field.TypeString, value)
	}
	if vduo.mutation.SnapDeviceIDCleared() {
		_spec.ClearField(vehicledata.FieldSnapDeviceID, field.TypeString)
	}
	if value, ok := vduo.mutation.SnapInCarPeopleNum(); ok {
		_spec.SetField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if value, ok := vduo.mutation.AddedSnapInCarPeopleNum(); ok {
		_spec.AddField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt, value)
	}
	if vduo.mutation.SnapInCarPeopleNumCleared() {
		_spec.ClearField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt)
	}
	if value, ok := vduo.mutation.SnapLanNo(); ok {
		_spec.SetField(vehicledata.FieldSnapLanNo, field.TypeInt, value)
	}
	if value, ok := vduo.mutation.AddedSnapLanNo(); ok {
		_spec.AddField(vehicledata.FieldSnapLanNo, field.TypeInt, value)
	}
	if vduo.mutation.SnapLanNoCleared() {
		_spec.ClearField(vehicledata.FieldSnapLanNo, field.TypeInt)
	}
	if value, ok := vduo.mutation.SnapOpenStrobe(); ok {
		_spec.SetField(vehicledata.FieldSnapOpenStrobe, field.TypeBool, value)
	}
	if vduo.mutation.SnapOpenStrobeCleared() {
		_spec.ClearField(vehicledata.FieldSnapOpenStrobe, field.TypeBool)
	}
	if value, ok := vduo.mutation.VehicleBoundingBox(); ok {
		_spec.SetField(vehicledata.FieldVehicleBoundingBox, field.TypeJSON, value)
	}
	if value, ok := vduo.mutation.AppendedVehicleBoundingBox(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vehicledata.FieldVehicleBoundingBox, value)
		})
	}
	if vduo.mutation.VehicleBoundingBoxCleared() {
		_spec.ClearField(vehicledata.FieldVehicleBoundingBox, field.TypeJSON)
	}
	if value, ok := vduo.mutation.VehicleSeries(); ok {
		_spec.SetField(vehicledata.FieldVehicleSeries, field.TypeString, value)
	}
	if vduo.mutation.VehicleSeriesCleared() {
		_spec.ClearField(vehicledata.FieldVehicleSeries, field.TypeString)
	}
	_node = &VehicleData{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicledata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vduo.mutation.done = true
	return _node, nil
}
