// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-ent-project/internal/ent/event"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Bounding box coordinates of the plate
	PlateBoundingBox []int `json:"plate_bounding_box,omitempty"`
	// Channel of the plate
	PlateChannel int `json:"plate_channel,omitempty"`
	// Confidence score of the plate detection
	PlateConfidence int `json:"plate_confidence,omitempty"`
	// Indicates whether the plate exists
	PlateIsExist bool `json:"plate_is_exist,omitempty"`
	// Color of the plate
	PlateColor string `json:"plate_color,omitempty"`
	// Number on the plate
	PlateNumber string `json:"plate_number,omitempty"`
	// Type of the plate
	PlateType string `json:"plate_type,omitempty"`
	// Region of the plate
	PlateRegion string `json:"plate_region,omitempty"`
	// Upload number of the plate
	PlateUploadNum int `json:"plate_upload_num,omitempty"`
	// Accurate timestamp of the snap
	SnapAccurateTime string `json:"snap_accurate_time,omitempty"`
	// Indicates if user interaction is allowed
	SnapAllowUser bool `json:"snap_allow_user,omitempty"`
	// End time for user interaction allowance
	SnapAllowUserEndTime string `json:"snap_allow_user_end_time,omitempty"`
	// DST adjustment
	SnapDstTune int `json:"snap_dst_tune,omitempty"`
	// Defence code
	SnapDefenceCode string `json:"snap_defence_code,omitempty"`
	// Device ID
	SnapDeviceID string `json:"snap_device_id,omitempty"`
	// Direction of the vehicle
	SnapDirection string `json:"snap_direction,omitempty"`
	// Number of people in the car
	SnapInCarPeopleNum int `json:"snap_in_car_people_num,omitempty"`
	// LAN number
	SnapLanNo int `json:"snap_lan_no,omitempty"`
	// Indicates if strobe is open
	SnapOpenStrobe bool `json:"snap_open_strobe,omitempty"`
	// Snap timestamp
	SnapTime string `json:"snap_time,omitempty"`
	// Time zone of the snap
	SnapTimeZone int `json:"snap_time_zone,omitempty"`
	// Speed of the vehicle
	VehicleSpeed int `json:"vehicle_speed,omitempty"`
	// Bounding box coordinates of the vehicle
	VehicleBoundingBox []int `json:"vehicle_bounding_box,omitempty"`
	// Color of the vehicle
	VehicleColor string `json:"vehicle_color,omitempty"`
	// Vehicle series
	VehicleSeries string `json:"vehicle_series,omitempty"`
	// Type of the vehicle
	VehicleType  string `json:"vehicle_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldPlateBoundingBox, event.FieldVehicleBoundingBox:
			values[i] = new([]byte)
		case event.FieldPlateIsExist, event.FieldSnapAllowUser, event.FieldSnapOpenStrobe:
			values[i] = new(sql.NullBool)
		case event.FieldPlateChannel, event.FieldPlateConfidence, event.FieldPlateUploadNum, event.FieldSnapDstTune, event.FieldSnapInCarPeopleNum, event.FieldSnapLanNo, event.FieldSnapTimeZone, event.FieldVehicleSpeed:
			values[i] = new(sql.NullInt64)
		case event.FieldPlateColor, event.FieldPlateNumber, event.FieldPlateType, event.FieldPlateRegion, event.FieldSnapAccurateTime, event.FieldSnapAllowUserEndTime, event.FieldSnapDefenceCode, event.FieldSnapDeviceID, event.FieldSnapDirection, event.FieldSnapTime, event.FieldVehicleColor, event.FieldVehicleSeries, event.FieldVehicleType:
			values[i] = new(sql.NullString)
		case event.FieldCreatedAt, event.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case event.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case event.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case event.FieldPlateBoundingBox:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field plate_bounding_box", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.PlateBoundingBox); err != nil {
					return fmt.Errorf("unmarshal field plate_bounding_box: %w", err)
				}
			}
		case event.FieldPlateChannel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plate_channel", values[i])
			} else if value.Valid {
				e.PlateChannel = int(value.Int64)
			}
		case event.FieldPlateConfidence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plate_confidence", values[i])
			} else if value.Valid {
				e.PlateConfidence = int(value.Int64)
			}
		case event.FieldPlateIsExist:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field plate_is_exist", values[i])
			} else if value.Valid {
				e.PlateIsExist = value.Bool
			}
		case event.FieldPlateColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate_color", values[i])
			} else if value.Valid {
				e.PlateColor = value.String
			}
		case event.FieldPlateNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate_number", values[i])
			} else if value.Valid {
				e.PlateNumber = value.String
			}
		case event.FieldPlateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate_type", values[i])
			} else if value.Valid {
				e.PlateType = value.String
			}
		case event.FieldPlateRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate_region", values[i])
			} else if value.Valid {
				e.PlateRegion = value.String
			}
		case event.FieldPlateUploadNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plate_upload_num", values[i])
			} else if value.Valid {
				e.PlateUploadNum = int(value.Int64)
			}
		case event.FieldSnapAccurateTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_accurate_time", values[i])
			} else if value.Valid {
				e.SnapAccurateTime = value.String
			}
		case event.FieldSnapAllowUser:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field snap_allow_user", values[i])
			} else if value.Valid {
				e.SnapAllowUser = value.Bool
			}
		case event.FieldSnapAllowUserEndTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_allow_user_end_time", values[i])
			} else if value.Valid {
				e.SnapAllowUserEndTime = value.String
			}
		case event.FieldSnapDstTune:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field snap_dst_tune", values[i])
			} else if value.Valid {
				e.SnapDstTune = int(value.Int64)
			}
		case event.FieldSnapDefenceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_defence_code", values[i])
			} else if value.Valid {
				e.SnapDefenceCode = value.String
			}
		case event.FieldSnapDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_device_id", values[i])
			} else if value.Valid {
				e.SnapDeviceID = value.String
			}
		case event.FieldSnapDirection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_direction", values[i])
			} else if value.Valid {
				e.SnapDirection = value.String
			}
		case event.FieldSnapInCarPeopleNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field snap_in_car_people_num", values[i])
			} else if value.Valid {
				e.SnapInCarPeopleNum = int(value.Int64)
			}
		case event.FieldSnapLanNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field snap_lan_no", values[i])
			} else if value.Valid {
				e.SnapLanNo = int(value.Int64)
			}
		case event.FieldSnapOpenStrobe:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field snap_open_strobe", values[i])
			} else if value.Valid {
				e.SnapOpenStrobe = value.Bool
			}
		case event.FieldSnapTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_time", values[i])
			} else if value.Valid {
				e.SnapTime = value.String
			}
		case event.FieldSnapTimeZone:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field snap_time_zone", values[i])
			} else if value.Valid {
				e.SnapTimeZone = int(value.Int64)
			}
		case event.FieldVehicleSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_speed", values[i])
			} else if value.Valid {
				e.VehicleSpeed = int(value.Int64)
			}
		case event.FieldVehicleBoundingBox:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_bounding_box", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.VehicleBoundingBox); err != nil {
					return fmt.Errorf("unmarshal field vehicle_bounding_box: %w", err)
				}
			}
		case event.FieldVehicleColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_color", values[i])
			} else if value.Valid {
				e.VehicleColor = value.String
			}
		case event.FieldVehicleSeries:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_series", values[i])
			} else if value.Valid {
				e.VehicleSeries = value.String
			}
		case event.FieldVehicleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_type", values[i])
			} else if value.Valid {
				e.VehicleType = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("plate_bounding_box=")
	builder.WriteString(fmt.Sprintf("%v", e.PlateBoundingBox))
	builder.WriteString(", ")
	builder.WriteString("plate_channel=")
	builder.WriteString(fmt.Sprintf("%v", e.PlateChannel))
	builder.WriteString(", ")
	builder.WriteString("plate_confidence=")
	builder.WriteString(fmt.Sprintf("%v", e.PlateConfidence))
	builder.WriteString(", ")
	builder.WriteString("plate_is_exist=")
	builder.WriteString(fmt.Sprintf("%v", e.PlateIsExist))
	builder.WriteString(", ")
	builder.WriteString("plate_color=")
	builder.WriteString(e.PlateColor)
	builder.WriteString(", ")
	builder.WriteString("plate_number=")
	builder.WriteString(e.PlateNumber)
	builder.WriteString(", ")
	builder.WriteString("plate_type=")
	builder.WriteString(e.PlateType)
	builder.WriteString(", ")
	builder.WriteString("plate_region=")
	builder.WriteString(e.PlateRegion)
	builder.WriteString(", ")
	builder.WriteString("plate_upload_num=")
	builder.WriteString(fmt.Sprintf("%v", e.PlateUploadNum))
	builder.WriteString(", ")
	builder.WriteString("snap_accurate_time=")
	builder.WriteString(e.SnapAccurateTime)
	builder.WriteString(", ")
	builder.WriteString("snap_allow_user=")
	builder.WriteString(fmt.Sprintf("%v", e.SnapAllowUser))
	builder.WriteString(", ")
	builder.WriteString("snap_allow_user_end_time=")
	builder.WriteString(e.SnapAllowUserEndTime)
	builder.WriteString(", ")
	builder.WriteString("snap_dst_tune=")
	builder.WriteString(fmt.Sprintf("%v", e.SnapDstTune))
	builder.WriteString(", ")
	builder.WriteString("snap_defence_code=")
	builder.WriteString(e.SnapDefenceCode)
	builder.WriteString(", ")
	builder.WriteString("snap_device_id=")
	builder.WriteString(e.SnapDeviceID)
	builder.WriteString(", ")
	builder.WriteString("snap_direction=")
	builder.WriteString(e.SnapDirection)
	builder.WriteString(", ")
	builder.WriteString("snap_in_car_people_num=")
	builder.WriteString(fmt.Sprintf("%v", e.SnapInCarPeopleNum))
	builder.WriteString(", ")
	builder.WriteString("snap_lan_no=")
	builder.WriteString(fmt.Sprintf("%v", e.SnapLanNo))
	builder.WriteString(", ")
	builder.WriteString("snap_open_strobe=")
	builder.WriteString(fmt.Sprintf("%v", e.SnapOpenStrobe))
	builder.WriteString(", ")
	builder.WriteString("snap_time=")
	builder.WriteString(e.SnapTime)
	builder.WriteString(", ")
	builder.WriteString("snap_time_zone=")
	builder.WriteString(fmt.Sprintf("%v", e.SnapTimeZone))
	builder.WriteString(", ")
	builder.WriteString("vehicle_speed=")
	builder.WriteString(fmt.Sprintf("%v", e.VehicleSpeed))
	builder.WriteString(", ")
	builder.WriteString("vehicle_bounding_box=")
	builder.WriteString(fmt.Sprintf("%v", e.VehicleBoundingBox))
	builder.WriteString(", ")
	builder.WriteString("vehicle_color=")
	builder.WriteString(e.VehicleColor)
	builder.WriteString(", ")
	builder.WriteString("vehicle_series=")
	builder.WriteString(e.VehicleSeries)
	builder.WriteString(", ")
	builder.WriteString("vehicle_type=")
	builder.WriteString(e.VehicleType)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
