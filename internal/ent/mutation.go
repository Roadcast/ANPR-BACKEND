// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/car"
	"go-ent-project/internal/ent/event"
	"go-ent-project/internal/ent/permission"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/internal/ent/predicate"
	"go-ent-project/internal/ent/role"
	"go-ent-project/internal/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCamera        = "Camera"
	TypeCar           = "Car"
	TypeEvent         = "Event"
	TypePermission    = "Permission"
	TypePoliceStation = "PoliceStation"
	TypeRole          = "Role"
	TypeUser          = "User"
)

// CameraMutation represents an operation that mutates the Camera nodes in the graph.
type CameraMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *time.Time
	updated_at            *time.Time
	name                  *string
	model                 *string
	imei                  *string
	location              *string
	active                *bool
	address               *string
	is_working            *bool
	district              *string
	clearedFields         map[string]struct{}
	police_station        *uuid.UUID
	clearedpolice_station bool
	done                  bool
	oldValue              func(context.Context) (*Camera, error)
	predicates            []predicate.Camera
}

var _ ent.Mutation = (*CameraMutation)(nil)

// cameraOption allows management of the mutation configuration using functional options.
type cameraOption func(*CameraMutation)

// newCameraMutation creates new mutation for the Camera entity.
func newCameraMutation(c config, op Op, opts ...cameraOption) *CameraMutation {
	m := &CameraMutation{
		config:        c,
		op:            op,
		typ:           TypeCamera,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCameraID sets the ID field of the mutation.
func withCameraID(id uuid.UUID) cameraOption {
	return func(m *CameraMutation) {
		var (
			err   error
			once  sync.Once
			value *Camera
		)
		m.oldValue = func(ctx context.Context) (*Camera, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Camera.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCamera sets the old Camera of the mutation.
func withCamera(node *Camera) cameraOption {
	return func(m *CameraMutation) {
		m.oldValue = func(context.Context) (*Camera, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CameraMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CameraMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Camera entities.
func (m *CameraMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CameraMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CameraMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Camera.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CameraMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CameraMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CameraMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CameraMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CameraMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CameraMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *CameraMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CameraMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CameraMutation) ResetName() {
	m.name = nil
}

// SetModel sets the "model" field.
func (m *CameraMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *CameraMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *CameraMutation) ResetModel() {
	m.model = nil
}

// SetImei sets the "imei" field.
func (m *CameraMutation) SetImei(s string) {
	m.imei = &s
}

// Imei returns the value of the "imei" field in the mutation.
func (m *CameraMutation) Imei() (r string, exists bool) {
	v := m.imei
	if v == nil {
		return
	}
	return *v, true
}

// OldImei returns the old "imei" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldImei(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImei is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImei requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImei: %w", err)
	}
	return oldValue.Imei, nil
}

// ResetImei resets all changes to the "imei" field.
func (m *CameraMutation) ResetImei() {
	m.imei = nil
}

// SetLocation sets the "location" field.
func (m *CameraMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *CameraMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *CameraMutation) ResetLocation() {
	m.location = nil
}

// SetActive sets the "active" field.
func (m *CameraMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *CameraMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *CameraMutation) ResetActive() {
	m.active = nil
}

// SetAddress sets the "address" field.
func (m *CameraMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CameraMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *CameraMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[camera.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *CameraMutation) AddressCleared() bool {
	_, ok := m.clearedFields[camera.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *CameraMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, camera.FieldAddress)
}

// SetIsWorking sets the "is_working" field.
func (m *CameraMutation) SetIsWorking(b bool) {
	m.is_working = &b
}

// IsWorking returns the value of the "is_working" field in the mutation.
func (m *CameraMutation) IsWorking() (r bool, exists bool) {
	v := m.is_working
	if v == nil {
		return
	}
	return *v, true
}

// OldIsWorking returns the old "is_working" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldIsWorking(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsWorking is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsWorking requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsWorking: %w", err)
	}
	return oldValue.IsWorking, nil
}

// ResetIsWorking resets all changes to the "is_working" field.
func (m *CameraMutation) ResetIsWorking() {
	m.is_working = nil
}

// SetDistrict sets the "district" field.
func (m *CameraMutation) SetDistrict(s string) {
	m.district = &s
}

// District returns the value of the "district" field in the mutation.
func (m *CameraMutation) District() (r string, exists bool) {
	v := m.district
	if v == nil {
		return
	}
	return *v, true
}

// OldDistrict returns the old "district" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldDistrict(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistrict is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistrict: %w", err)
	}
	return oldValue.District, nil
}

// ResetDistrict resets all changes to the "district" field.
func (m *CameraMutation) ResetDistrict() {
	m.district = nil
}

// SetPoliceStationID sets the "police_station_id" field.
func (m *CameraMutation) SetPoliceStationID(u uuid.UUID) {
	m.police_station = &u
}

// PoliceStationID returns the value of the "police_station_id" field in the mutation.
func (m *CameraMutation) PoliceStationID() (r uuid.UUID, exists bool) {
	v := m.police_station
	if v == nil {
		return
	}
	return *v, true
}

// OldPoliceStationID returns the old "police_station_id" field's value of the Camera entity.
// If the Camera object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CameraMutation) OldPoliceStationID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoliceStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoliceStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoliceStationID: %w", err)
	}
	return oldValue.PoliceStationID, nil
}

// ClearPoliceStationID clears the value of the "police_station_id" field.
func (m *CameraMutation) ClearPoliceStationID() {
	m.police_station = nil
	m.clearedFields[camera.FieldPoliceStationID] = struct{}{}
}

// PoliceStationIDCleared returns if the "police_station_id" field was cleared in this mutation.
func (m *CameraMutation) PoliceStationIDCleared() bool {
	_, ok := m.clearedFields[camera.FieldPoliceStationID]
	return ok
}

// ResetPoliceStationID resets all changes to the "police_station_id" field.
func (m *CameraMutation) ResetPoliceStationID() {
	m.police_station = nil
	delete(m.clearedFields, camera.FieldPoliceStationID)
}

// ClearPoliceStation clears the "police_station" edge to the PoliceStation entity.
func (m *CameraMutation) ClearPoliceStation() {
	m.clearedpolice_station = true
	m.clearedFields[camera.FieldPoliceStationID] = struct{}{}
}

// PoliceStationCleared reports if the "police_station" edge to the PoliceStation entity was cleared.
func (m *CameraMutation) PoliceStationCleared() bool {
	return m.PoliceStationIDCleared() || m.clearedpolice_station
}

// PoliceStationIDs returns the "police_station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoliceStationID instead. It exists only for internal usage by the builders.
func (m *CameraMutation) PoliceStationIDs() (ids []uuid.UUID) {
	if id := m.police_station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoliceStation resets all changes to the "police_station" edge.
func (m *CameraMutation) ResetPoliceStation() {
	m.police_station = nil
	m.clearedpolice_station = false
}

// Where appends a list predicates to the CameraMutation builder.
func (m *CameraMutation) Where(ps ...predicate.Camera) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CameraMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CameraMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Camera, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CameraMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CameraMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Camera).
func (m *CameraMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CameraMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, camera.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, camera.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, camera.FieldName)
	}
	if m.model != nil {
		fields = append(fields, camera.FieldModel)
	}
	if m.imei != nil {
		fields = append(fields, camera.FieldImei)
	}
	if m.location != nil {
		fields = append(fields, camera.FieldLocation)
	}
	if m.active != nil {
		fields = append(fields, camera.FieldActive)
	}
	if m.address != nil {
		fields = append(fields, camera.FieldAddress)
	}
	if m.is_working != nil {
		fields = append(fields, camera.FieldIsWorking)
	}
	if m.district != nil {
		fields = append(fields, camera.FieldDistrict)
	}
	if m.police_station != nil {
		fields = append(fields, camera.FieldPoliceStationID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CameraMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case camera.FieldCreatedAt:
		return m.CreatedAt()
	case camera.FieldUpdatedAt:
		return m.UpdatedAt()
	case camera.FieldName:
		return m.Name()
	case camera.FieldModel:
		return m.Model()
	case camera.FieldImei:
		return m.Imei()
	case camera.FieldLocation:
		return m.Location()
	case camera.FieldActive:
		return m.Active()
	case camera.FieldAddress:
		return m.Address()
	case camera.FieldIsWorking:
		return m.IsWorking()
	case camera.FieldDistrict:
		return m.District()
	case camera.FieldPoliceStationID:
		return m.PoliceStationID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CameraMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case camera.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case camera.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case camera.FieldName:
		return m.OldName(ctx)
	case camera.FieldModel:
		return m.OldModel(ctx)
	case camera.FieldImei:
		return m.OldImei(ctx)
	case camera.FieldLocation:
		return m.OldLocation(ctx)
	case camera.FieldActive:
		return m.OldActive(ctx)
	case camera.FieldAddress:
		return m.OldAddress(ctx)
	case camera.FieldIsWorking:
		return m.OldIsWorking(ctx)
	case camera.FieldDistrict:
		return m.OldDistrict(ctx)
	case camera.FieldPoliceStationID:
		return m.OldPoliceStationID(ctx)
	}
	return nil, fmt.Errorf("unknown Camera field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CameraMutation) SetField(name string, value ent.Value) error {
	switch name {
	case camera.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case camera.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case camera.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case camera.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case camera.FieldImei:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImei(v)
		return nil
	case camera.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case camera.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case camera.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case camera.FieldIsWorking:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsWorking(v)
		return nil
	case camera.FieldDistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistrict(v)
		return nil
	case camera.FieldPoliceStationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoliceStationID(v)
		return nil
	}
	return fmt.Errorf("unknown Camera field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CameraMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CameraMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CameraMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Camera numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CameraMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(camera.FieldAddress) {
		fields = append(fields, camera.FieldAddress)
	}
	if m.FieldCleared(camera.FieldPoliceStationID) {
		fields = append(fields, camera.FieldPoliceStationID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CameraMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CameraMutation) ClearField(name string) error {
	switch name {
	case camera.FieldAddress:
		m.ClearAddress()
		return nil
	case camera.FieldPoliceStationID:
		m.ClearPoliceStationID()
		return nil
	}
	return fmt.Errorf("unknown Camera nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CameraMutation) ResetField(name string) error {
	switch name {
	case camera.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case camera.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case camera.FieldName:
		m.ResetName()
		return nil
	case camera.FieldModel:
		m.ResetModel()
		return nil
	case camera.FieldImei:
		m.ResetImei()
		return nil
	case camera.FieldLocation:
		m.ResetLocation()
		return nil
	case camera.FieldActive:
		m.ResetActive()
		return nil
	case camera.FieldAddress:
		m.ResetAddress()
		return nil
	case camera.FieldIsWorking:
		m.ResetIsWorking()
		return nil
	case camera.FieldDistrict:
		m.ResetDistrict()
		return nil
	case camera.FieldPoliceStationID:
		m.ResetPoliceStationID()
		return nil
	}
	return fmt.Errorf("unknown Camera field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CameraMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.police_station != nil {
		edges = append(edges, camera.EdgePoliceStation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CameraMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case camera.EdgePoliceStation:
		if id := m.police_station; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CameraMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CameraMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CameraMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpolice_station {
		edges = append(edges, camera.EdgePoliceStation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CameraMutation) EdgeCleared(name string) bool {
	switch name {
	case camera.EdgePoliceStation:
		return m.clearedpolice_station
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CameraMutation) ClearEdge(name string) error {
	switch name {
	case camera.EdgePoliceStation:
		m.ClearPoliceStation()
		return nil
	}
	return fmt.Errorf("unknown Camera unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CameraMutation) ResetEdge(name string) error {
	switch name {
	case camera.EdgePoliceStation:
		m.ResetPoliceStation()
		return nil
	}
	return fmt.Errorf("unknown Camera edge %s", name)
}

// CarMutation represents an operation that mutates the Car nodes in the graph.
type CarMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *time.Time
	updated_at            *time.Time
	make                  *string
	model                 *string
	year                  *int
	addyear               *int
	registration          *string
	color                 *string
	stolen_date           *time.Time
	fir_number            *string
	clearedFields         map[string]struct{}
	police_station        *uuid.UUID
	clearedpolice_station bool
	done                  bool
	oldValue              func(context.Context) (*Car, error)
	predicates            []predicate.Car
}

var _ ent.Mutation = (*CarMutation)(nil)

// carOption allows management of the mutation configuration using functional options.
type carOption func(*CarMutation)

// newCarMutation creates new mutation for the Car entity.
func newCarMutation(c config, op Op, opts ...carOption) *CarMutation {
	m := &CarMutation{
		config:        c,
		op:            op,
		typ:           TypeCar,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCarID sets the ID field of the mutation.
func withCarID(id uuid.UUID) carOption {
	return func(m *CarMutation) {
		var (
			err   error
			once  sync.Once
			value *Car
		)
		m.oldValue = func(ctx context.Context) (*Car, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Car.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCar sets the old Car of the mutation.
func withCar(node *Car) carOption {
	return func(m *CarMutation) {
		m.oldValue = func(context.Context) (*Car, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CarMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CarMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Car entities.
func (m *CarMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CarMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CarMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Car.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CarMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CarMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CarMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CarMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CarMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CarMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMake sets the "make" field.
func (m *CarMutation) SetMake(s string) {
	m.make = &s
}

// Make returns the value of the "make" field in the mutation.
func (m *CarMutation) Make() (r string, exists bool) {
	v := m.make
	if v == nil {
		return
	}
	return *v, true
}

// OldMake returns the old "make" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldMake(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMake is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMake requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMake: %w", err)
	}
	return oldValue.Make, nil
}

// ClearMake clears the value of the "make" field.
func (m *CarMutation) ClearMake() {
	m.make = nil
	m.clearedFields[car.FieldMake] = struct{}{}
}

// MakeCleared returns if the "make" field was cleared in this mutation.
func (m *CarMutation) MakeCleared() bool {
	_, ok := m.clearedFields[car.FieldMake]
	return ok
}

// ResetMake resets all changes to the "make" field.
func (m *CarMutation) ResetMake() {
	m.make = nil
	delete(m.clearedFields, car.FieldMake)
}

// SetModel sets the "model" field.
func (m *CarMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *CarMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *CarMutation) ClearModel() {
	m.model = nil
	m.clearedFields[car.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *CarMutation) ModelCleared() bool {
	_, ok := m.clearedFields[car.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *CarMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, car.FieldModel)
}

// SetYear sets the "year" field.
func (m *CarMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *CarMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *CarMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *CarMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ClearYear clears the value of the "year" field.
func (m *CarMutation) ClearYear() {
	m.year = nil
	m.addyear = nil
	m.clearedFields[car.FieldYear] = struct{}{}
}

// YearCleared returns if the "year" field was cleared in this mutation.
func (m *CarMutation) YearCleared() bool {
	_, ok := m.clearedFields[car.FieldYear]
	return ok
}

// ResetYear resets all changes to the "year" field.
func (m *CarMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
	delete(m.clearedFields, car.FieldYear)
}

// SetRegistration sets the "registration" field.
func (m *CarMutation) SetRegistration(s string) {
	m.registration = &s
}

// Registration returns the value of the "registration" field in the mutation.
func (m *CarMutation) Registration() (r string, exists bool) {
	v := m.registration
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistration returns the old "registration" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldRegistration(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegistration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegistration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistration: %w", err)
	}
	return oldValue.Registration, nil
}

// ResetRegistration resets all changes to the "registration" field.
func (m *CarMutation) ResetRegistration() {
	m.registration = nil
}

// SetColor sets the "color" field.
func (m *CarMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *CarMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ClearColor clears the value of the "color" field.
func (m *CarMutation) ClearColor() {
	m.color = nil
	m.clearedFields[car.FieldColor] = struct{}{}
}

// ColorCleared returns if the "color" field was cleared in this mutation.
func (m *CarMutation) ColorCleared() bool {
	_, ok := m.clearedFields[car.FieldColor]
	return ok
}

// ResetColor resets all changes to the "color" field.
func (m *CarMutation) ResetColor() {
	m.color = nil
	delete(m.clearedFields, car.FieldColor)
}

// SetPoliceStationID sets the "police_station_id" field.
func (m *CarMutation) SetPoliceStationID(u uuid.UUID) {
	m.police_station = &u
}

// PoliceStationID returns the value of the "police_station_id" field in the mutation.
func (m *CarMutation) PoliceStationID() (r uuid.UUID, exists bool) {
	v := m.police_station
	if v == nil {
		return
	}
	return *v, true
}

// OldPoliceStationID returns the old "police_station_id" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldPoliceStationID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoliceStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoliceStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoliceStationID: %w", err)
	}
	return oldValue.PoliceStationID, nil
}

// ClearPoliceStationID clears the value of the "police_station_id" field.
func (m *CarMutation) ClearPoliceStationID() {
	m.police_station = nil
	m.clearedFields[car.FieldPoliceStationID] = struct{}{}
}

// PoliceStationIDCleared returns if the "police_station_id" field was cleared in this mutation.
func (m *CarMutation) PoliceStationIDCleared() bool {
	_, ok := m.clearedFields[car.FieldPoliceStationID]
	return ok
}

// ResetPoliceStationID resets all changes to the "police_station_id" field.
func (m *CarMutation) ResetPoliceStationID() {
	m.police_station = nil
	delete(m.clearedFields, car.FieldPoliceStationID)
}

// SetStolenDate sets the "stolen_date" field.
func (m *CarMutation) SetStolenDate(t time.Time) {
	m.stolen_date = &t
}

// StolenDate returns the value of the "stolen_date" field in the mutation.
func (m *CarMutation) StolenDate() (r time.Time, exists bool) {
	v := m.stolen_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStolenDate returns the old "stolen_date" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldStolenDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStolenDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStolenDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStolenDate: %w", err)
	}
	return oldValue.StolenDate, nil
}

// ClearStolenDate clears the value of the "stolen_date" field.
func (m *CarMutation) ClearStolenDate() {
	m.stolen_date = nil
	m.clearedFields[car.FieldStolenDate] = struct{}{}
}

// StolenDateCleared returns if the "stolen_date" field was cleared in this mutation.
func (m *CarMutation) StolenDateCleared() bool {
	_, ok := m.clearedFields[car.FieldStolenDate]
	return ok
}

// ResetStolenDate resets all changes to the "stolen_date" field.
func (m *CarMutation) ResetStolenDate() {
	m.stolen_date = nil
	delete(m.clearedFields, car.FieldStolenDate)
}

// SetFirNumber sets the "fir_number" field.
func (m *CarMutation) SetFirNumber(s string) {
	m.fir_number = &s
}

// FirNumber returns the value of the "fir_number" field in the mutation.
func (m *CarMutation) FirNumber() (r string, exists bool) {
	v := m.fir_number
	if v == nil {
		return
	}
	return *v, true
}

// OldFirNumber returns the old "fir_number" field's value of the Car entity.
// If the Car object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CarMutation) OldFirNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirNumber: %w", err)
	}
	return oldValue.FirNumber, nil
}

// ClearFirNumber clears the value of the "fir_number" field.
func (m *CarMutation) ClearFirNumber() {
	m.fir_number = nil
	m.clearedFields[car.FieldFirNumber] = struct{}{}
}

// FirNumberCleared returns if the "fir_number" field was cleared in this mutation.
func (m *CarMutation) FirNumberCleared() bool {
	_, ok := m.clearedFields[car.FieldFirNumber]
	return ok
}

// ResetFirNumber resets all changes to the "fir_number" field.
func (m *CarMutation) ResetFirNumber() {
	m.fir_number = nil
	delete(m.clearedFields, car.FieldFirNumber)
}

// ClearPoliceStation clears the "police_station" edge to the PoliceStation entity.
func (m *CarMutation) ClearPoliceStation() {
	m.clearedpolice_station = true
	m.clearedFields[car.FieldPoliceStationID] = struct{}{}
}

// PoliceStationCleared reports if the "police_station" edge to the PoliceStation entity was cleared.
func (m *CarMutation) PoliceStationCleared() bool {
	return m.PoliceStationIDCleared() || m.clearedpolice_station
}

// PoliceStationIDs returns the "police_station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoliceStationID instead. It exists only for internal usage by the builders.
func (m *CarMutation) PoliceStationIDs() (ids []uuid.UUID) {
	if id := m.police_station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoliceStation resets all changes to the "police_station" edge.
func (m *CarMutation) ResetPoliceStation() {
	m.police_station = nil
	m.clearedpolice_station = false
}

// Where appends a list predicates to the CarMutation builder.
func (m *CarMutation) Where(ps ...predicate.Car) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CarMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CarMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Car, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CarMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CarMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Car).
func (m *CarMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CarMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, car.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, car.FieldUpdatedAt)
	}
	if m.make != nil {
		fields = append(fields, car.FieldMake)
	}
	if m.model != nil {
		fields = append(fields, car.FieldModel)
	}
	if m.year != nil {
		fields = append(fields, car.FieldYear)
	}
	if m.registration != nil {
		fields = append(fields, car.FieldRegistration)
	}
	if m.color != nil {
		fields = append(fields, car.FieldColor)
	}
	if m.police_station != nil {
		fields = append(fields, car.FieldPoliceStationID)
	}
	if m.stolen_date != nil {
		fields = append(fields, car.FieldStolenDate)
	}
	if m.fir_number != nil {
		fields = append(fields, car.FieldFirNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CarMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case car.FieldCreatedAt:
		return m.CreatedAt()
	case car.FieldUpdatedAt:
		return m.UpdatedAt()
	case car.FieldMake:
		return m.Make()
	case car.FieldModel:
		return m.Model()
	case car.FieldYear:
		return m.Year()
	case car.FieldRegistration:
		return m.Registration()
	case car.FieldColor:
		return m.Color()
	case car.FieldPoliceStationID:
		return m.PoliceStationID()
	case car.FieldStolenDate:
		return m.StolenDate()
	case car.FieldFirNumber:
		return m.FirNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CarMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case car.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case car.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case car.FieldMake:
		return m.OldMake(ctx)
	case car.FieldModel:
		return m.OldModel(ctx)
	case car.FieldYear:
		return m.OldYear(ctx)
	case car.FieldRegistration:
		return m.OldRegistration(ctx)
	case car.FieldColor:
		return m.OldColor(ctx)
	case car.FieldPoliceStationID:
		return m.OldPoliceStationID(ctx)
	case car.FieldStolenDate:
		return m.OldStolenDate(ctx)
	case car.FieldFirNumber:
		return m.OldFirNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Car field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CarMutation) SetField(name string, value ent.Value) error {
	switch name {
	case car.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case car.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case car.FieldMake:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMake(v)
		return nil
	case car.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case car.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case car.FieldRegistration:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistration(v)
		return nil
	case car.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case car.FieldPoliceStationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoliceStationID(v)
		return nil
	case car.FieldStolenDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStolenDate(v)
		return nil
	case car.FieldFirNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Car field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CarMutation) AddedFields() []string {
	var fields []string
	if m.addyear != nil {
		fields = append(fields, car.FieldYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CarMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case car.FieldYear:
		return m.AddedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CarMutation) AddField(name string, value ent.Value) error {
	switch name {
	case car.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	}
	return fmt.Errorf("unknown Car numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CarMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(car.FieldMake) {
		fields = append(fields, car.FieldMake)
	}
	if m.FieldCleared(car.FieldModel) {
		fields = append(fields, car.FieldModel)
	}
	if m.FieldCleared(car.FieldYear) {
		fields = append(fields, car.FieldYear)
	}
	if m.FieldCleared(car.FieldColor) {
		fields = append(fields, car.FieldColor)
	}
	if m.FieldCleared(car.FieldPoliceStationID) {
		fields = append(fields, car.FieldPoliceStationID)
	}
	if m.FieldCleared(car.FieldStolenDate) {
		fields = append(fields, car.FieldStolenDate)
	}
	if m.FieldCleared(car.FieldFirNumber) {
		fields = append(fields, car.FieldFirNumber)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CarMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CarMutation) ClearField(name string) error {
	switch name {
	case car.FieldMake:
		m.ClearMake()
		return nil
	case car.FieldModel:
		m.ClearModel()
		return nil
	case car.FieldYear:
		m.ClearYear()
		return nil
	case car.FieldColor:
		m.ClearColor()
		return nil
	case car.FieldPoliceStationID:
		m.ClearPoliceStationID()
		return nil
	case car.FieldStolenDate:
		m.ClearStolenDate()
		return nil
	case car.FieldFirNumber:
		m.ClearFirNumber()
		return nil
	}
	return fmt.Errorf("unknown Car nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CarMutation) ResetField(name string) error {
	switch name {
	case car.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case car.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case car.FieldMake:
		m.ResetMake()
		return nil
	case car.FieldModel:
		m.ResetModel()
		return nil
	case car.FieldYear:
		m.ResetYear()
		return nil
	case car.FieldRegistration:
		m.ResetRegistration()
		return nil
	case car.FieldColor:
		m.ResetColor()
		return nil
	case car.FieldPoliceStationID:
		m.ResetPoliceStationID()
		return nil
	case car.FieldStolenDate:
		m.ResetStolenDate()
		return nil
	case car.FieldFirNumber:
		m.ResetFirNumber()
		return nil
	}
	return fmt.Errorf("unknown Car field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CarMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.police_station != nil {
		edges = append(edges, car.EdgePoliceStation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CarMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case car.EdgePoliceStation:
		if id := m.police_station; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CarMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CarMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CarMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpolice_station {
		edges = append(edges, car.EdgePoliceStation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CarMutation) EdgeCleared(name string) bool {
	switch name {
	case car.EdgePoliceStation:
		return m.clearedpolice_station
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CarMutation) ClearEdge(name string) error {
	switch name {
	case car.EdgePoliceStation:
		m.ClearPoliceStation()
		return nil
	}
	return fmt.Errorf("unknown Car unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CarMutation) ResetEdge(name string) error {
	switch name {
	case car.EdgePoliceStation:
		m.ResetPoliceStation()
		return nil
	}
	return fmt.Errorf("unknown Car edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	created_at                 *time.Time
	updated_at                 *time.Time
	plate_bounding_box         *[]int
	appendplate_bounding_box   []int
	plate_channel              *int
	addplate_channel           *int
	plate_confidence           *int
	addplate_confidence        *int
	plate_is_exist             *bool
	plate_color                *string
	plate_number               *string
	plate_type                 *string
	plate_region               *string
	plate_upload_num           *int
	addplate_upload_num        *int
	snap_accurate_time         *string
	snap_allow_user            *bool
	snap_allow_user_end_time   *string
	snap_dst_tune              *int
	addsnap_dst_tune           *int
	snap_defence_code          *string
	snap_device_id             *string
	snap_direction             *string
	snap_in_car_people_num     *int
	addsnap_in_car_people_num  *int
	snap_lan_no                *int
	addsnap_lan_no             *int
	snap_open_strobe           *bool
	snap_snap_time             *string
	snap_time_zone             *int
	addsnap_time_zone          *int
	vehicle_speed              *int
	addvehicle_speed           *int
	vehicle_bounding_box       *[]int
	appendvehicle_bounding_box []int
	vehicle_color              *string
	vehicle_series             *string
	vehicle_type               *string
	clearedFields              map[string]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Event, error)
	predicates                 []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id uuid.UUID) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EventMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EventMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EventMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (m *EventMutation) SetPlateBoundingBox(i []int) {
	m.plate_bounding_box = &i
	m.appendplate_bounding_box = nil
}

// PlateBoundingBox returns the value of the "plate_bounding_box" field in the mutation.
func (m *EventMutation) PlateBoundingBox() (r []int, exists bool) {
	v := m.plate_bounding_box
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateBoundingBox returns the old "plate_bounding_box" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateBoundingBox(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateBoundingBox is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateBoundingBox requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateBoundingBox: %w", err)
	}
	return oldValue.PlateBoundingBox, nil
}

// AppendPlateBoundingBox adds i to the "plate_bounding_box" field.
func (m *EventMutation) AppendPlateBoundingBox(i []int) {
	m.appendplate_bounding_box = append(m.appendplate_bounding_box, i...)
}

// AppendedPlateBoundingBox returns the list of values that were appended to the "plate_bounding_box" field in this mutation.
func (m *EventMutation) AppendedPlateBoundingBox() ([]int, bool) {
	if len(m.appendplate_bounding_box) == 0 {
		return nil, false
	}
	return m.appendplate_bounding_box, true
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (m *EventMutation) ClearPlateBoundingBox() {
	m.plate_bounding_box = nil
	m.appendplate_bounding_box = nil
	m.clearedFields[event.FieldPlateBoundingBox] = struct{}{}
}

// PlateBoundingBoxCleared returns if the "plate_bounding_box" field was cleared in this mutation.
func (m *EventMutation) PlateBoundingBoxCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateBoundingBox]
	return ok
}

// ResetPlateBoundingBox resets all changes to the "plate_bounding_box" field.
func (m *EventMutation) ResetPlateBoundingBox() {
	m.plate_bounding_box = nil
	m.appendplate_bounding_box = nil
	delete(m.clearedFields, event.FieldPlateBoundingBox)
}

// SetPlateChannel sets the "plate_channel" field.
func (m *EventMutation) SetPlateChannel(i int) {
	m.plate_channel = &i
	m.addplate_channel = nil
}

// PlateChannel returns the value of the "plate_channel" field in the mutation.
func (m *EventMutation) PlateChannel() (r int, exists bool) {
	v := m.plate_channel
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateChannel returns the old "plate_channel" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateChannel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateChannel: %w", err)
	}
	return oldValue.PlateChannel, nil
}

// AddPlateChannel adds i to the "plate_channel" field.
func (m *EventMutation) AddPlateChannel(i int) {
	if m.addplate_channel != nil {
		*m.addplate_channel += i
	} else {
		m.addplate_channel = &i
	}
}

// AddedPlateChannel returns the value that was added to the "plate_channel" field in this mutation.
func (m *EventMutation) AddedPlateChannel() (r int, exists bool) {
	v := m.addplate_channel
	if v == nil {
		return
	}
	return *v, true
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (m *EventMutation) ClearPlateChannel() {
	m.plate_channel = nil
	m.addplate_channel = nil
	m.clearedFields[event.FieldPlateChannel] = struct{}{}
}

// PlateChannelCleared returns if the "plate_channel" field was cleared in this mutation.
func (m *EventMutation) PlateChannelCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateChannel]
	return ok
}

// ResetPlateChannel resets all changes to the "plate_channel" field.
func (m *EventMutation) ResetPlateChannel() {
	m.plate_channel = nil
	m.addplate_channel = nil
	delete(m.clearedFields, event.FieldPlateChannel)
}

// SetPlateConfidence sets the "plate_confidence" field.
func (m *EventMutation) SetPlateConfidence(i int) {
	m.plate_confidence = &i
	m.addplate_confidence = nil
}

// PlateConfidence returns the value of the "plate_confidence" field in the mutation.
func (m *EventMutation) PlateConfidence() (r int, exists bool) {
	v := m.plate_confidence
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateConfidence returns the old "plate_confidence" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateConfidence(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateConfidence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateConfidence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateConfidence: %w", err)
	}
	return oldValue.PlateConfidence, nil
}

// AddPlateConfidence adds i to the "plate_confidence" field.
func (m *EventMutation) AddPlateConfidence(i int) {
	if m.addplate_confidence != nil {
		*m.addplate_confidence += i
	} else {
		m.addplate_confidence = &i
	}
}

// AddedPlateConfidence returns the value that was added to the "plate_confidence" field in this mutation.
func (m *EventMutation) AddedPlateConfidence() (r int, exists bool) {
	v := m.addplate_confidence
	if v == nil {
		return
	}
	return *v, true
}

// ClearPlateConfidence clears the value of the "plate_confidence" field.
func (m *EventMutation) ClearPlateConfidence() {
	m.plate_confidence = nil
	m.addplate_confidence = nil
	m.clearedFields[event.FieldPlateConfidence] = struct{}{}
}

// PlateConfidenceCleared returns if the "plate_confidence" field was cleared in this mutation.
func (m *EventMutation) PlateConfidenceCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateConfidence]
	return ok
}

// ResetPlateConfidence resets all changes to the "plate_confidence" field.
func (m *EventMutation) ResetPlateConfidence() {
	m.plate_confidence = nil
	m.addplate_confidence = nil
	delete(m.clearedFields, event.FieldPlateConfidence)
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (m *EventMutation) SetPlateIsExist(b bool) {
	m.plate_is_exist = &b
}

// PlateIsExist returns the value of the "plate_is_exist" field in the mutation.
func (m *EventMutation) PlateIsExist() (r bool, exists bool) {
	v := m.plate_is_exist
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateIsExist returns the old "plate_is_exist" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateIsExist(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateIsExist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateIsExist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateIsExist: %w", err)
	}
	return oldValue.PlateIsExist, nil
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (m *EventMutation) ClearPlateIsExist() {
	m.plate_is_exist = nil
	m.clearedFields[event.FieldPlateIsExist] = struct{}{}
}

// PlateIsExistCleared returns if the "plate_is_exist" field was cleared in this mutation.
func (m *EventMutation) PlateIsExistCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateIsExist]
	return ok
}

// ResetPlateIsExist resets all changes to the "plate_is_exist" field.
func (m *EventMutation) ResetPlateIsExist() {
	m.plate_is_exist = nil
	delete(m.clearedFields, event.FieldPlateIsExist)
}

// SetPlateColor sets the "plate_color" field.
func (m *EventMutation) SetPlateColor(s string) {
	m.plate_color = &s
}

// PlateColor returns the value of the "plate_color" field in the mutation.
func (m *EventMutation) PlateColor() (r string, exists bool) {
	v := m.plate_color
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateColor returns the old "plate_color" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateColor: %w", err)
	}
	return oldValue.PlateColor, nil
}

// ClearPlateColor clears the value of the "plate_color" field.
func (m *EventMutation) ClearPlateColor() {
	m.plate_color = nil
	m.clearedFields[event.FieldPlateColor] = struct{}{}
}

// PlateColorCleared returns if the "plate_color" field was cleared in this mutation.
func (m *EventMutation) PlateColorCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateColor]
	return ok
}

// ResetPlateColor resets all changes to the "plate_color" field.
func (m *EventMutation) ResetPlateColor() {
	m.plate_color = nil
	delete(m.clearedFields, event.FieldPlateColor)
}

// SetPlateNumber sets the "plate_number" field.
func (m *EventMutation) SetPlateNumber(s string) {
	m.plate_number = &s
}

// PlateNumber returns the value of the "plate_number" field in the mutation.
func (m *EventMutation) PlateNumber() (r string, exists bool) {
	v := m.plate_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateNumber returns the old "plate_number" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateNumber: %w", err)
	}
	return oldValue.PlateNumber, nil
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (m *EventMutation) ClearPlateNumber() {
	m.plate_number = nil
	m.clearedFields[event.FieldPlateNumber] = struct{}{}
}

// PlateNumberCleared returns if the "plate_number" field was cleared in this mutation.
func (m *EventMutation) PlateNumberCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateNumber]
	return ok
}

// ResetPlateNumber resets all changes to the "plate_number" field.
func (m *EventMutation) ResetPlateNumber() {
	m.plate_number = nil
	delete(m.clearedFields, event.FieldPlateNumber)
}

// SetPlateType sets the "plate_type" field.
func (m *EventMutation) SetPlateType(s string) {
	m.plate_type = &s
}

// PlateType returns the value of the "plate_type" field in the mutation.
func (m *EventMutation) PlateType() (r string, exists bool) {
	v := m.plate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateType returns the old "plate_type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateType: %w", err)
	}
	return oldValue.PlateType, nil
}

// ClearPlateType clears the value of the "plate_type" field.
func (m *EventMutation) ClearPlateType() {
	m.plate_type = nil
	m.clearedFields[event.FieldPlateType] = struct{}{}
}

// PlateTypeCleared returns if the "plate_type" field was cleared in this mutation.
func (m *EventMutation) PlateTypeCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateType]
	return ok
}

// ResetPlateType resets all changes to the "plate_type" field.
func (m *EventMutation) ResetPlateType() {
	m.plate_type = nil
	delete(m.clearedFields, event.FieldPlateType)
}

// SetPlateRegion sets the "plate_region" field.
func (m *EventMutation) SetPlateRegion(s string) {
	m.plate_region = &s
}

// PlateRegion returns the value of the "plate_region" field in the mutation.
func (m *EventMutation) PlateRegion() (r string, exists bool) {
	v := m.plate_region
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateRegion returns the old "plate_region" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateRegion: %w", err)
	}
	return oldValue.PlateRegion, nil
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (m *EventMutation) ClearPlateRegion() {
	m.plate_region = nil
	m.clearedFields[event.FieldPlateRegion] = struct{}{}
}

// PlateRegionCleared returns if the "plate_region" field was cleared in this mutation.
func (m *EventMutation) PlateRegionCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateRegion]
	return ok
}

// ResetPlateRegion resets all changes to the "plate_region" field.
func (m *EventMutation) ResetPlateRegion() {
	m.plate_region = nil
	delete(m.clearedFields, event.FieldPlateRegion)
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (m *EventMutation) SetPlateUploadNum(i int) {
	m.plate_upload_num = &i
	m.addplate_upload_num = nil
}

// PlateUploadNum returns the value of the "plate_upload_num" field in the mutation.
func (m *EventMutation) PlateUploadNum() (r int, exists bool) {
	v := m.plate_upload_num
	if v == nil {
		return
	}
	return *v, true
}

// OldPlateUploadNum returns the old "plate_upload_num" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPlateUploadNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlateUploadNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlateUploadNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlateUploadNum: %w", err)
	}
	return oldValue.PlateUploadNum, nil
}

// AddPlateUploadNum adds i to the "plate_upload_num" field.
func (m *EventMutation) AddPlateUploadNum(i int) {
	if m.addplate_upload_num != nil {
		*m.addplate_upload_num += i
	} else {
		m.addplate_upload_num = &i
	}
}

// AddedPlateUploadNum returns the value that was added to the "plate_upload_num" field in this mutation.
func (m *EventMutation) AddedPlateUploadNum() (r int, exists bool) {
	v := m.addplate_upload_num
	if v == nil {
		return
	}
	return *v, true
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (m *EventMutation) ClearPlateUploadNum() {
	m.plate_upload_num = nil
	m.addplate_upload_num = nil
	m.clearedFields[event.FieldPlateUploadNum] = struct{}{}
}

// PlateUploadNumCleared returns if the "plate_upload_num" field was cleared in this mutation.
func (m *EventMutation) PlateUploadNumCleared() bool {
	_, ok := m.clearedFields[event.FieldPlateUploadNum]
	return ok
}

// ResetPlateUploadNum resets all changes to the "plate_upload_num" field.
func (m *EventMutation) ResetPlateUploadNum() {
	m.plate_upload_num = nil
	m.addplate_upload_num = nil
	delete(m.clearedFields, event.FieldPlateUploadNum)
}

// SetSnapAccurateTime sets the "snap_accurate_time" field.
func (m *EventMutation) SetSnapAccurateTime(s string) {
	m.snap_accurate_time = &s
}

// SnapAccurateTime returns the value of the "snap_accurate_time" field in the mutation.
func (m *EventMutation) SnapAccurateTime() (r string, exists bool) {
	v := m.snap_accurate_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapAccurateTime returns the old "snap_accurate_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapAccurateTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapAccurateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapAccurateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapAccurateTime: %w", err)
	}
	return oldValue.SnapAccurateTime, nil
}

// ClearSnapAccurateTime clears the value of the "snap_accurate_time" field.
func (m *EventMutation) ClearSnapAccurateTime() {
	m.snap_accurate_time = nil
	m.clearedFields[event.FieldSnapAccurateTime] = struct{}{}
}

// SnapAccurateTimeCleared returns if the "snap_accurate_time" field was cleared in this mutation.
func (m *EventMutation) SnapAccurateTimeCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapAccurateTime]
	return ok
}

// ResetSnapAccurateTime resets all changes to the "snap_accurate_time" field.
func (m *EventMutation) ResetSnapAccurateTime() {
	m.snap_accurate_time = nil
	delete(m.clearedFields, event.FieldSnapAccurateTime)
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (m *EventMutation) SetSnapAllowUser(b bool) {
	m.snap_allow_user = &b
}

// SnapAllowUser returns the value of the "snap_allow_user" field in the mutation.
func (m *EventMutation) SnapAllowUser() (r bool, exists bool) {
	v := m.snap_allow_user
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapAllowUser returns the old "snap_allow_user" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapAllowUser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapAllowUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapAllowUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapAllowUser: %w", err)
	}
	return oldValue.SnapAllowUser, nil
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (m *EventMutation) ClearSnapAllowUser() {
	m.snap_allow_user = nil
	m.clearedFields[event.FieldSnapAllowUser] = struct{}{}
}

// SnapAllowUserCleared returns if the "snap_allow_user" field was cleared in this mutation.
func (m *EventMutation) SnapAllowUserCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapAllowUser]
	return ok
}

// ResetSnapAllowUser resets all changes to the "snap_allow_user" field.
func (m *EventMutation) ResetSnapAllowUser() {
	m.snap_allow_user = nil
	delete(m.clearedFields, event.FieldSnapAllowUser)
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (m *EventMutation) SetSnapAllowUserEndTime(s string) {
	m.snap_allow_user_end_time = &s
}

// SnapAllowUserEndTime returns the value of the "snap_allow_user_end_time" field in the mutation.
func (m *EventMutation) SnapAllowUserEndTime() (r string, exists bool) {
	v := m.snap_allow_user_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapAllowUserEndTime returns the old "snap_allow_user_end_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapAllowUserEndTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapAllowUserEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapAllowUserEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapAllowUserEndTime: %w", err)
	}
	return oldValue.SnapAllowUserEndTime, nil
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (m *EventMutation) ClearSnapAllowUserEndTime() {
	m.snap_allow_user_end_time = nil
	m.clearedFields[event.FieldSnapAllowUserEndTime] = struct{}{}
}

// SnapAllowUserEndTimeCleared returns if the "snap_allow_user_end_time" field was cleared in this mutation.
func (m *EventMutation) SnapAllowUserEndTimeCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapAllowUserEndTime]
	return ok
}

// ResetSnapAllowUserEndTime resets all changes to the "snap_allow_user_end_time" field.
func (m *EventMutation) ResetSnapAllowUserEndTime() {
	m.snap_allow_user_end_time = nil
	delete(m.clearedFields, event.FieldSnapAllowUserEndTime)
}

// SetSnapDstTune sets the "snap_dst_tune" field.
func (m *EventMutation) SetSnapDstTune(i int) {
	m.snap_dst_tune = &i
	m.addsnap_dst_tune = nil
}

// SnapDstTune returns the value of the "snap_dst_tune" field in the mutation.
func (m *EventMutation) SnapDstTune() (r int, exists bool) {
	v := m.snap_dst_tune
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapDstTune returns the old "snap_dst_tune" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapDstTune(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapDstTune is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapDstTune requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapDstTune: %w", err)
	}
	return oldValue.SnapDstTune, nil
}

// AddSnapDstTune adds i to the "snap_dst_tune" field.
func (m *EventMutation) AddSnapDstTune(i int) {
	if m.addsnap_dst_tune != nil {
		*m.addsnap_dst_tune += i
	} else {
		m.addsnap_dst_tune = &i
	}
}

// AddedSnapDstTune returns the value that was added to the "snap_dst_tune" field in this mutation.
func (m *EventMutation) AddedSnapDstTune() (r int, exists bool) {
	v := m.addsnap_dst_tune
	if v == nil {
		return
	}
	return *v, true
}

// ClearSnapDstTune clears the value of the "snap_dst_tune" field.
func (m *EventMutation) ClearSnapDstTune() {
	m.snap_dst_tune = nil
	m.addsnap_dst_tune = nil
	m.clearedFields[event.FieldSnapDstTune] = struct{}{}
}

// SnapDstTuneCleared returns if the "snap_dst_tune" field was cleared in this mutation.
func (m *EventMutation) SnapDstTuneCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapDstTune]
	return ok
}

// ResetSnapDstTune resets all changes to the "snap_dst_tune" field.
func (m *EventMutation) ResetSnapDstTune() {
	m.snap_dst_tune = nil
	m.addsnap_dst_tune = nil
	delete(m.clearedFields, event.FieldSnapDstTune)
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (m *EventMutation) SetSnapDefenceCode(s string) {
	m.snap_defence_code = &s
}

// SnapDefenceCode returns the value of the "snap_defence_code" field in the mutation.
func (m *EventMutation) SnapDefenceCode() (r string, exists bool) {
	v := m.snap_defence_code
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapDefenceCode returns the old "snap_defence_code" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapDefenceCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapDefenceCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapDefenceCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapDefenceCode: %w", err)
	}
	return oldValue.SnapDefenceCode, nil
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (m *EventMutation) ClearSnapDefenceCode() {
	m.snap_defence_code = nil
	m.clearedFields[event.FieldSnapDefenceCode] = struct{}{}
}

// SnapDefenceCodeCleared returns if the "snap_defence_code" field was cleared in this mutation.
func (m *EventMutation) SnapDefenceCodeCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapDefenceCode]
	return ok
}

// ResetSnapDefenceCode resets all changes to the "snap_defence_code" field.
func (m *EventMutation) ResetSnapDefenceCode() {
	m.snap_defence_code = nil
	delete(m.clearedFields, event.FieldSnapDefenceCode)
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (m *EventMutation) SetSnapDeviceID(s string) {
	m.snap_device_id = &s
}

// SnapDeviceID returns the value of the "snap_device_id" field in the mutation.
func (m *EventMutation) SnapDeviceID() (r string, exists bool) {
	v := m.snap_device_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapDeviceID returns the old "snap_device_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapDeviceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapDeviceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapDeviceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapDeviceID: %w", err)
	}
	return oldValue.SnapDeviceID, nil
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (m *EventMutation) ClearSnapDeviceID() {
	m.snap_device_id = nil
	m.clearedFields[event.FieldSnapDeviceID] = struct{}{}
}

// SnapDeviceIDCleared returns if the "snap_device_id" field was cleared in this mutation.
func (m *EventMutation) SnapDeviceIDCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapDeviceID]
	return ok
}

// ResetSnapDeviceID resets all changes to the "snap_device_id" field.
func (m *EventMutation) ResetSnapDeviceID() {
	m.snap_device_id = nil
	delete(m.clearedFields, event.FieldSnapDeviceID)
}

// SetSnapDirection sets the "snap_direction" field.
func (m *EventMutation) SetSnapDirection(s string) {
	m.snap_direction = &s
}

// SnapDirection returns the value of the "snap_direction" field in the mutation.
func (m *EventMutation) SnapDirection() (r string, exists bool) {
	v := m.snap_direction
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapDirection returns the old "snap_direction" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapDirection(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapDirection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapDirection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapDirection: %w", err)
	}
	return oldValue.SnapDirection, nil
}

// ClearSnapDirection clears the value of the "snap_direction" field.
func (m *EventMutation) ClearSnapDirection() {
	m.snap_direction = nil
	m.clearedFields[event.FieldSnapDirection] = struct{}{}
}

// SnapDirectionCleared returns if the "snap_direction" field was cleared in this mutation.
func (m *EventMutation) SnapDirectionCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapDirection]
	return ok
}

// ResetSnapDirection resets all changes to the "snap_direction" field.
func (m *EventMutation) ResetSnapDirection() {
	m.snap_direction = nil
	delete(m.clearedFields, event.FieldSnapDirection)
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (m *EventMutation) SetSnapInCarPeopleNum(i int) {
	m.snap_in_car_people_num = &i
	m.addsnap_in_car_people_num = nil
}

// SnapInCarPeopleNum returns the value of the "snap_in_car_people_num" field in the mutation.
func (m *EventMutation) SnapInCarPeopleNum() (r int, exists bool) {
	v := m.snap_in_car_people_num
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapInCarPeopleNum returns the old "snap_in_car_people_num" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapInCarPeopleNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapInCarPeopleNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapInCarPeopleNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapInCarPeopleNum: %w", err)
	}
	return oldValue.SnapInCarPeopleNum, nil
}

// AddSnapInCarPeopleNum adds i to the "snap_in_car_people_num" field.
func (m *EventMutation) AddSnapInCarPeopleNum(i int) {
	if m.addsnap_in_car_people_num != nil {
		*m.addsnap_in_car_people_num += i
	} else {
		m.addsnap_in_car_people_num = &i
	}
}

// AddedSnapInCarPeopleNum returns the value that was added to the "snap_in_car_people_num" field in this mutation.
func (m *EventMutation) AddedSnapInCarPeopleNum() (r int, exists bool) {
	v := m.addsnap_in_car_people_num
	if v == nil {
		return
	}
	return *v, true
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (m *EventMutation) ClearSnapInCarPeopleNum() {
	m.snap_in_car_people_num = nil
	m.addsnap_in_car_people_num = nil
	m.clearedFields[event.FieldSnapInCarPeopleNum] = struct{}{}
}

// SnapInCarPeopleNumCleared returns if the "snap_in_car_people_num" field was cleared in this mutation.
func (m *EventMutation) SnapInCarPeopleNumCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapInCarPeopleNum]
	return ok
}

// ResetSnapInCarPeopleNum resets all changes to the "snap_in_car_people_num" field.
func (m *EventMutation) ResetSnapInCarPeopleNum() {
	m.snap_in_car_people_num = nil
	m.addsnap_in_car_people_num = nil
	delete(m.clearedFields, event.FieldSnapInCarPeopleNum)
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (m *EventMutation) SetSnapLanNo(i int) {
	m.snap_lan_no = &i
	m.addsnap_lan_no = nil
}

// SnapLanNo returns the value of the "snap_lan_no" field in the mutation.
func (m *EventMutation) SnapLanNo() (r int, exists bool) {
	v := m.snap_lan_no
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapLanNo returns the old "snap_lan_no" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapLanNo(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapLanNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapLanNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapLanNo: %w", err)
	}
	return oldValue.SnapLanNo, nil
}

// AddSnapLanNo adds i to the "snap_lan_no" field.
func (m *EventMutation) AddSnapLanNo(i int) {
	if m.addsnap_lan_no != nil {
		*m.addsnap_lan_no += i
	} else {
		m.addsnap_lan_no = &i
	}
}

// AddedSnapLanNo returns the value that was added to the "snap_lan_no" field in this mutation.
func (m *EventMutation) AddedSnapLanNo() (r int, exists bool) {
	v := m.addsnap_lan_no
	if v == nil {
		return
	}
	return *v, true
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (m *EventMutation) ClearSnapLanNo() {
	m.snap_lan_no = nil
	m.addsnap_lan_no = nil
	m.clearedFields[event.FieldSnapLanNo] = struct{}{}
}

// SnapLanNoCleared returns if the "snap_lan_no" field was cleared in this mutation.
func (m *EventMutation) SnapLanNoCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapLanNo]
	return ok
}

// ResetSnapLanNo resets all changes to the "snap_lan_no" field.
func (m *EventMutation) ResetSnapLanNo() {
	m.snap_lan_no = nil
	m.addsnap_lan_no = nil
	delete(m.clearedFields, event.FieldSnapLanNo)
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (m *EventMutation) SetSnapOpenStrobe(b bool) {
	m.snap_open_strobe = &b
}

// SnapOpenStrobe returns the value of the "snap_open_strobe" field in the mutation.
func (m *EventMutation) SnapOpenStrobe() (r bool, exists bool) {
	v := m.snap_open_strobe
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapOpenStrobe returns the old "snap_open_strobe" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapOpenStrobe(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapOpenStrobe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapOpenStrobe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapOpenStrobe: %w", err)
	}
	return oldValue.SnapOpenStrobe, nil
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (m *EventMutation) ClearSnapOpenStrobe() {
	m.snap_open_strobe = nil
	m.clearedFields[event.FieldSnapOpenStrobe] = struct{}{}
}

// SnapOpenStrobeCleared returns if the "snap_open_strobe" field was cleared in this mutation.
func (m *EventMutation) SnapOpenStrobeCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapOpenStrobe]
	return ok
}

// ResetSnapOpenStrobe resets all changes to the "snap_open_strobe" field.
func (m *EventMutation) ResetSnapOpenStrobe() {
	m.snap_open_strobe = nil
	delete(m.clearedFields, event.FieldSnapOpenStrobe)
}

// SetSnapSnapTime sets the "snap_snap_time" field.
func (m *EventMutation) SetSnapSnapTime(s string) {
	m.snap_snap_time = &s
}

// SnapSnapTime returns the value of the "snap_snap_time" field in the mutation.
func (m *EventMutation) SnapSnapTime() (r string, exists bool) {
	v := m.snap_snap_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapSnapTime returns the old "snap_snap_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapSnapTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapSnapTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapSnapTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapSnapTime: %w", err)
	}
	return oldValue.SnapSnapTime, nil
}

// ClearSnapSnapTime clears the value of the "snap_snap_time" field.
func (m *EventMutation) ClearSnapSnapTime() {
	m.snap_snap_time = nil
	m.clearedFields[event.FieldSnapSnapTime] = struct{}{}
}

// SnapSnapTimeCleared returns if the "snap_snap_time" field was cleared in this mutation.
func (m *EventMutation) SnapSnapTimeCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapSnapTime]
	return ok
}

// ResetSnapSnapTime resets all changes to the "snap_snap_time" field.
func (m *EventMutation) ResetSnapSnapTime() {
	m.snap_snap_time = nil
	delete(m.clearedFields, event.FieldSnapSnapTime)
}

// SetSnapTimeZone sets the "snap_time_zone" field.
func (m *EventMutation) SetSnapTimeZone(i int) {
	m.snap_time_zone = &i
	m.addsnap_time_zone = nil
}

// SnapTimeZone returns the value of the "snap_time_zone" field in the mutation.
func (m *EventMutation) SnapTimeZone() (r int, exists bool) {
	v := m.snap_time_zone
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapTimeZone returns the old "snap_time_zone" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSnapTimeZone(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapTimeZone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapTimeZone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapTimeZone: %w", err)
	}
	return oldValue.SnapTimeZone, nil
}

// AddSnapTimeZone adds i to the "snap_time_zone" field.
func (m *EventMutation) AddSnapTimeZone(i int) {
	if m.addsnap_time_zone != nil {
		*m.addsnap_time_zone += i
	} else {
		m.addsnap_time_zone = &i
	}
}

// AddedSnapTimeZone returns the value that was added to the "snap_time_zone" field in this mutation.
func (m *EventMutation) AddedSnapTimeZone() (r int, exists bool) {
	v := m.addsnap_time_zone
	if v == nil {
		return
	}
	return *v, true
}

// ClearSnapTimeZone clears the value of the "snap_time_zone" field.
func (m *EventMutation) ClearSnapTimeZone() {
	m.snap_time_zone = nil
	m.addsnap_time_zone = nil
	m.clearedFields[event.FieldSnapTimeZone] = struct{}{}
}

// SnapTimeZoneCleared returns if the "snap_time_zone" field was cleared in this mutation.
func (m *EventMutation) SnapTimeZoneCleared() bool {
	_, ok := m.clearedFields[event.FieldSnapTimeZone]
	return ok
}

// ResetSnapTimeZone resets all changes to the "snap_time_zone" field.
func (m *EventMutation) ResetSnapTimeZone() {
	m.snap_time_zone = nil
	m.addsnap_time_zone = nil
	delete(m.clearedFields, event.FieldSnapTimeZone)
}

// SetVehicleSpeed sets the "vehicle_speed" field.
func (m *EventMutation) SetVehicleSpeed(i int) {
	m.vehicle_speed = &i
	m.addvehicle_speed = nil
}

// VehicleSpeed returns the value of the "vehicle_speed" field in the mutation.
func (m *EventMutation) VehicleSpeed() (r int, exists bool) {
	v := m.vehicle_speed
	if v == nil {
		return
	}
	return *v, true
}

// OldVehicleSpeed returns the old "vehicle_speed" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldVehicleSpeed(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVehicleSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVehicleSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVehicleSpeed: %w", err)
	}
	return oldValue.VehicleSpeed, nil
}

// AddVehicleSpeed adds i to the "vehicle_speed" field.
func (m *EventMutation) AddVehicleSpeed(i int) {
	if m.addvehicle_speed != nil {
		*m.addvehicle_speed += i
	} else {
		m.addvehicle_speed = &i
	}
}

// AddedVehicleSpeed returns the value that was added to the "vehicle_speed" field in this mutation.
func (m *EventMutation) AddedVehicleSpeed() (r int, exists bool) {
	v := m.addvehicle_speed
	if v == nil {
		return
	}
	return *v, true
}

// ClearVehicleSpeed clears the value of the "vehicle_speed" field.
func (m *EventMutation) ClearVehicleSpeed() {
	m.vehicle_speed = nil
	m.addvehicle_speed = nil
	m.clearedFields[event.FieldVehicleSpeed] = struct{}{}
}

// VehicleSpeedCleared returns if the "vehicle_speed" field was cleared in this mutation.
func (m *EventMutation) VehicleSpeedCleared() bool {
	_, ok := m.clearedFields[event.FieldVehicleSpeed]
	return ok
}

// ResetVehicleSpeed resets all changes to the "vehicle_speed" field.
func (m *EventMutation) ResetVehicleSpeed() {
	m.vehicle_speed = nil
	m.addvehicle_speed = nil
	delete(m.clearedFields, event.FieldVehicleSpeed)
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (m *EventMutation) SetVehicleBoundingBox(i []int) {
	m.vehicle_bounding_box = &i
	m.appendvehicle_bounding_box = nil
}

// VehicleBoundingBox returns the value of the "vehicle_bounding_box" field in the mutation.
func (m *EventMutation) VehicleBoundingBox() (r []int, exists bool) {
	v := m.vehicle_bounding_box
	if v == nil {
		return
	}
	return *v, true
}

// OldVehicleBoundingBox returns the old "vehicle_bounding_box" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldVehicleBoundingBox(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVehicleBoundingBox is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVehicleBoundingBox requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVehicleBoundingBox: %w", err)
	}
	return oldValue.VehicleBoundingBox, nil
}

// AppendVehicleBoundingBox adds i to the "vehicle_bounding_box" field.
func (m *EventMutation) AppendVehicleBoundingBox(i []int) {
	m.appendvehicle_bounding_box = append(m.appendvehicle_bounding_box, i...)
}

// AppendedVehicleBoundingBox returns the list of values that were appended to the "vehicle_bounding_box" field in this mutation.
func (m *EventMutation) AppendedVehicleBoundingBox() ([]int, bool) {
	if len(m.appendvehicle_bounding_box) == 0 {
		return nil, false
	}
	return m.appendvehicle_bounding_box, true
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (m *EventMutation) ClearVehicleBoundingBox() {
	m.vehicle_bounding_box = nil
	m.appendvehicle_bounding_box = nil
	m.clearedFields[event.FieldVehicleBoundingBox] = struct{}{}
}

// VehicleBoundingBoxCleared returns if the "vehicle_bounding_box" field was cleared in this mutation.
func (m *EventMutation) VehicleBoundingBoxCleared() bool {
	_, ok := m.clearedFields[event.FieldVehicleBoundingBox]
	return ok
}

// ResetVehicleBoundingBox resets all changes to the "vehicle_bounding_box" field.
func (m *EventMutation) ResetVehicleBoundingBox() {
	m.vehicle_bounding_box = nil
	m.appendvehicle_bounding_box = nil
	delete(m.clearedFields, event.FieldVehicleBoundingBox)
}

// SetVehicleColor sets the "vehicle_color" field.
func (m *EventMutation) SetVehicleColor(s string) {
	m.vehicle_color = &s
}

// VehicleColor returns the value of the "vehicle_color" field in the mutation.
func (m *EventMutation) VehicleColor() (r string, exists bool) {
	v := m.vehicle_color
	if v == nil {
		return
	}
	return *v, true
}

// OldVehicleColor returns the old "vehicle_color" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldVehicleColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVehicleColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVehicleColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVehicleColor: %w", err)
	}
	return oldValue.VehicleColor, nil
}

// ClearVehicleColor clears the value of the "vehicle_color" field.
func (m *EventMutation) ClearVehicleColor() {
	m.vehicle_color = nil
	m.clearedFields[event.FieldVehicleColor] = struct{}{}
}

// VehicleColorCleared returns if the "vehicle_color" field was cleared in this mutation.
func (m *EventMutation) VehicleColorCleared() bool {
	_, ok := m.clearedFields[event.FieldVehicleColor]
	return ok
}

// ResetVehicleColor resets all changes to the "vehicle_color" field.
func (m *EventMutation) ResetVehicleColor() {
	m.vehicle_color = nil
	delete(m.clearedFields, event.FieldVehicleColor)
}

// SetVehicleSeries sets the "vehicle_series" field.
func (m *EventMutation) SetVehicleSeries(s string) {
	m.vehicle_series = &s
}

// VehicleSeries returns the value of the "vehicle_series" field in the mutation.
func (m *EventMutation) VehicleSeries() (r string, exists bool) {
	v := m.vehicle_series
	if v == nil {
		return
	}
	return *v, true
}

// OldVehicleSeries returns the old "vehicle_series" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldVehicleSeries(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVehicleSeries is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVehicleSeries requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVehicleSeries: %w", err)
	}
	return oldValue.VehicleSeries, nil
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (m *EventMutation) ClearVehicleSeries() {
	m.vehicle_series = nil
	m.clearedFields[event.FieldVehicleSeries] = struct{}{}
}

// VehicleSeriesCleared returns if the "vehicle_series" field was cleared in this mutation.
func (m *EventMutation) VehicleSeriesCleared() bool {
	_, ok := m.clearedFields[event.FieldVehicleSeries]
	return ok
}

// ResetVehicleSeries resets all changes to the "vehicle_series" field.
func (m *EventMutation) ResetVehicleSeries() {
	m.vehicle_series = nil
	delete(m.clearedFields, event.FieldVehicleSeries)
}

// SetVehicleType sets the "vehicle_type" field.
func (m *EventMutation) SetVehicleType(s string) {
	m.vehicle_type = &s
}

// VehicleType returns the value of the "vehicle_type" field in the mutation.
func (m *EventMutation) VehicleType() (r string, exists bool) {
	v := m.vehicle_type
	if v == nil {
		return
	}
	return *v, true
}

// OldVehicleType returns the old "vehicle_type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldVehicleType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVehicleType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVehicleType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVehicleType: %w", err)
	}
	return oldValue.VehicleType, nil
}

// ClearVehicleType clears the value of the "vehicle_type" field.
func (m *EventMutation) ClearVehicleType() {
	m.vehicle_type = nil
	m.clearedFields[event.FieldVehicleType] = struct{}{}
}

// VehicleTypeCleared returns if the "vehicle_type" field was cleared in this mutation.
func (m *EventMutation) VehicleTypeCleared() bool {
	_, ok := m.clearedFields[event.FieldVehicleType]
	return ok
}

// ResetVehicleType resets all changes to the "vehicle_type" field.
func (m *EventMutation) ResetVehicleType() {
	m.vehicle_type = nil
	delete(m.clearedFields, event.FieldVehicleType)
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 28)
	if m.created_at != nil {
		fields = append(fields, event.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, event.FieldUpdatedAt)
	}
	if m.plate_bounding_box != nil {
		fields = append(fields, event.FieldPlateBoundingBox)
	}
	if m.plate_channel != nil {
		fields = append(fields, event.FieldPlateChannel)
	}
	if m.plate_confidence != nil {
		fields = append(fields, event.FieldPlateConfidence)
	}
	if m.plate_is_exist != nil {
		fields = append(fields, event.FieldPlateIsExist)
	}
	if m.plate_color != nil {
		fields = append(fields, event.FieldPlateColor)
	}
	if m.plate_number != nil {
		fields = append(fields, event.FieldPlateNumber)
	}
	if m.plate_type != nil {
		fields = append(fields, event.FieldPlateType)
	}
	if m.plate_region != nil {
		fields = append(fields, event.FieldPlateRegion)
	}
	if m.plate_upload_num != nil {
		fields = append(fields, event.FieldPlateUploadNum)
	}
	if m.snap_accurate_time != nil {
		fields = append(fields, event.FieldSnapAccurateTime)
	}
	if m.snap_allow_user != nil {
		fields = append(fields, event.FieldSnapAllowUser)
	}
	if m.snap_allow_user_end_time != nil {
		fields = append(fields, event.FieldSnapAllowUserEndTime)
	}
	if m.snap_dst_tune != nil {
		fields = append(fields, event.FieldSnapDstTune)
	}
	if m.snap_defence_code != nil {
		fields = append(fields, event.FieldSnapDefenceCode)
	}
	if m.snap_device_id != nil {
		fields = append(fields, event.FieldSnapDeviceID)
	}
	if m.snap_direction != nil {
		fields = append(fields, event.FieldSnapDirection)
	}
	if m.snap_in_car_people_num != nil {
		fields = append(fields, event.FieldSnapInCarPeopleNum)
	}
	if m.snap_lan_no != nil {
		fields = append(fields, event.FieldSnapLanNo)
	}
	if m.snap_open_strobe != nil {
		fields = append(fields, event.FieldSnapOpenStrobe)
	}
	if m.snap_snap_time != nil {
		fields = append(fields, event.FieldSnapSnapTime)
	}
	if m.snap_time_zone != nil {
		fields = append(fields, event.FieldSnapTimeZone)
	}
	if m.vehicle_speed != nil {
		fields = append(fields, event.FieldVehicleSpeed)
	}
	if m.vehicle_bounding_box != nil {
		fields = append(fields, event.FieldVehicleBoundingBox)
	}
	if m.vehicle_color != nil {
		fields = append(fields, event.FieldVehicleColor)
	}
	if m.vehicle_series != nil {
		fields = append(fields, event.FieldVehicleSeries)
	}
	if m.vehicle_type != nil {
		fields = append(fields, event.FieldVehicleType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldCreatedAt:
		return m.CreatedAt()
	case event.FieldUpdatedAt:
		return m.UpdatedAt()
	case event.FieldPlateBoundingBox:
		return m.PlateBoundingBox()
	case event.FieldPlateChannel:
		return m.PlateChannel()
	case event.FieldPlateConfidence:
		return m.PlateConfidence()
	case event.FieldPlateIsExist:
		return m.PlateIsExist()
	case event.FieldPlateColor:
		return m.PlateColor()
	case event.FieldPlateNumber:
		return m.PlateNumber()
	case event.FieldPlateType:
		return m.PlateType()
	case event.FieldPlateRegion:
		return m.PlateRegion()
	case event.FieldPlateUploadNum:
		return m.PlateUploadNum()
	case event.FieldSnapAccurateTime:
		return m.SnapAccurateTime()
	case event.FieldSnapAllowUser:
		return m.SnapAllowUser()
	case event.FieldSnapAllowUserEndTime:
		return m.SnapAllowUserEndTime()
	case event.FieldSnapDstTune:
		return m.SnapDstTune()
	case event.FieldSnapDefenceCode:
		return m.SnapDefenceCode()
	case event.FieldSnapDeviceID:
		return m.SnapDeviceID()
	case event.FieldSnapDirection:
		return m.SnapDirection()
	case event.FieldSnapInCarPeopleNum:
		return m.SnapInCarPeopleNum()
	case event.FieldSnapLanNo:
		return m.SnapLanNo()
	case event.FieldSnapOpenStrobe:
		return m.SnapOpenStrobe()
	case event.FieldSnapSnapTime:
		return m.SnapSnapTime()
	case event.FieldSnapTimeZone:
		return m.SnapTimeZone()
	case event.FieldVehicleSpeed:
		return m.VehicleSpeed()
	case event.FieldVehicleBoundingBox:
		return m.VehicleBoundingBox()
	case event.FieldVehicleColor:
		return m.VehicleColor()
	case event.FieldVehicleSeries:
		return m.VehicleSeries()
	case event.FieldVehicleType:
		return m.VehicleType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case event.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case event.FieldPlateBoundingBox:
		return m.OldPlateBoundingBox(ctx)
	case event.FieldPlateChannel:
		return m.OldPlateChannel(ctx)
	case event.FieldPlateConfidence:
		return m.OldPlateConfidence(ctx)
	case event.FieldPlateIsExist:
		return m.OldPlateIsExist(ctx)
	case event.FieldPlateColor:
		return m.OldPlateColor(ctx)
	case event.FieldPlateNumber:
		return m.OldPlateNumber(ctx)
	case event.FieldPlateType:
		return m.OldPlateType(ctx)
	case event.FieldPlateRegion:
		return m.OldPlateRegion(ctx)
	case event.FieldPlateUploadNum:
		return m.OldPlateUploadNum(ctx)
	case event.FieldSnapAccurateTime:
		return m.OldSnapAccurateTime(ctx)
	case event.FieldSnapAllowUser:
		return m.OldSnapAllowUser(ctx)
	case event.FieldSnapAllowUserEndTime:
		return m.OldSnapAllowUserEndTime(ctx)
	case event.FieldSnapDstTune:
		return m.OldSnapDstTune(ctx)
	case event.FieldSnapDefenceCode:
		return m.OldSnapDefenceCode(ctx)
	case event.FieldSnapDeviceID:
		return m.OldSnapDeviceID(ctx)
	case event.FieldSnapDirection:
		return m.OldSnapDirection(ctx)
	case event.FieldSnapInCarPeopleNum:
		return m.OldSnapInCarPeopleNum(ctx)
	case event.FieldSnapLanNo:
		return m.OldSnapLanNo(ctx)
	case event.FieldSnapOpenStrobe:
		return m.OldSnapOpenStrobe(ctx)
	case event.FieldSnapSnapTime:
		return m.OldSnapSnapTime(ctx)
	case event.FieldSnapTimeZone:
		return m.OldSnapTimeZone(ctx)
	case event.FieldVehicleSpeed:
		return m.OldVehicleSpeed(ctx)
	case event.FieldVehicleBoundingBox:
		return m.OldVehicleBoundingBox(ctx)
	case event.FieldVehicleColor:
		return m.OldVehicleColor(ctx)
	case event.FieldVehicleSeries:
		return m.OldVehicleSeries(ctx)
	case event.FieldVehicleType:
		return m.OldVehicleType(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case event.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case event.FieldPlateBoundingBox:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateBoundingBox(v)
		return nil
	case event.FieldPlateChannel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateChannel(v)
		return nil
	case event.FieldPlateConfidence:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateConfidence(v)
		return nil
	case event.FieldPlateIsExist:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateIsExist(v)
		return nil
	case event.FieldPlateColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateColor(v)
		return nil
	case event.FieldPlateNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateNumber(v)
		return nil
	case event.FieldPlateType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateType(v)
		return nil
	case event.FieldPlateRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateRegion(v)
		return nil
	case event.FieldPlateUploadNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlateUploadNum(v)
		return nil
	case event.FieldSnapAccurateTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapAccurateTime(v)
		return nil
	case event.FieldSnapAllowUser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapAllowUser(v)
		return nil
	case event.FieldSnapAllowUserEndTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapAllowUserEndTime(v)
		return nil
	case event.FieldSnapDstTune:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapDstTune(v)
		return nil
	case event.FieldSnapDefenceCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapDefenceCode(v)
		return nil
	case event.FieldSnapDeviceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapDeviceID(v)
		return nil
	case event.FieldSnapDirection:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapDirection(v)
		return nil
	case event.FieldSnapInCarPeopleNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapInCarPeopleNum(v)
		return nil
	case event.FieldSnapLanNo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapLanNo(v)
		return nil
	case event.FieldSnapOpenStrobe:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapOpenStrobe(v)
		return nil
	case event.FieldSnapSnapTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapSnapTime(v)
		return nil
	case event.FieldSnapTimeZone:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapTimeZone(v)
		return nil
	case event.FieldVehicleSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVehicleSpeed(v)
		return nil
	case event.FieldVehicleBoundingBox:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVehicleBoundingBox(v)
		return nil
	case event.FieldVehicleColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVehicleColor(v)
		return nil
	case event.FieldVehicleSeries:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVehicleSeries(v)
		return nil
	case event.FieldVehicleType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVehicleType(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.addplate_channel != nil {
		fields = append(fields, event.FieldPlateChannel)
	}
	if m.addplate_confidence != nil {
		fields = append(fields, event.FieldPlateConfidence)
	}
	if m.addplate_upload_num != nil {
		fields = append(fields, event.FieldPlateUploadNum)
	}
	if m.addsnap_dst_tune != nil {
		fields = append(fields, event.FieldSnapDstTune)
	}
	if m.addsnap_in_car_people_num != nil {
		fields = append(fields, event.FieldSnapInCarPeopleNum)
	}
	if m.addsnap_lan_no != nil {
		fields = append(fields, event.FieldSnapLanNo)
	}
	if m.addsnap_time_zone != nil {
		fields = append(fields, event.FieldSnapTimeZone)
	}
	if m.addvehicle_speed != nil {
		fields = append(fields, event.FieldVehicleSpeed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldPlateChannel:
		return m.AddedPlateChannel()
	case event.FieldPlateConfidence:
		return m.AddedPlateConfidence()
	case event.FieldPlateUploadNum:
		return m.AddedPlateUploadNum()
	case event.FieldSnapDstTune:
		return m.AddedSnapDstTune()
	case event.FieldSnapInCarPeopleNum:
		return m.AddedSnapInCarPeopleNum()
	case event.FieldSnapLanNo:
		return m.AddedSnapLanNo()
	case event.FieldSnapTimeZone:
		return m.AddedSnapTimeZone()
	case event.FieldVehicleSpeed:
		return m.AddedVehicleSpeed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldPlateChannel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlateChannel(v)
		return nil
	case event.FieldPlateConfidence:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlateConfidence(v)
		return nil
	case event.FieldPlateUploadNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlateUploadNum(v)
		return nil
	case event.FieldSnapDstTune:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSnapDstTune(v)
		return nil
	case event.FieldSnapInCarPeopleNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSnapInCarPeopleNum(v)
		return nil
	case event.FieldSnapLanNo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSnapLanNo(v)
		return nil
	case event.FieldSnapTimeZone:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSnapTimeZone(v)
		return nil
	case event.FieldVehicleSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVehicleSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldPlateBoundingBox) {
		fields = append(fields, event.FieldPlateBoundingBox)
	}
	if m.FieldCleared(event.FieldPlateChannel) {
		fields = append(fields, event.FieldPlateChannel)
	}
	if m.FieldCleared(event.FieldPlateConfidence) {
		fields = append(fields, event.FieldPlateConfidence)
	}
	if m.FieldCleared(event.FieldPlateIsExist) {
		fields = append(fields, event.FieldPlateIsExist)
	}
	if m.FieldCleared(event.FieldPlateColor) {
		fields = append(fields, event.FieldPlateColor)
	}
	if m.FieldCleared(event.FieldPlateNumber) {
		fields = append(fields, event.FieldPlateNumber)
	}
	if m.FieldCleared(event.FieldPlateType) {
		fields = append(fields, event.FieldPlateType)
	}
	if m.FieldCleared(event.FieldPlateRegion) {
		fields = append(fields, event.FieldPlateRegion)
	}
	if m.FieldCleared(event.FieldPlateUploadNum) {
		fields = append(fields, event.FieldPlateUploadNum)
	}
	if m.FieldCleared(event.FieldSnapAccurateTime) {
		fields = append(fields, event.FieldSnapAccurateTime)
	}
	if m.FieldCleared(event.FieldSnapAllowUser) {
		fields = append(fields, event.FieldSnapAllowUser)
	}
	if m.FieldCleared(event.FieldSnapAllowUserEndTime) {
		fields = append(fields, event.FieldSnapAllowUserEndTime)
	}
	if m.FieldCleared(event.FieldSnapDstTune) {
		fields = append(fields, event.FieldSnapDstTune)
	}
	if m.FieldCleared(event.FieldSnapDefenceCode) {
		fields = append(fields, event.FieldSnapDefenceCode)
	}
	if m.FieldCleared(event.FieldSnapDeviceID) {
		fields = append(fields, event.FieldSnapDeviceID)
	}
	if m.FieldCleared(event.FieldSnapDirection) {
		fields = append(fields, event.FieldSnapDirection)
	}
	if m.FieldCleared(event.FieldSnapInCarPeopleNum) {
		fields = append(fields, event.FieldSnapInCarPeopleNum)
	}
	if m.FieldCleared(event.FieldSnapLanNo) {
		fields = append(fields, event.FieldSnapLanNo)
	}
	if m.FieldCleared(event.FieldSnapOpenStrobe) {
		fields = append(fields, event.FieldSnapOpenStrobe)
	}
	if m.FieldCleared(event.FieldSnapSnapTime) {
		fields = append(fields, event.FieldSnapSnapTime)
	}
	if m.FieldCleared(event.FieldSnapTimeZone) {
		fields = append(fields, event.FieldSnapTimeZone)
	}
	if m.FieldCleared(event.FieldVehicleSpeed) {
		fields = append(fields, event.FieldVehicleSpeed)
	}
	if m.FieldCleared(event.FieldVehicleBoundingBox) {
		fields = append(fields, event.FieldVehicleBoundingBox)
	}
	if m.FieldCleared(event.FieldVehicleColor) {
		fields = append(fields, event.FieldVehicleColor)
	}
	if m.FieldCleared(event.FieldVehicleSeries) {
		fields = append(fields, event.FieldVehicleSeries)
	}
	if m.FieldCleared(event.FieldVehicleType) {
		fields = append(fields, event.FieldVehicleType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldPlateBoundingBox:
		m.ClearPlateBoundingBox()
		return nil
	case event.FieldPlateChannel:
		m.ClearPlateChannel()
		return nil
	case event.FieldPlateConfidence:
		m.ClearPlateConfidence()
		return nil
	case event.FieldPlateIsExist:
		m.ClearPlateIsExist()
		return nil
	case event.FieldPlateColor:
		m.ClearPlateColor()
		return nil
	case event.FieldPlateNumber:
		m.ClearPlateNumber()
		return nil
	case event.FieldPlateType:
		m.ClearPlateType()
		return nil
	case event.FieldPlateRegion:
		m.ClearPlateRegion()
		return nil
	case event.FieldPlateUploadNum:
		m.ClearPlateUploadNum()
		return nil
	case event.FieldSnapAccurateTime:
		m.ClearSnapAccurateTime()
		return nil
	case event.FieldSnapAllowUser:
		m.ClearSnapAllowUser()
		return nil
	case event.FieldSnapAllowUserEndTime:
		m.ClearSnapAllowUserEndTime()
		return nil
	case event.FieldSnapDstTune:
		m.ClearSnapDstTune()
		return nil
	case event.FieldSnapDefenceCode:
		m.ClearSnapDefenceCode()
		return nil
	case event.FieldSnapDeviceID:
		m.ClearSnapDeviceID()
		return nil
	case event.FieldSnapDirection:
		m.ClearSnapDirection()
		return nil
	case event.FieldSnapInCarPeopleNum:
		m.ClearSnapInCarPeopleNum()
		return nil
	case event.FieldSnapLanNo:
		m.ClearSnapLanNo()
		return nil
	case event.FieldSnapOpenStrobe:
		m.ClearSnapOpenStrobe()
		return nil
	case event.FieldSnapSnapTime:
		m.ClearSnapSnapTime()
		return nil
	case event.FieldSnapTimeZone:
		m.ClearSnapTimeZone()
		return nil
	case event.FieldVehicleSpeed:
		m.ClearVehicleSpeed()
		return nil
	case event.FieldVehicleBoundingBox:
		m.ClearVehicleBoundingBox()
		return nil
	case event.FieldVehicleColor:
		m.ClearVehicleColor()
		return nil
	case event.FieldVehicleSeries:
		m.ClearVehicleSeries()
		return nil
	case event.FieldVehicleType:
		m.ClearVehicleType()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case event.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case event.FieldPlateBoundingBox:
		m.ResetPlateBoundingBox()
		return nil
	case event.FieldPlateChannel:
		m.ResetPlateChannel()
		return nil
	case event.FieldPlateConfidence:
		m.ResetPlateConfidence()
		return nil
	case event.FieldPlateIsExist:
		m.ResetPlateIsExist()
		return nil
	case event.FieldPlateColor:
		m.ResetPlateColor()
		return nil
	case event.FieldPlateNumber:
		m.ResetPlateNumber()
		return nil
	case event.FieldPlateType:
		m.ResetPlateType()
		return nil
	case event.FieldPlateRegion:
		m.ResetPlateRegion()
		return nil
	case event.FieldPlateUploadNum:
		m.ResetPlateUploadNum()
		return nil
	case event.FieldSnapAccurateTime:
		m.ResetSnapAccurateTime()
		return nil
	case event.FieldSnapAllowUser:
		m.ResetSnapAllowUser()
		return nil
	case event.FieldSnapAllowUserEndTime:
		m.ResetSnapAllowUserEndTime()
		return nil
	case event.FieldSnapDstTune:
		m.ResetSnapDstTune()
		return nil
	case event.FieldSnapDefenceCode:
		m.ResetSnapDefenceCode()
		return nil
	case event.FieldSnapDeviceID:
		m.ResetSnapDeviceID()
		return nil
	case event.FieldSnapDirection:
		m.ResetSnapDirection()
		return nil
	case event.FieldSnapInCarPeopleNum:
		m.ResetSnapInCarPeopleNum()
		return nil
	case event.FieldSnapLanNo:
		m.ResetSnapLanNo()
		return nil
	case event.FieldSnapOpenStrobe:
		m.ResetSnapOpenStrobe()
		return nil
	case event.FieldSnapSnapTime:
		m.ResetSnapSnapTime()
		return nil
	case event.FieldSnapTimeZone:
		m.ResetSnapTimeZone()
		return nil
	case event.FieldVehicleSpeed:
		m.ResetVehicleSpeed()
		return nil
	case event.FieldVehicleBoundingBox:
		m.ResetVehicleBoundingBox()
		return nil
	case event.FieldVehicleColor:
		m.ResetVehicleColor()
		return nil
	case event.FieldVehicleSeries:
		m.ResetVehicleSeries()
		return nil
	case event.FieldVehicleType:
		m.ResetVehicleType()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Event edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	can_read      *bool
	can_create    *bool
	can_update    *bool
	can_delete    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Permission, error)
	predicates    []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id uuid.UUID) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Permission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *PermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PermissionMutation) ResetName() {
	m.name = nil
}

// SetCanRead sets the "can_read" field.
func (m *PermissionMutation) SetCanRead(b bool) {
	m.can_read = &b
}

// CanRead returns the value of the "can_read" field in the mutation.
func (m *PermissionMutation) CanRead() (r bool, exists bool) {
	v := m.can_read
	if v == nil {
		return
	}
	return *v, true
}

// OldCanRead returns the old "can_read" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCanRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanRead: %w", err)
	}
	return oldValue.CanRead, nil
}

// ResetCanRead resets all changes to the "can_read" field.
func (m *PermissionMutation) ResetCanRead() {
	m.can_read = nil
}

// SetCanCreate sets the "can_create" field.
func (m *PermissionMutation) SetCanCreate(b bool) {
	m.can_create = &b
}

// CanCreate returns the value of the "can_create" field in the mutation.
func (m *PermissionMutation) CanCreate() (r bool, exists bool) {
	v := m.can_create
	if v == nil {
		return
	}
	return *v, true
}

// OldCanCreate returns the old "can_create" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCanCreate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanCreate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanCreate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanCreate: %w", err)
	}
	return oldValue.CanCreate, nil
}

// ResetCanCreate resets all changes to the "can_create" field.
func (m *PermissionMutation) ResetCanCreate() {
	m.can_create = nil
}

// SetCanUpdate sets the "can_update" field.
func (m *PermissionMutation) SetCanUpdate(b bool) {
	m.can_update = &b
}

// CanUpdate returns the value of the "can_update" field in the mutation.
func (m *PermissionMutation) CanUpdate() (r bool, exists bool) {
	v := m.can_update
	if v == nil {
		return
	}
	return *v, true
}

// OldCanUpdate returns the old "can_update" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCanUpdate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanUpdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanUpdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanUpdate: %w", err)
	}
	return oldValue.CanUpdate, nil
}

// ResetCanUpdate resets all changes to the "can_update" field.
func (m *PermissionMutation) ResetCanUpdate() {
	m.can_update = nil
}

// SetCanDelete sets the "can_delete" field.
func (m *PermissionMutation) SetCanDelete(b bool) {
	m.can_delete = &b
}

// CanDelete returns the value of the "can_delete" field in the mutation.
func (m *PermissionMutation) CanDelete() (r bool, exists bool) {
	v := m.can_delete
	if v == nil {
		return
	}
	return *v, true
}

// OldCanDelete returns the old "can_delete" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCanDelete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanDelete: %w", err)
	}
	return oldValue.CanDelete, nil
}

// ResetCanDelete resets all changes to the "can_delete" field.
func (m *PermissionMutation) ResetCanDelete() {
	m.can_delete = nil
}

// Where appends a list predicates to the PermissionMutation builder.
func (m *PermissionMutation) Where(ps ...predicate.Permission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Permission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, permission.FieldName)
	}
	if m.can_read != nil {
		fields = append(fields, permission.FieldCanRead)
	}
	if m.can_create != nil {
		fields = append(fields, permission.FieldCanCreate)
	}
	if m.can_update != nil {
		fields = append(fields, permission.FieldCanUpdate)
	}
	if m.can_delete != nil {
		fields = append(fields, permission.FieldCanDelete)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldCreatedAt:
		return m.CreatedAt()
	case permission.FieldUpdatedAt:
		return m.UpdatedAt()
	case permission.FieldName:
		return m.Name()
	case permission.FieldCanRead:
		return m.CanRead()
	case permission.FieldCanCreate:
		return m.CanCreate()
	case permission.FieldCanUpdate:
		return m.CanUpdate()
	case permission.FieldCanDelete:
		return m.CanDelete()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case permission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case permission.FieldName:
		return m.OldName(ctx)
	case permission.FieldCanRead:
		return m.OldCanRead(ctx)
	case permission.FieldCanCreate:
		return m.OldCanCreate(ctx)
	case permission.FieldCanUpdate:
		return m.OldCanUpdate(ctx)
	case permission.FieldCanDelete:
		return m.OldCanDelete(ctx)
	}
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case permission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case permission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case permission.FieldCanRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanRead(v)
		return nil
	case permission.FieldCanCreate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanCreate(v)
		return nil
	case permission.FieldCanUpdate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanUpdate(v)
		return nil
	case permission.FieldCanDelete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanDelete(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case permission.FieldName:
		m.ResetName()
		return nil
	case permission.FieldCanRead:
		m.ResetCanRead()
		return nil
	case permission.FieldCanCreate:
		m.ResetCanCreate()
		return nil
	case permission.FieldCanUpdate:
		m.ResetCanUpdate()
		return nil
	case permission.FieldCanDelete:
		m.ResetCanDelete()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Permission edge %s", name)
}

// PoliceStationMutation represents an operation that mutates the PoliceStation nodes in the graph.
type PoliceStationMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *time.Time
	updated_at            *time.Time
	name                  *string
	location              *string
	code                  *string
	identifier            *string
	clearedFields         map[string]struct{}
	users                 map[uuid.UUID]struct{}
	removedusers          map[uuid.UUID]struct{}
	clearedusers          bool
	camera                map[uuid.UUID]struct{}
	removedcamera         map[uuid.UUID]struct{}
	clearedcamera         bool
	car                   map[uuid.UUID]struct{}
	removedcar            map[uuid.UUID]struct{}
	clearedcar            bool
	parent                *uuid.UUID
	clearedparent         bool
	child_stations        map[uuid.UUID]struct{}
	removedchild_stations map[uuid.UUID]struct{}
	clearedchild_stations bool
	done                  bool
	oldValue              func(context.Context) (*PoliceStation, error)
	predicates            []predicate.PoliceStation
}

var _ ent.Mutation = (*PoliceStationMutation)(nil)

// policestationOption allows management of the mutation configuration using functional options.
type policestationOption func(*PoliceStationMutation)

// newPoliceStationMutation creates new mutation for the PoliceStation entity.
func newPoliceStationMutation(c config, op Op, opts ...policestationOption) *PoliceStationMutation {
	m := &PoliceStationMutation{
		config:        c,
		op:            op,
		typ:           TypePoliceStation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPoliceStationID sets the ID field of the mutation.
func withPoliceStationID(id uuid.UUID) policestationOption {
	return func(m *PoliceStationMutation) {
		var (
			err   error
			once  sync.Once
			value *PoliceStation
		)
		m.oldValue = func(ctx context.Context) (*PoliceStation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PoliceStation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoliceStation sets the old PoliceStation of the mutation.
func withPoliceStation(node *PoliceStation) policestationOption {
	return func(m *PoliceStationMutation) {
		m.oldValue = func(context.Context) (*PoliceStation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PoliceStationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PoliceStationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PoliceStation entities.
func (m *PoliceStationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PoliceStationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PoliceStationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PoliceStation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PoliceStationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PoliceStationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PoliceStationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PoliceStationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PoliceStationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PoliceStationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *PoliceStationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PoliceStationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PoliceStationMutation) ResetName() {
	m.name = nil
}

// SetLocation sets the "location" field.
func (m *PoliceStationMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *PoliceStationMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldLocation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *PoliceStationMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[policestation.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *PoliceStationMutation) LocationCleared() bool {
	_, ok := m.clearedFields[policestation.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *PoliceStationMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, policestation.FieldLocation)
}

// SetCode sets the "code" field.
func (m *PoliceStationMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PoliceStationMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PoliceStationMutation) ResetCode() {
	m.code = nil
}

// SetIdentifier sets the "identifier" field.
func (m *PoliceStationMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *PoliceStationMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *PoliceStationMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetParentStationID sets the "parent_station_id" field.
func (m *PoliceStationMutation) SetParentStationID(u uuid.UUID) {
	m.parent = &u
}

// ParentStationID returns the value of the "parent_station_id" field in the mutation.
func (m *PoliceStationMutation) ParentStationID() (r uuid.UUID, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentStationID returns the old "parent_station_id" field's value of the PoliceStation entity.
// If the PoliceStation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PoliceStationMutation) OldParentStationID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentStationID: %w", err)
	}
	return oldValue.ParentStationID, nil
}

// ClearParentStationID clears the value of the "parent_station_id" field.
func (m *PoliceStationMutation) ClearParentStationID() {
	m.parent = nil
	m.clearedFields[policestation.FieldParentStationID] = struct{}{}
}

// ParentStationIDCleared returns if the "parent_station_id" field was cleared in this mutation.
func (m *PoliceStationMutation) ParentStationIDCleared() bool {
	_, ok := m.clearedFields[policestation.FieldParentStationID]
	return ok
}

// ResetParentStationID resets all changes to the "parent_station_id" field.
func (m *PoliceStationMutation) ResetParentStationID() {
	m.parent = nil
	delete(m.clearedFields, policestation.FieldParentStationID)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *PoliceStationMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *PoliceStationMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *PoliceStationMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *PoliceStationMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *PoliceStationMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *PoliceStationMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *PoliceStationMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddCameraIDs adds the "camera" edge to the Camera entity by ids.
func (m *PoliceStationMutation) AddCameraIDs(ids ...uuid.UUID) {
	if m.camera == nil {
		m.camera = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.camera[ids[i]] = struct{}{}
	}
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (m *PoliceStationMutation) ClearCamera() {
	m.clearedcamera = true
}

// CameraCleared reports if the "camera" edge to the Camera entity was cleared.
func (m *PoliceStationMutation) CameraCleared() bool {
	return m.clearedcamera
}

// RemoveCameraIDs removes the "camera" edge to the Camera entity by IDs.
func (m *PoliceStationMutation) RemoveCameraIDs(ids ...uuid.UUID) {
	if m.removedcamera == nil {
		m.removedcamera = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.camera, ids[i])
		m.removedcamera[ids[i]] = struct{}{}
	}
}

// RemovedCamera returns the removed IDs of the "camera" edge to the Camera entity.
func (m *PoliceStationMutation) RemovedCameraIDs() (ids []uuid.UUID) {
	for id := range m.removedcamera {
		ids = append(ids, id)
	}
	return
}

// CameraIDs returns the "camera" edge IDs in the mutation.
func (m *PoliceStationMutation) CameraIDs() (ids []uuid.UUID) {
	for id := range m.camera {
		ids = append(ids, id)
	}
	return
}

// ResetCamera resets all changes to the "camera" edge.
func (m *PoliceStationMutation) ResetCamera() {
	m.camera = nil
	m.clearedcamera = false
	m.removedcamera = nil
}

// AddCarIDs adds the "car" edge to the Car entity by ids.
func (m *PoliceStationMutation) AddCarIDs(ids ...uuid.UUID) {
	if m.car == nil {
		m.car = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.car[ids[i]] = struct{}{}
	}
}

// ClearCar clears the "car" edge to the Car entity.
func (m *PoliceStationMutation) ClearCar() {
	m.clearedcar = true
}

// CarCleared reports if the "car" edge to the Car entity was cleared.
func (m *PoliceStationMutation) CarCleared() bool {
	return m.clearedcar
}

// RemoveCarIDs removes the "car" edge to the Car entity by IDs.
func (m *PoliceStationMutation) RemoveCarIDs(ids ...uuid.UUID) {
	if m.removedcar == nil {
		m.removedcar = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.car, ids[i])
		m.removedcar[ids[i]] = struct{}{}
	}
}

// RemovedCar returns the removed IDs of the "car" edge to the Car entity.
func (m *PoliceStationMutation) RemovedCarIDs() (ids []uuid.UUID) {
	for id := range m.removedcar {
		ids = append(ids, id)
	}
	return
}

// CarIDs returns the "car" edge IDs in the mutation.
func (m *PoliceStationMutation) CarIDs() (ids []uuid.UUID) {
	for id := range m.car {
		ids = append(ids, id)
	}
	return
}

// ResetCar resets all changes to the "car" edge.
func (m *PoliceStationMutation) ResetCar() {
	m.car = nil
	m.clearedcar = false
	m.removedcar = nil
}

// SetParentID sets the "parent" edge to the PoliceStation entity by id.
func (m *PoliceStationMutation) SetParentID(id uuid.UUID) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the PoliceStation entity.
func (m *PoliceStationMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[policestation.FieldParentStationID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the PoliceStation entity was cleared.
func (m *PoliceStationMutation) ParentCleared() bool {
	return m.ParentStationIDCleared() || m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *PoliceStationMutation) ParentID() (id uuid.UUID, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *PoliceStationMutation) ParentIDs() (ids []uuid.UUID) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *PoliceStationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by ids.
func (m *PoliceStationMutation) AddChildStationIDs(ids ...uuid.UUID) {
	if m.child_stations == nil {
		m.child_stations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.child_stations[ids[i]] = struct{}{}
	}
}

// ClearChildStations clears the "child_stations" edge to the PoliceStation entity.
func (m *PoliceStationMutation) ClearChildStations() {
	m.clearedchild_stations = true
}

// ChildStationsCleared reports if the "child_stations" edge to the PoliceStation entity was cleared.
func (m *PoliceStationMutation) ChildStationsCleared() bool {
	return m.clearedchild_stations
}

// RemoveChildStationIDs removes the "child_stations" edge to the PoliceStation entity by IDs.
func (m *PoliceStationMutation) RemoveChildStationIDs(ids ...uuid.UUID) {
	if m.removedchild_stations == nil {
		m.removedchild_stations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.child_stations, ids[i])
		m.removedchild_stations[ids[i]] = struct{}{}
	}
}

// RemovedChildStations returns the removed IDs of the "child_stations" edge to the PoliceStation entity.
func (m *PoliceStationMutation) RemovedChildStationsIDs() (ids []uuid.UUID) {
	for id := range m.removedchild_stations {
		ids = append(ids, id)
	}
	return
}

// ChildStationsIDs returns the "child_stations" edge IDs in the mutation.
func (m *PoliceStationMutation) ChildStationsIDs() (ids []uuid.UUID) {
	for id := range m.child_stations {
		ids = append(ids, id)
	}
	return
}

// ResetChildStations resets all changes to the "child_stations" edge.
func (m *PoliceStationMutation) ResetChildStations() {
	m.child_stations = nil
	m.clearedchild_stations = false
	m.removedchild_stations = nil
}

// Where appends a list predicates to the PoliceStationMutation builder.
func (m *PoliceStationMutation) Where(ps ...predicate.PoliceStation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PoliceStationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PoliceStationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PoliceStation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PoliceStationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PoliceStationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PoliceStation).
func (m *PoliceStationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PoliceStationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, policestation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, policestation.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, policestation.FieldName)
	}
	if m.location != nil {
		fields = append(fields, policestation.FieldLocation)
	}
	if m.code != nil {
		fields = append(fields, policestation.FieldCode)
	}
	if m.identifier != nil {
		fields = append(fields, policestation.FieldIdentifier)
	}
	if m.parent != nil {
		fields = append(fields, policestation.FieldParentStationID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PoliceStationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case policestation.FieldCreatedAt:
		return m.CreatedAt()
	case policestation.FieldUpdatedAt:
		return m.UpdatedAt()
	case policestation.FieldName:
		return m.Name()
	case policestation.FieldLocation:
		return m.Location()
	case policestation.FieldCode:
		return m.Code()
	case policestation.FieldIdentifier:
		return m.Identifier()
	case policestation.FieldParentStationID:
		return m.ParentStationID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PoliceStationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case policestation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case policestation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case policestation.FieldName:
		return m.OldName(ctx)
	case policestation.FieldLocation:
		return m.OldLocation(ctx)
	case policestation.FieldCode:
		return m.OldCode(ctx)
	case policestation.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case policestation.FieldParentStationID:
		return m.OldParentStationID(ctx)
	}
	return nil, fmt.Errorf("unknown PoliceStation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PoliceStationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case policestation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case policestation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case policestation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case policestation.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case policestation.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case policestation.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case policestation.FieldParentStationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentStationID(v)
		return nil
	}
	return fmt.Errorf("unknown PoliceStation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PoliceStationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PoliceStationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PoliceStationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PoliceStation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PoliceStationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(policestation.FieldLocation) {
		fields = append(fields, policestation.FieldLocation)
	}
	if m.FieldCleared(policestation.FieldParentStationID) {
		fields = append(fields, policestation.FieldParentStationID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PoliceStationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PoliceStationMutation) ClearField(name string) error {
	switch name {
	case policestation.FieldLocation:
		m.ClearLocation()
		return nil
	case policestation.FieldParentStationID:
		m.ClearParentStationID()
		return nil
	}
	return fmt.Errorf("unknown PoliceStation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PoliceStationMutation) ResetField(name string) error {
	switch name {
	case policestation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case policestation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case policestation.FieldName:
		m.ResetName()
		return nil
	case policestation.FieldLocation:
		m.ResetLocation()
		return nil
	case policestation.FieldCode:
		m.ResetCode()
		return nil
	case policestation.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case policestation.FieldParentStationID:
		m.ResetParentStationID()
		return nil
	}
	return fmt.Errorf("unknown PoliceStation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PoliceStationMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.users != nil {
		edges = append(edges, policestation.EdgeUsers)
	}
	if m.camera != nil {
		edges = append(edges, policestation.EdgeCamera)
	}
	if m.car != nil {
		edges = append(edges, policestation.EdgeCar)
	}
	if m.parent != nil {
		edges = append(edges, policestation.EdgeParent)
	}
	if m.child_stations != nil {
		edges = append(edges, policestation.EdgeChildStations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PoliceStationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case policestation.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case policestation.EdgeCamera:
		ids := make([]ent.Value, 0, len(m.camera))
		for id := range m.camera {
			ids = append(ids, id)
		}
		return ids
	case policestation.EdgeCar:
		ids := make([]ent.Value, 0, len(m.car))
		for id := range m.car {
			ids = append(ids, id)
		}
		return ids
	case policestation.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case policestation.EdgeChildStations:
		ids := make([]ent.Value, 0, len(m.child_stations))
		for id := range m.child_stations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PoliceStationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedusers != nil {
		edges = append(edges, policestation.EdgeUsers)
	}
	if m.removedcamera != nil {
		edges = append(edges, policestation.EdgeCamera)
	}
	if m.removedcar != nil {
		edges = append(edges, policestation.EdgeCar)
	}
	if m.removedchild_stations != nil {
		edges = append(edges, policestation.EdgeChildStations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PoliceStationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case policestation.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case policestation.EdgeCamera:
		ids := make([]ent.Value, 0, len(m.removedcamera))
		for id := range m.removedcamera {
			ids = append(ids, id)
		}
		return ids
	case policestation.EdgeCar:
		ids := make([]ent.Value, 0, len(m.removedcar))
		for id := range m.removedcar {
			ids = append(ids, id)
		}
		return ids
	case policestation.EdgeChildStations:
		ids := make([]ent.Value, 0, len(m.removedchild_stations))
		for id := range m.removedchild_stations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PoliceStationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedusers {
		edges = append(edges, policestation.EdgeUsers)
	}
	if m.clearedcamera {
		edges = append(edges, policestation.EdgeCamera)
	}
	if m.clearedcar {
		edges = append(edges, policestation.EdgeCar)
	}
	if m.clearedparent {
		edges = append(edges, policestation.EdgeParent)
	}
	if m.clearedchild_stations {
		edges = append(edges, policestation.EdgeChildStations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PoliceStationMutation) EdgeCleared(name string) bool {
	switch name {
	case policestation.EdgeUsers:
		return m.clearedusers
	case policestation.EdgeCamera:
		return m.clearedcamera
	case policestation.EdgeCar:
		return m.clearedcar
	case policestation.EdgeParent:
		return m.clearedparent
	case policestation.EdgeChildStations:
		return m.clearedchild_stations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PoliceStationMutation) ClearEdge(name string) error {
	switch name {
	case policestation.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown PoliceStation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PoliceStationMutation) ResetEdge(name string) error {
	switch name {
	case policestation.EdgeUsers:
		m.ResetUsers()
		return nil
	case policestation.EdgeCamera:
		m.ResetCamera()
		return nil
	case policestation.EdgeCar:
		m.ResetCar()
		return nil
	case policestation.EdgeParent:
		m.ResetParent()
		return nil
	case policestation.EdgeChildStations:
		m.ResetChildStations()
		return nil
	}
	return fmt.Errorf("unknown PoliceStation edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	name               *string
	clearedFields      map[string]struct{}
	permissions        map[uuid.UUID]struct{}
	removedpermissions map[uuid.UUID]struct{}
	clearedpermissions bool
	users              map[uuid.UUID]struct{}
	removedusers       map[uuid.UUID]struct{}
	clearedusers       bool
	done               bool
	oldValue           func(context.Context) (*Role, error)
	predicates         []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id uuid.UUID) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by ids.
func (m *RoleMutation) AddPermissionIDs(ids ...uuid.UUID) {
	if m.permissions == nil {
		m.permissions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (m *RoleMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the Permission entity was cleared.
func (m *RoleMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the Permission entity by IDs.
func (m *RoleMutation) RemovePermissionIDs(ids ...uuid.UUID) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the Permission entity.
func (m *RoleMutation) RemovedPermissionsIDs() (ids []uuid.UUID) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *RoleMutation) PermissionsIDs() (ids []uuid.UUID) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *RoleMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *RoleMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *RoleMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *RoleMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *RoleMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *RoleMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *RoleMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *RoleMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, role.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreatedAt:
		return m.CreatedAt()
	case role.FieldUpdatedAt:
		return m.UpdatedAt()
	case role.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case role.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case role.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case role.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case role.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.permissions != nil {
		edges = append(edges, role.EdgePermissions)
	}
	if m.users != nil {
		edges = append(edges, role.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpermissions != nil {
		edges = append(edges, role.EdgePermissions)
	}
	if m.removedusers != nil {
		edges = append(edges, role.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpermissions {
		edges = append(edges, role.EdgePermissions)
	}
	if m.clearedusers {
		edges = append(edges, role.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgePermissions:
		return m.clearedpermissions
	case role.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgePermissions:
		m.ResetPermissions()
		return nil
	case role.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *time.Time
	updated_at            *time.Time
	name                  *string
	email                 *string
	password              *string
	phone                 *string
	active                *bool
	clearedFields         map[string]struct{}
	role                  *uuid.UUID
	clearedrole           bool
	police_station        *uuid.UUID
	clearedpolice_station bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// SetRoleID sets the "role_id" field.
func (m *UserMutation) SetRoleID(u uuid.UUID) {
	m.role = &u
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *UserMutation) RoleID() (r uuid.UUID, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRoleID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *UserMutation) ResetRoleID() {
	m.role = nil
}

// SetPoliceStationID sets the "police_station_id" field.
func (m *UserMutation) SetPoliceStationID(u uuid.UUID) {
	m.police_station = &u
}

// PoliceStationID returns the value of the "police_station_id" field in the mutation.
func (m *UserMutation) PoliceStationID() (r uuid.UUID, exists bool) {
	v := m.police_station
	if v == nil {
		return
	}
	return *v, true
}

// OldPoliceStationID returns the old "police_station_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPoliceStationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoliceStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoliceStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoliceStationID: %w", err)
	}
	return oldValue.PoliceStationID, nil
}

// ClearPoliceStationID clears the value of the "police_station_id" field.
func (m *UserMutation) ClearPoliceStationID() {
	m.police_station = nil
	m.clearedFields[user.FieldPoliceStationID] = struct{}{}
}

// PoliceStationIDCleared returns if the "police_station_id" field was cleared in this mutation.
func (m *UserMutation) PoliceStationIDCleared() bool {
	_, ok := m.clearedFields[user.FieldPoliceStationID]
	return ok
}

// ResetPoliceStationID resets all changes to the "police_station_id" field.
func (m *UserMutation) ResetPoliceStationID() {
	m.police_station = nil
	delete(m.clearedFields, user.FieldPoliceStationID)
}

// ClearRole clears the "role" edge to the Role entity.
func (m *UserMutation) ClearRole() {
	m.clearedrole = true
	m.clearedFields[user.FieldRoleID] = struct{}{}
}

// RoleCleared reports if the "role" edge to the Role entity was cleared.
func (m *UserMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *UserMutation) RoleIDs() (ids []uuid.UUID) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// ClearPoliceStation clears the "police_station" edge to the PoliceStation entity.
func (m *UserMutation) ClearPoliceStation() {
	m.clearedpolice_station = true
	m.clearedFields[user.FieldPoliceStationID] = struct{}{}
}

// PoliceStationCleared reports if the "police_station" edge to the PoliceStation entity was cleared.
func (m *UserMutation) PoliceStationCleared() bool {
	return m.PoliceStationIDCleared() || m.clearedpolice_station
}

// PoliceStationIDs returns the "police_station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoliceStationID instead. It exists only for internal usage by the builders.
func (m *UserMutation) PoliceStationIDs() (ids []uuid.UUID) {
	if id := m.police_station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoliceStation resets all changes to the "police_station" edge.
func (m *UserMutation) ResetPoliceStation() {
	m.police_station = nil
	m.clearedpolice_station = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRoleID)
	}
	if m.police_station != nil {
		fields = append(fields, user.FieldPoliceStationID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldActive:
		return m.Active()
	case user.FieldRoleID:
		return m.RoleID()
	case user.FieldPoliceStationID:
		return m.PoliceStationID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldActive:
		return m.OldActive(ctx)
	case user.FieldRoleID:
		return m.OldRoleID(ctx)
	case user.FieldPoliceStationID:
		return m.OldPoliceStationID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case user.FieldRoleID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case user.FieldPoliceStationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoliceStationID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldPoliceStationID) {
		fields = append(fields, user.FieldPoliceStationID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldPoliceStationID:
		m.ClearPoliceStationID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldActive:
		m.ResetActive()
		return nil
	case user.FieldRoleID:
		m.ResetRoleID()
		return nil
	case user.FieldPoliceStationID:
		m.ResetPoliceStationID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.role != nil {
		edges = append(edges, user.EdgeRole)
	}
	if m.police_station != nil {
		edges = append(edges, user.EdgePoliceStation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgePoliceStation:
		if id := m.police_station; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrole {
		edges = append(edges, user.EdgeRole)
	}
	if m.clearedpolice_station {
		edges = append(edges, user.EdgePoliceStation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRole:
		return m.clearedrole
	case user.EdgePoliceStation:
		return m.clearedpolice_station
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeRole:
		m.ClearRole()
		return nil
	case user.EdgePoliceStation:
		m.ClearPoliceStation()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRole:
		m.ResetRole()
		return nil
	case user.EdgePoliceStation:
		m.ResetPoliceStation()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
