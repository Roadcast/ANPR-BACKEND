// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/car"
	"go-ent-project/internal/ent/permission"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/internal/ent/role"
	"go-ent-project/internal/ent/user"
	"go-ent-project/internal/ent/vehicledata"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CameraEdge is the edge representation of Camera.
type CameraEdge struct {
	Node   *Camera `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// CameraConnection is the connection containing edges to Camera.
type CameraConnection struct {
	Edges      []*CameraEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *CameraConnection) build(nodes []*Camera, pager *cameraPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Camera
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Camera {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Camera {
			return nodes[i]
		}
	}
	c.Edges = make([]*CameraEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CameraEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CameraPaginateOption enables pagination customization.
type CameraPaginateOption func(*cameraPager) error

// WithCameraOrder configures pagination ordering.
func WithCameraOrder(order []*CameraOrder) CameraPaginateOption {
	return func(pager *cameraPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCameraFilter configures pagination filter.
func WithCameraFilter(filter func(*CameraQuery) (*CameraQuery, error)) CameraPaginateOption {
	return func(pager *cameraPager) error {
		if filter == nil {
			return errors.New("CameraQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cameraPager struct {
	reverse bool
	order   []*CameraOrder
	filter  func(*CameraQuery) (*CameraQuery, error)
}

func newCameraPager(opts []CameraPaginateOption, reverse bool) (*cameraPager, error) {
	pager := &cameraPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *cameraPager) applyFilter(query *CameraQuery) (*CameraQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cameraPager) toCursor(c *Camera) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(c).Value)
	}
	return Cursor{ID: c.ID, Value: cs_}
}

func (p *cameraPager) applyCursors(query *CameraQuery, after, before *Cursor) (*CameraQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCameraOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *cameraPager) applyOrder(query *CameraQuery) *CameraQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCameraOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCameraOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *cameraPager) orderExpr(query *CameraQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCameraOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Camera.
func (c *CameraQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CameraPaginateOption,
) (*CameraConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCameraPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CameraConnection{Edges: []*CameraEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CameraOrderFieldCreatedAt orders Camera by created_at.
	CameraOrderFieldCreatedAt = &CameraOrderField{
		Value: func(c *Camera) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: camera.FieldCreatedAt,
		toTerm: camera.ByCreatedAt,
		toCursor: func(c *Camera) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CameraOrderFieldUpdatedAt orders Camera by updated_at.
	CameraOrderFieldUpdatedAt = &CameraOrderField{
		Value: func(c *Camera) (ent.Value, error) {
			return c.UpdatedAt, nil
		},
		column: camera.FieldUpdatedAt,
		toTerm: camera.ByUpdatedAt,
		toCursor: func(c *Camera) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
	// CameraOrderFieldName orders Camera by name.
	CameraOrderFieldName = &CameraOrderField{
		Value: func(c *Camera) (ent.Value, error) {
			return c.Name, nil
		},
		column: camera.FieldName,
		toTerm: camera.ByName,
		toCursor: func(c *Camera) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CameraOrderField) String() string {
	var str string
	switch f.column {
	case CameraOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case CameraOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	case CameraOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CameraOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CameraOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CameraOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *CameraOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *CameraOrderFieldUpdatedAt
	case "NAME":
		*f = *CameraOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid CameraOrderField", str)
	}
	return nil
}

// CameraOrderField defines the ordering field of Camera.
type CameraOrderField struct {
	// Value extracts the ordering value from the given Camera.
	Value    func(*Camera) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) camera.OrderOption
	toCursor func(*Camera) Cursor
}

// CameraOrder defines the ordering of Camera.
type CameraOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *CameraOrderField `json:"field"`
}

// DefaultCameraOrder is the default ordering of Camera.
var DefaultCameraOrder = &CameraOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CameraOrderField{
		Value: func(c *Camera) (ent.Value, error) {
			return c.ID, nil
		},
		column: camera.FieldID,
		toTerm: camera.ByID,
		toCursor: func(c *Camera) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Camera into CameraEdge.
func (c *Camera) ToEdge(order *CameraOrder) *CameraEdge {
	if order == nil {
		order = DefaultCameraOrder
	}
	return &CameraEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CarEdge is the edge representation of Car.
type CarEdge struct {
	Node   *Car   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CarConnection is the connection containing edges to Car.
type CarConnection struct {
	Edges      []*CarEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *CarConnection) build(nodes []*Car, pager *carPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Car
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Car {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Car {
			return nodes[i]
		}
	}
	c.Edges = make([]*CarEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CarEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CarPaginateOption enables pagination customization.
type CarPaginateOption func(*carPager) error

// WithCarOrder configures pagination ordering.
func WithCarOrder(order []*CarOrder) CarPaginateOption {
	return func(pager *carPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCarFilter configures pagination filter.
func WithCarFilter(filter func(*CarQuery) (*CarQuery, error)) CarPaginateOption {
	return func(pager *carPager) error {
		if filter == nil {
			return errors.New("CarQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type carPager struct {
	reverse bool
	order   []*CarOrder
	filter  func(*CarQuery) (*CarQuery, error)
}

func newCarPager(opts []CarPaginateOption, reverse bool) (*carPager, error) {
	pager := &carPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *carPager) applyFilter(query *CarQuery) (*CarQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *carPager) toCursor(c *Car) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(c).Value)
	}
	return Cursor{ID: c.ID, Value: cs_}
}

func (p *carPager) applyCursors(query *CarQuery, after, before *Cursor) (*CarQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCarOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *carPager) applyOrder(query *CarQuery) *CarQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCarOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCarOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *carPager) orderExpr(query *CarQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCarOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Car.
func (c *CarQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CarPaginateOption,
) (*CarConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCarPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CarConnection{Edges: []*CarEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CarOrderFieldCreatedAt orders Car by created_at.
	CarOrderFieldCreatedAt = &CarOrderField{
		Value: func(c *Car) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: car.FieldCreatedAt,
		toTerm: car.ByCreatedAt,
		toCursor: func(c *Car) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CarOrderFieldUpdatedAt orders Car by updated_at.
	CarOrderFieldUpdatedAt = &CarOrderField{
		Value: func(c *Car) (ent.Value, error) {
			return c.UpdatedAt, nil
		},
		column: car.FieldUpdatedAt,
		toTerm: car.ByUpdatedAt,
		toCursor: func(c *Car) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CarOrderField) String() string {
	var str string
	switch f.column {
	case CarOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case CarOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CarOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CarOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CarOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *CarOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *CarOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid CarOrderField", str)
	}
	return nil
}

// CarOrderField defines the ordering field of Car.
type CarOrderField struct {
	// Value extracts the ordering value from the given Car.
	Value    func(*Car) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) car.OrderOption
	toCursor func(*Car) Cursor
}

// CarOrder defines the ordering of Car.
type CarOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *CarOrderField `json:"field"`
}

// DefaultCarOrder is the default ordering of Car.
var DefaultCarOrder = &CarOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CarOrderField{
		Value: func(c *Car) (ent.Value, error) {
			return c.ID, nil
		},
		column: car.FieldID,
		toTerm: car.ByID,
		toCursor: func(c *Car) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Car into CarEdge.
func (c *Car) ToEdge(order *CarOrder) *CarEdge {
	if order == nil {
		order = DefaultCarOrder
	}
	return &CarEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// PermissionEdge is the edge representation of Permission.
type PermissionEdge struct {
	Node   *Permission `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// PermissionConnection is the connection containing edges to Permission.
type PermissionConnection struct {
	Edges      []*PermissionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *PermissionConnection) build(nodes []*Permission, pager *permissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Permission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Permission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Permission {
			return nodes[i]
		}
	}
	c.Edges = make([]*PermissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PermissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PermissionPaginateOption enables pagination customization.
type PermissionPaginateOption func(*permissionPager) error

// WithPermissionOrder configures pagination ordering.
func WithPermissionOrder(order []*PermissionOrder) PermissionPaginateOption {
	return func(pager *permissionPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPermissionFilter configures pagination filter.
func WithPermissionFilter(filter func(*PermissionQuery) (*PermissionQuery, error)) PermissionPaginateOption {
	return func(pager *permissionPager) error {
		if filter == nil {
			return errors.New("PermissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type permissionPager struct {
	reverse bool
	order   []*PermissionOrder
	filter  func(*PermissionQuery) (*PermissionQuery, error)
}

func newPermissionPager(opts []PermissionPaginateOption, reverse bool) (*permissionPager, error) {
	pager := &permissionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *permissionPager) applyFilter(query *PermissionQuery) (*PermissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *permissionPager) toCursor(pe *Permission) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(pe).Value)
	}
	return Cursor{ID: pe.ID, Value: cs_}
}

func (p *permissionPager) applyCursors(query *PermissionQuery, after, before *Cursor) (*PermissionQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPermissionOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *permissionPager) applyOrder(query *PermissionQuery) *PermissionQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPermissionOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPermissionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *permissionPager) orderExpr(query *PermissionQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPermissionOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Permission.
func (pe *PermissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PermissionPaginateOption,
) (*PermissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPermissionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PermissionConnection{Edges: []*PermissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pe.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PermissionOrderFieldCreatedAt orders Permission by created_at.
	PermissionOrderFieldCreatedAt = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.CreatedAt, nil
		},
		column: permission.FieldCreatedAt,
		toTerm: permission.ByCreatedAt,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.CreatedAt,
			}
		},
	}
	// PermissionOrderFieldUpdatedAt orders Permission by updated_at.
	PermissionOrderFieldUpdatedAt = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.UpdatedAt, nil
		},
		column: permission.FieldUpdatedAt,
		toTerm: permission.ByUpdatedAt,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PermissionOrderField) String() string {
	var str string
	switch f.column {
	case PermissionOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case PermissionOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PermissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PermissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PermissionOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *PermissionOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *PermissionOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid PermissionOrderField", str)
	}
	return nil
}

// PermissionOrderField defines the ordering field of Permission.
type PermissionOrderField struct {
	// Value extracts the ordering value from the given Permission.
	Value    func(*Permission) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) permission.OrderOption
	toCursor func(*Permission) Cursor
}

// PermissionOrder defines the ordering of Permission.
type PermissionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *PermissionOrderField `json:"field"`
}

// DefaultPermissionOrder is the default ordering of Permission.
var DefaultPermissionOrder = &PermissionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.ID, nil
		},
		column: permission.FieldID,
		toTerm: permission.ByID,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts Permission into PermissionEdge.
func (pe *Permission) ToEdge(order *PermissionOrder) *PermissionEdge {
	if order == nil {
		order = DefaultPermissionOrder
	}
	return &PermissionEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// PoliceStationEdge is the edge representation of PoliceStation.
type PoliceStationEdge struct {
	Node   *PoliceStation `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// PoliceStationConnection is the connection containing edges to PoliceStation.
type PoliceStationConnection struct {
	Edges      []*PoliceStationEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *PoliceStationConnection) build(nodes []*PoliceStation, pager *policestationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PoliceStation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PoliceStation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PoliceStation {
			return nodes[i]
		}
	}
	c.Edges = make([]*PoliceStationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PoliceStationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PoliceStationPaginateOption enables pagination customization.
type PoliceStationPaginateOption func(*policestationPager) error

// WithPoliceStationOrder configures pagination ordering.
func WithPoliceStationOrder(order []*PoliceStationOrder) PoliceStationPaginateOption {
	return func(pager *policestationPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPoliceStationFilter configures pagination filter.
func WithPoliceStationFilter(filter func(*PoliceStationQuery) (*PoliceStationQuery, error)) PoliceStationPaginateOption {
	return func(pager *policestationPager) error {
		if filter == nil {
			return errors.New("PoliceStationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type policestationPager struct {
	reverse bool
	order   []*PoliceStationOrder
	filter  func(*PoliceStationQuery) (*PoliceStationQuery, error)
}

func newPoliceStationPager(opts []PoliceStationPaginateOption, reverse bool) (*policestationPager, error) {
	pager := &policestationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *policestationPager) applyFilter(query *PoliceStationQuery) (*PoliceStationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *policestationPager) toCursor(ps *PoliceStation) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(ps).Value)
	}
	return Cursor{ID: ps.ID, Value: cs_}
}

func (p *policestationPager) applyCursors(query *PoliceStationQuery, after, before *Cursor) (*PoliceStationQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPoliceStationOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *policestationPager) applyOrder(query *PoliceStationQuery) *PoliceStationQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPoliceStationOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPoliceStationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *policestationPager) orderExpr(query *PoliceStationQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPoliceStationOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to PoliceStation.
func (ps *PoliceStationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PoliceStationPaginateOption,
) (*PoliceStationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPoliceStationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ps, err = pager.applyFilter(ps); err != nil {
		return nil, err
	}
	conn := &PoliceStationConnection{Edges: []*PoliceStationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ps.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ps, err = pager.applyCursors(ps, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ps.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ps.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ps = pager.applyOrder(ps)
	nodes, err := ps.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PoliceStationOrderFieldCreatedAt orders PoliceStation by created_at.
	PoliceStationOrderFieldCreatedAt = &PoliceStationOrderField{
		Value: func(ps *PoliceStation) (ent.Value, error) {
			return ps.CreatedAt, nil
		},
		column: policestation.FieldCreatedAt,
		toTerm: policestation.ByCreatedAt,
		toCursor: func(ps *PoliceStation) Cursor {
			return Cursor{
				ID:    ps.ID,
				Value: ps.CreatedAt,
			}
		},
	}
	// PoliceStationOrderFieldUpdatedAt orders PoliceStation by updated_at.
	PoliceStationOrderFieldUpdatedAt = &PoliceStationOrderField{
		Value: func(ps *PoliceStation) (ent.Value, error) {
			return ps.UpdatedAt, nil
		},
		column: policestation.FieldUpdatedAt,
		toTerm: policestation.ByUpdatedAt,
		toCursor: func(ps *PoliceStation) Cursor {
			return Cursor{
				ID:    ps.ID,
				Value: ps.UpdatedAt,
			}
		},
	}
	// PoliceStationOrderFieldName orders PoliceStation by name.
	PoliceStationOrderFieldName = &PoliceStationOrderField{
		Value: func(ps *PoliceStation) (ent.Value, error) {
			return ps.Name, nil
		},
		column: policestation.FieldName,
		toTerm: policestation.ByName,
		toCursor: func(ps *PoliceStation) Cursor {
			return Cursor{
				ID:    ps.ID,
				Value: ps.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PoliceStationOrderField) String() string {
	var str string
	switch f.column {
	case PoliceStationOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case PoliceStationOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	case PoliceStationOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PoliceStationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PoliceStationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PoliceStationOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *PoliceStationOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *PoliceStationOrderFieldUpdatedAt
	case "NAME":
		*f = *PoliceStationOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid PoliceStationOrderField", str)
	}
	return nil
}

// PoliceStationOrderField defines the ordering field of PoliceStation.
type PoliceStationOrderField struct {
	// Value extracts the ordering value from the given PoliceStation.
	Value    func(*PoliceStation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) policestation.OrderOption
	toCursor func(*PoliceStation) Cursor
}

// PoliceStationOrder defines the ordering of PoliceStation.
type PoliceStationOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *PoliceStationOrderField `json:"field"`
}

// DefaultPoliceStationOrder is the default ordering of PoliceStation.
var DefaultPoliceStationOrder = &PoliceStationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PoliceStationOrderField{
		Value: func(ps *PoliceStation) (ent.Value, error) {
			return ps.ID, nil
		},
		column: policestation.FieldID,
		toTerm: policestation.ByID,
		toCursor: func(ps *PoliceStation) Cursor {
			return Cursor{ID: ps.ID}
		},
	},
}

// ToEdge converts PoliceStation into PoliceStationEdge.
func (ps *PoliceStation) ToEdge(order *PoliceStationOrder) *PoliceStationEdge {
	if order == nil {
		order = DefaultPoliceStationOrder
	}
	return &PoliceStationEdge{
		Node:   ps,
		Cursor: order.Field.toCursor(ps),
	}
}

// RoleEdge is the edge representation of Role.
type RoleEdge struct {
	Node   *Role  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RoleConnection is the connection containing edges to Role.
type RoleConnection struct {
	Edges      []*RoleEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RoleConnection) build(nodes []*Role, pager *rolePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Role
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Role {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Role {
			return nodes[i]
		}
	}
	c.Edges = make([]*RoleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RolePaginateOption enables pagination customization.
type RolePaginateOption func(*rolePager) error

// WithRoleOrder configures pagination ordering.
func WithRoleOrder(order []*RoleOrder) RolePaginateOption {
	return func(pager *rolePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithRoleFilter configures pagination filter.
func WithRoleFilter(filter func(*RoleQuery) (*RoleQuery, error)) RolePaginateOption {
	return func(pager *rolePager) error {
		if filter == nil {
			return errors.New("RoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rolePager struct {
	reverse bool
	order   []*RoleOrder
	filter  func(*RoleQuery) (*RoleQuery, error)
}

func newRolePager(opts []RolePaginateOption, reverse bool) (*rolePager, error) {
	pager := &rolePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *rolePager) applyFilter(query *RoleQuery) (*RoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rolePager) toCursor(r *Role) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(r).Value)
	}
	return Cursor{ID: r.ID, Value: cs_}
}

func (p *rolePager) applyCursors(query *RoleQuery, after, before *Cursor) (*RoleQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultRoleOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rolePager) applyOrder(query *RoleQuery) *RoleQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultRoleOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultRoleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *rolePager) orderExpr(query *RoleQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultRoleOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Role.
func (r *RoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RolePaginateOption,
) (*RoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRolePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RoleConnection{Edges: []*RoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := r.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RoleOrderFieldCreatedAt orders Role by created_at.
	RoleOrderFieldCreatedAt = &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.CreatedAt, nil
		},
		column: role.FieldCreatedAt,
		toTerm: role.ByCreatedAt,
		toCursor: func(r *Role) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.CreatedAt,
			}
		},
	}
	// RoleOrderFieldUpdatedAt orders Role by updated_at.
	RoleOrderFieldUpdatedAt = &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.UpdatedAt, nil
		},
		column: role.FieldUpdatedAt,
		toTerm: role.ByUpdatedAt,
		toCursor: func(r *Role) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RoleOrderField) String() string {
	var str string
	switch f.column {
	case RoleOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case RoleOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RoleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RoleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RoleOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *RoleOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *RoleOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid RoleOrderField", str)
	}
	return nil
}

// RoleOrderField defines the ordering field of Role.
type RoleOrderField struct {
	// Value extracts the ordering value from the given Role.
	Value    func(*Role) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) role.OrderOption
	toCursor func(*Role) Cursor
}

// RoleOrder defines the ordering of Role.
type RoleOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RoleOrderField `json:"field"`
}

// DefaultRoleOrder is the default ordering of Role.
var DefaultRoleOrder = &RoleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.ID, nil
		},
		column: role.FieldID,
		toTerm: role.ByID,
		toCursor: func(r *Role) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Role into RoleEdge.
func (r *Role) ToEdge(order *RoleOrder) *RoleEdge {
	if order == nil {
		order = DefaultRoleOrder
	}
	return &RoleEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order []*UserOrder) UserPaginateOption {
	return func(pager *userPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   []*UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(u).Value)
	}
	return Cursor{ID: u.ID, Value: cs_}
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultUserOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultUserOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.UpdatedAt, nil
		},
		column: user.FieldUpdatedAt,
		toTerm: user.ByUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
	// UserOrderFieldName orders User by name.
	UserOrderFieldName = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Name, nil
		},
		column: user.FieldName,
		toTerm: user.ByName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Name,
			}
		},
	}
	// UserOrderFieldEmail orders User by email.
	UserOrderFieldEmail = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Email, nil
		},
		column: user.FieldEmail,
		toTerm: user.ByEmail,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Email,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case UserOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	case UserOrderFieldName.column:
		str = "NAME"
	case UserOrderFieldEmail.column:
		str = "EMAIL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *UserOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *UserOrderFieldUpdatedAt
	case "NAME":
		*f = *UserOrderFieldName
	case "EMAIL":
		*f = *UserOrderFieldEmail
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// VehicleDataEdge is the edge representation of VehicleData.
type VehicleDataEdge struct {
	Node   *VehicleData `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// VehicleDataConnection is the connection containing edges to VehicleData.
type VehicleDataConnection struct {
	Edges      []*VehicleDataEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *VehicleDataConnection) build(nodes []*VehicleData, pager *vehicledataPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VehicleData
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VehicleData {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VehicleData {
			return nodes[i]
		}
	}
	c.Edges = make([]*VehicleDataEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VehicleDataEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VehicleDataPaginateOption enables pagination customization.
type VehicleDataPaginateOption func(*vehicledataPager) error

// WithVehicleDataOrder configures pagination ordering.
func WithVehicleDataOrder(order []*VehicleDataOrder) VehicleDataPaginateOption {
	return func(pager *vehicledataPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithVehicleDataFilter configures pagination filter.
func WithVehicleDataFilter(filter func(*VehicleDataQuery) (*VehicleDataQuery, error)) VehicleDataPaginateOption {
	return func(pager *vehicledataPager) error {
		if filter == nil {
			return errors.New("VehicleDataQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vehicledataPager struct {
	reverse bool
	order   []*VehicleDataOrder
	filter  func(*VehicleDataQuery) (*VehicleDataQuery, error)
}

func newVehicleDataPager(opts []VehicleDataPaginateOption, reverse bool) (*vehicledataPager, error) {
	pager := &vehicledataPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *vehicledataPager) applyFilter(query *VehicleDataQuery) (*VehicleDataQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vehicledataPager) toCursor(vd *VehicleData) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(vd).Value)
	}
	return Cursor{ID: vd.ID, Value: cs_}
}

func (p *vehicledataPager) applyCursors(query *VehicleDataQuery, after, before *Cursor) (*VehicleDataQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultVehicleDataOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vehicledataPager) applyOrder(query *VehicleDataQuery) *VehicleDataQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultVehicleDataOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultVehicleDataOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *vehicledataPager) orderExpr(query *VehicleDataQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultVehicleDataOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to VehicleData.
func (vd *VehicleDataQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VehicleDataPaginateOption,
) (*VehicleDataConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVehicleDataPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vd, err = pager.applyFilter(vd); err != nil {
		return nil, err
	}
	conn := &VehicleDataConnection{Edges: []*VehicleDataEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := vd.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vd, err = pager.applyCursors(vd, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		vd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vd.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vd = pager.applyOrder(vd)
	nodes, err := vd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// VehicleDataOrderFieldCreatedAt orders VehicleData by created_at.
	VehicleDataOrderFieldCreatedAt = &VehicleDataOrderField{
		Value: func(vd *VehicleData) (ent.Value, error) {
			return vd.CreatedAt, nil
		},
		column: vehicledata.FieldCreatedAt,
		toTerm: vehicledata.ByCreatedAt,
		toCursor: func(vd *VehicleData) Cursor {
			return Cursor{
				ID:    vd.ID,
				Value: vd.CreatedAt,
			}
		},
	}
	// VehicleDataOrderFieldUpdatedAt orders VehicleData by updated_at.
	VehicleDataOrderFieldUpdatedAt = &VehicleDataOrderField{
		Value: func(vd *VehicleData) (ent.Value, error) {
			return vd.UpdatedAt, nil
		},
		column: vehicledata.FieldUpdatedAt,
		toTerm: vehicledata.ByUpdatedAt,
		toCursor: func(vd *VehicleData) Cursor {
			return Cursor{
				ID:    vd.ID,
				Value: vd.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f VehicleDataOrderField) String() string {
	var str string
	switch f.column {
	case VehicleDataOrderFieldCreatedAt.column:
		str = "CreatedAt"
	case VehicleDataOrderFieldUpdatedAt.column:
		str = "UpdatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f VehicleDataOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *VehicleDataOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("VehicleDataOrderField %T must be a string", v)
	}
	switch str {
	case "CreatedAt":
		*f = *VehicleDataOrderFieldCreatedAt
	case "UpdatedAt":
		*f = *VehicleDataOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid VehicleDataOrderField", str)
	}
	return nil
}

// VehicleDataOrderField defines the ordering field of VehicleData.
type VehicleDataOrderField struct {
	// Value extracts the ordering value from the given VehicleData.
	Value    func(*VehicleData) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vehicledata.OrderOption
	toCursor func(*VehicleData) Cursor
}

// VehicleDataOrder defines the ordering of VehicleData.
type VehicleDataOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *VehicleDataOrderField `json:"field"`
}

// DefaultVehicleDataOrder is the default ordering of VehicleData.
var DefaultVehicleDataOrder = &VehicleDataOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VehicleDataOrderField{
		Value: func(vd *VehicleData) (ent.Value, error) {
			return vd.ID, nil
		},
		column: vehicledata.FieldID,
		toTerm: vehicledata.ByID,
		toCursor: func(vd *VehicleData) Cursor {
			return Cursor{ID: vd.ID}
		},
	},
}

// ToEdge converts VehicleData into VehicleDataEdge.
func (vd *VehicleData) ToEdge(order *VehicleDataOrder) *VehicleDataEdge {
	if order == nil {
		order = DefaultVehicleDataOrder
	}
	return &VehicleDataEdge{
		Node:   vd,
		Cursor: order.Field.toCursor(vd),
	}
}
