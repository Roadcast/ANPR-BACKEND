// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-ent-project/internal/ent/policestation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PoliceStation is the model entity for the PoliceStation schema.
type PoliceStation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Location holds the value of the "location" field.
	Location map[string]interface{} `json:"location,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PoliceStationQuery when eager-loading is set.
	Edges                         PoliceStationEdges `json:"edges"`
	police_station_child_stations *uuid.UUID
	selectValues                  sql.SelectValues
}

// PoliceStationEdges holds the relations/edges for other nodes in the graph.
type PoliceStationEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// ParentStation holds the value of the parent_station edge.
	ParentStation *PoliceStation `json:"parent_station,omitempty"`
	// ChildStations holds the value of the child_stations edge.
	ChildStations []*PoliceStation `json:"child_stations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedUsers         map[string][]*User
	namedChildStations map[string][]*PoliceStation
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e PoliceStationEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ParentStationOrErr returns the ParentStation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PoliceStationEdges) ParentStationOrErr() (*PoliceStation, error) {
	if e.ParentStation != nil {
		return e.ParentStation, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: policestation.Label}
	}
	return nil, &NotLoadedError{edge: "parent_station"}
}

// ChildStationsOrErr returns the ChildStations value or an error if the edge
// was not loaded in eager-loading.
func (e PoliceStationEdges) ChildStationsOrErr() ([]*PoliceStation, error) {
	if e.loadedTypes[2] {
		return e.ChildStations, nil
	}
	return nil, &NotLoadedError{edge: "child_stations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PoliceStation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case policestation.FieldLocation:
			values[i] = new([]byte)
		case policestation.FieldName, policestation.FieldCode, policestation.FieldIdentifier:
			values[i] = new(sql.NullString)
		case policestation.FieldCreatedAt, policestation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case policestation.FieldID:
			values[i] = new(uuid.UUID)
		case policestation.ForeignKeys[0]: // police_station_child_stations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PoliceStation fields.
func (ps *PoliceStation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case policestation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ps.ID = *value
			}
		case policestation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case policestation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		case policestation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case policestation.FieldLocation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ps.Location); err != nil {
					return fmt.Errorf("unmarshal field location: %w", err)
				}
			}
		case policestation.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ps.Code = value.String
			}
		case policestation.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ps.Identifier = value.String
			}
		case policestation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field police_station_child_stations", values[i])
			} else if value.Valid {
				ps.police_station_child_stations = new(uuid.UUID)
				*ps.police_station_child_stations = *value.S.(*uuid.UUID)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PoliceStation.
// This includes values selected through modifiers, order, etc.
func (ps *PoliceStation) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the PoliceStation entity.
func (ps *PoliceStation) QueryUsers() *UserQuery {
	return NewPoliceStationClient(ps.config).QueryUsers(ps)
}

// QueryParentStation queries the "parent_station" edge of the PoliceStation entity.
func (ps *PoliceStation) QueryParentStation() *PoliceStationQuery {
	return NewPoliceStationClient(ps.config).QueryParentStation(ps)
}

// QueryChildStations queries the "child_stations" edge of the PoliceStation entity.
func (ps *PoliceStation) QueryChildStations() *PoliceStationQuery {
	return NewPoliceStationClient(ps.config).QueryChildStations(ps)
}

// Update returns a builder for updating this PoliceStation.
// Note that you need to call PoliceStation.Unwrap() before calling this method if this PoliceStation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PoliceStation) Update() *PoliceStationUpdateOne {
	return NewPoliceStationClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PoliceStation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PoliceStation) Unwrap() *PoliceStation {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PoliceStation is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PoliceStation) String() string {
	var builder strings.Builder
	builder.WriteString("PoliceStation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(fmt.Sprintf("%v", ps.Location))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(ps.Code)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(ps.Identifier)
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ps *PoliceStation) NamedUsers(name string) ([]*User, error) {
	if ps.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ps.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ps *PoliceStation) appendNamedUsers(name string, edges ...*User) {
	if ps.Edges.namedUsers == nil {
		ps.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		ps.Edges.namedUsers[name] = []*User{}
	} else {
		ps.Edges.namedUsers[name] = append(ps.Edges.namedUsers[name], edges...)
	}
}

// NamedChildStations returns the ChildStations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ps *PoliceStation) NamedChildStations(name string) ([]*PoliceStation, error) {
	if ps.Edges.namedChildStations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ps.Edges.namedChildStations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ps *PoliceStation) appendNamedChildStations(name string, edges ...*PoliceStation) {
	if ps.Edges.namedChildStations == nil {
		ps.Edges.namedChildStations = make(map[string][]*PoliceStation)
	}
	if len(edges) == 0 {
		ps.Edges.namedChildStations[name] = []*PoliceStation{}
	} else {
		ps.Edges.namedChildStations[name] = append(ps.Edges.namedChildStations[name], edges...)
	}
}

// PoliceStations is a parsable slice of PoliceStation.
type PoliceStations []*PoliceStation
