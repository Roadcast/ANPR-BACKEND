// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/car"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CarUpdate is the builder for updating Car entities.
type CarUpdate struct {
	config
	hooks    []Hook
	mutation *CarMutation
}

// Where appends a list predicates to the CarUpdate builder.
func (cu *CarUpdate) Where(ps ...predicate.Car) *CarUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CarUpdate) SetUpdatedAt(t time.Time) *CarUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetMake sets the "make" field.
func (cu *CarUpdate) SetMake(s string) *CarUpdate {
	cu.mutation.SetMake(s)
	return cu
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (cu *CarUpdate) SetNillableMake(s *string) *CarUpdate {
	if s != nil {
		cu.SetMake(*s)
	}
	return cu
}

// ClearMake clears the value of the "make" field.
func (cu *CarUpdate) ClearMake() *CarUpdate {
	cu.mutation.ClearMake()
	return cu
}

// SetModel sets the "model" field.
func (cu *CarUpdate) SetModel(s string) *CarUpdate {
	cu.mutation.SetModel(s)
	return cu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cu *CarUpdate) SetNillableModel(s *string) *CarUpdate {
	if s != nil {
		cu.SetModel(*s)
	}
	return cu
}

// ClearModel clears the value of the "model" field.
func (cu *CarUpdate) ClearModel() *CarUpdate {
	cu.mutation.ClearModel()
	return cu
}

// SetYear sets the "year" field.
func (cu *CarUpdate) SetYear(i int) *CarUpdate {
	cu.mutation.ResetYear()
	cu.mutation.SetYear(i)
	return cu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (cu *CarUpdate) SetNillableYear(i *int) *CarUpdate {
	if i != nil {
		cu.SetYear(*i)
	}
	return cu
}

// AddYear adds i to the "year" field.
func (cu *CarUpdate) AddYear(i int) *CarUpdate {
	cu.mutation.AddYear(i)
	return cu
}

// ClearYear clears the value of the "year" field.
func (cu *CarUpdate) ClearYear() *CarUpdate {
	cu.mutation.ClearYear()
	return cu
}

// SetRegistration sets the "registration" field.
func (cu *CarUpdate) SetRegistration(s string) *CarUpdate {
	cu.mutation.SetRegistration(s)
	return cu
}

// SetNillableRegistration sets the "registration" field if the given value is not nil.
func (cu *CarUpdate) SetNillableRegistration(s *string) *CarUpdate {
	if s != nil {
		cu.SetRegistration(*s)
	}
	return cu
}

// SetColor sets the "color" field.
func (cu *CarUpdate) SetColor(s string) *CarUpdate {
	cu.mutation.SetColor(s)
	return cu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cu *CarUpdate) SetNillableColor(s *string) *CarUpdate {
	if s != nil {
		cu.SetColor(*s)
	}
	return cu
}

// ClearColor clears the value of the "color" field.
func (cu *CarUpdate) ClearColor() *CarUpdate {
	cu.mutation.ClearColor()
	return cu
}

// SetPoliceStationID sets the "police_station_id" field.
func (cu *CarUpdate) SetPoliceStationID(u uuid.UUID) *CarUpdate {
	cu.mutation.SetPoliceStationID(u)
	return cu
}

// SetNillablePoliceStationID sets the "police_station_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillablePoliceStationID(u *uuid.UUID) *CarUpdate {
	if u != nil {
		cu.SetPoliceStationID(*u)
	}
	return cu
}

// ClearPoliceStationID clears the value of the "police_station_id" field.
func (cu *CarUpdate) ClearPoliceStationID() *CarUpdate {
	cu.mutation.ClearPoliceStationID()
	return cu
}

// SetStolenDate sets the "stolen_date" field.
func (cu *CarUpdate) SetStolenDate(t time.Time) *CarUpdate {
	cu.mutation.SetStolenDate(t)
	return cu
}

// SetNillableStolenDate sets the "stolen_date" field if the given value is not nil.
func (cu *CarUpdate) SetNillableStolenDate(t *time.Time) *CarUpdate {
	if t != nil {
		cu.SetStolenDate(*t)
	}
	return cu
}

// ClearStolenDate clears the value of the "stolen_date" field.
func (cu *CarUpdate) ClearStolenDate() *CarUpdate {
	cu.mutation.ClearStolenDate()
	return cu
}

// SetFirNumber sets the "fir_number" field.
func (cu *CarUpdate) SetFirNumber(s string) *CarUpdate {
	cu.mutation.SetFirNumber(s)
	return cu
}

// SetNillableFirNumber sets the "fir_number" field if the given value is not nil.
func (cu *CarUpdate) SetNillableFirNumber(s *string) *CarUpdate {
	if s != nil {
		cu.SetFirNumber(*s)
	}
	return cu
}

// ClearFirNumber clears the value of the "fir_number" field.
func (cu *CarUpdate) ClearFirNumber() *CarUpdate {
	cu.mutation.ClearFirNumber()
	return cu
}

// SetPoliceStation sets the "police_station" edge to the PoliceStation entity.
func (cu *CarUpdate) SetPoliceStation(p *PoliceStation) *CarUpdate {
	return cu.SetPoliceStationID(p.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cu *CarUpdate) Mutation() *CarMutation {
	return cu.mutation
}

// ClearPoliceStation clears the "police_station" edge to the PoliceStation entity.
func (cu *CarUpdate) ClearPoliceStation() *CarUpdate {
	cu.mutation.ClearPoliceStation()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CarUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if car.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized car.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := car.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CarUpdate) check() error {
	if v, ok := cu.mutation.Registration(); ok {
		if err := car.RegistrationValidator(v); err != nil {
			return &ValidationError{Name: "registration", err: fmt.Errorf(`ent: validator failed for field "Car.registration": %w`, err)}
		}
	}
	return nil
}

func (cu *CarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(car.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Make(); ok {
		_spec.SetField(car.FieldMake, field.TypeString, value)
	}
	if cu.mutation.MakeCleared() {
		_spec.ClearField(car.FieldMake, field.TypeString)
	}
	if value, ok := cu.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
	}
	if cu.mutation.ModelCleared() {
		_spec.ClearField(car.FieldModel, field.TypeString)
	}
	if value, ok := cu.mutation.Year(); ok {
		_spec.SetField(car.FieldYear, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedYear(); ok {
		_spec.AddField(car.FieldYear, field.TypeInt, value)
	}
	if cu.mutation.YearCleared() {
		_spec.ClearField(car.FieldYear, field.TypeInt)
	}
	if value, ok := cu.mutation.Registration(); ok {
		_spec.SetField(car.FieldRegistration, field.TypeString, value)
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.SetField(car.FieldColor, field.TypeString, value)
	}
	if cu.mutation.ColorCleared() {
		_spec.ClearField(car.FieldColor, field.TypeString)
	}
	if value, ok := cu.mutation.StolenDate(); ok {
		_spec.SetField(car.FieldStolenDate, field.TypeTime, value)
	}
	if cu.mutation.StolenDateCleared() {
		_spec.ClearField(car.FieldStolenDate, field.TypeTime)
	}
	if value, ok := cu.mutation.FirNumber(); ok {
		_spec.SetField(car.FieldFirNumber, field.TypeString, value)
	}
	if cu.mutation.FirNumberCleared() {
		_spec.ClearField(car.FieldFirNumber, field.TypeString)
	}
	if cu.mutation.PoliceStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.PoliceStationTable,
			Columns: []string{car.PoliceStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PoliceStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.PoliceStationTable,
			Columns: []string{car.PoliceStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarUpdateOne is the builder for updating a single Car entity.
type CarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CarUpdateOne) SetUpdatedAt(t time.Time) *CarUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetMake sets the "make" field.
func (cuo *CarUpdateOne) SetMake(s string) *CarUpdateOne {
	cuo.mutation.SetMake(s)
	return cuo
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableMake(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetMake(*s)
	}
	return cuo
}

// ClearMake clears the value of the "make" field.
func (cuo *CarUpdateOne) ClearMake() *CarUpdateOne {
	cuo.mutation.ClearMake()
	return cuo
}

// SetModel sets the "model" field.
func (cuo *CarUpdateOne) SetModel(s string) *CarUpdateOne {
	cuo.mutation.SetModel(s)
	return cuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableModel(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetModel(*s)
	}
	return cuo
}

// ClearModel clears the value of the "model" field.
func (cuo *CarUpdateOne) ClearModel() *CarUpdateOne {
	cuo.mutation.ClearModel()
	return cuo
}

// SetYear sets the "year" field.
func (cuo *CarUpdateOne) SetYear(i int) *CarUpdateOne {
	cuo.mutation.ResetYear()
	cuo.mutation.SetYear(i)
	return cuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableYear(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetYear(*i)
	}
	return cuo
}

// AddYear adds i to the "year" field.
func (cuo *CarUpdateOne) AddYear(i int) *CarUpdateOne {
	cuo.mutation.AddYear(i)
	return cuo
}

// ClearYear clears the value of the "year" field.
func (cuo *CarUpdateOne) ClearYear() *CarUpdateOne {
	cuo.mutation.ClearYear()
	return cuo
}

// SetRegistration sets the "registration" field.
func (cuo *CarUpdateOne) SetRegistration(s string) *CarUpdateOne {
	cuo.mutation.SetRegistration(s)
	return cuo
}

// SetNillableRegistration sets the "registration" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableRegistration(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetRegistration(*s)
	}
	return cuo
}

// SetColor sets the "color" field.
func (cuo *CarUpdateOne) SetColor(s string) *CarUpdateOne {
	cuo.mutation.SetColor(s)
	return cuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableColor(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetColor(*s)
	}
	return cuo
}

// ClearColor clears the value of the "color" field.
func (cuo *CarUpdateOne) ClearColor() *CarUpdateOne {
	cuo.mutation.ClearColor()
	return cuo
}

// SetPoliceStationID sets the "police_station_id" field.
func (cuo *CarUpdateOne) SetPoliceStationID(u uuid.UUID) *CarUpdateOne {
	cuo.mutation.SetPoliceStationID(u)
	return cuo
}

// SetNillablePoliceStationID sets the "police_station_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillablePoliceStationID(u *uuid.UUID) *CarUpdateOne {
	if u != nil {
		cuo.SetPoliceStationID(*u)
	}
	return cuo
}

// ClearPoliceStationID clears the value of the "police_station_id" field.
func (cuo *CarUpdateOne) ClearPoliceStationID() *CarUpdateOne {
	cuo.mutation.ClearPoliceStationID()
	return cuo
}

// SetStolenDate sets the "stolen_date" field.
func (cuo *CarUpdateOne) SetStolenDate(t time.Time) *CarUpdateOne {
	cuo.mutation.SetStolenDate(t)
	return cuo
}

// SetNillableStolenDate sets the "stolen_date" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableStolenDate(t *time.Time) *CarUpdateOne {
	if t != nil {
		cuo.SetStolenDate(*t)
	}
	return cuo
}

// ClearStolenDate clears the value of the "stolen_date" field.
func (cuo *CarUpdateOne) ClearStolenDate() *CarUpdateOne {
	cuo.mutation.ClearStolenDate()
	return cuo
}

// SetFirNumber sets the "fir_number" field.
func (cuo *CarUpdateOne) SetFirNumber(s string) *CarUpdateOne {
	cuo.mutation.SetFirNumber(s)
	return cuo
}

// SetNillableFirNumber sets the "fir_number" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableFirNumber(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetFirNumber(*s)
	}
	return cuo
}

// ClearFirNumber clears the value of the "fir_number" field.
func (cuo *CarUpdateOne) ClearFirNumber() *CarUpdateOne {
	cuo.mutation.ClearFirNumber()
	return cuo
}

// SetPoliceStation sets the "police_station" edge to the PoliceStation entity.
func (cuo *CarUpdateOne) SetPoliceStation(p *PoliceStation) *CarUpdateOne {
	return cuo.SetPoliceStationID(p.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cuo *CarUpdateOne) Mutation() *CarMutation {
	return cuo.mutation
}

// ClearPoliceStation clears the "police_station" edge to the PoliceStation entity.
func (cuo *CarUpdateOne) ClearPoliceStation() *CarUpdateOne {
	cuo.mutation.ClearPoliceStation()
	return cuo
}

// Where appends a list predicates to the CarUpdate builder.
func (cuo *CarUpdateOne) Where(ps ...predicate.Car) *CarUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarUpdateOne) Select(field string, fields ...string) *CarUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Car entity.
func (cuo *CarUpdateOne) Save(ctx context.Context) (*Car, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarUpdateOne) SaveX(ctx context.Context) *Car {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CarUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if car.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized car.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := car.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CarUpdateOne) check() error {
	if v, ok := cuo.mutation.Registration(); ok {
		if err := car.RegistrationValidator(v); err != nil {
			return &ValidationError{Name: "registration", err: fmt.Errorf(`ent: validator failed for field "Car.registration": %w`, err)}
		}
	}
	return nil
}

func (cuo *CarUpdateOne) sqlSave(ctx context.Context) (_node *Car, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Car.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, car.FieldID)
		for _, f := range fields {
			if !car.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != car.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(car.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Make(); ok {
		_spec.SetField(car.FieldMake, field.TypeString, value)
	}
	if cuo.mutation.MakeCleared() {
		_spec.ClearField(car.FieldMake, field.TypeString)
	}
	if value, ok := cuo.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
	}
	if cuo.mutation.ModelCleared() {
		_spec.ClearField(car.FieldModel, field.TypeString)
	}
	if value, ok := cuo.mutation.Year(); ok {
		_spec.SetField(car.FieldYear, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedYear(); ok {
		_spec.AddField(car.FieldYear, field.TypeInt, value)
	}
	if cuo.mutation.YearCleared() {
		_spec.ClearField(car.FieldYear, field.TypeInt)
	}
	if value, ok := cuo.mutation.Registration(); ok {
		_spec.SetField(car.FieldRegistration, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.SetField(car.FieldColor, field.TypeString, value)
	}
	if cuo.mutation.ColorCleared() {
		_spec.ClearField(car.FieldColor, field.TypeString)
	}
	if value, ok := cuo.mutation.StolenDate(); ok {
		_spec.SetField(car.FieldStolenDate, field.TypeTime, value)
	}
	if cuo.mutation.StolenDateCleared() {
		_spec.ClearField(car.FieldStolenDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.FirNumber(); ok {
		_spec.SetField(car.FieldFirNumber, field.TypeString, value)
	}
	if cuo.mutation.FirNumberCleared() {
		_spec.ClearField(car.FieldFirNumber, field.TypeString)
	}
	if cuo.mutation.PoliceStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.PoliceStationTable,
			Columns: []string{car.PoliceStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PoliceStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.PoliceStationTable,
			Columns: []string{car.PoliceStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Car{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
