// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/vehicledata"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VehicleDataCreate is the builder for creating a VehicleData entity.
type VehicleDataCreate struct {
	config
	mutation *VehicleDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vdc *VehicleDataCreate) SetCreatedAt(t time.Time) *VehicleDataCreate {
	vdc.mutation.SetCreatedAt(t)
	return vdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableCreatedAt(t *time.Time) *VehicleDataCreate {
	if t != nil {
		vdc.SetCreatedAt(*t)
	}
	return vdc
}

// SetUpdatedAt sets the "updated_at" field.
func (vdc *VehicleDataCreate) SetUpdatedAt(t time.Time) *VehicleDataCreate {
	vdc.mutation.SetUpdatedAt(t)
	return vdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableUpdatedAt(t *time.Time) *VehicleDataCreate {
	if t != nil {
		vdc.SetUpdatedAt(*t)
	}
	return vdc
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (vdc *VehicleDataCreate) SetPlateBoundingBox(i []int) *VehicleDataCreate {
	vdc.mutation.SetPlateBoundingBox(i)
	return vdc
}

// SetPlateChannel sets the "plate_channel" field.
func (vdc *VehicleDataCreate) SetPlateChannel(i int) *VehicleDataCreate {
	vdc.mutation.SetPlateChannel(i)
	return vdc
}

// SetNillablePlateChannel sets the "plate_channel" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateChannel(i *int) *VehicleDataCreate {
	if i != nil {
		vdc.SetPlateChannel(*i)
	}
	return vdc
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (vdc *VehicleDataCreate) SetPlateIsExist(b bool) *VehicleDataCreate {
	vdc.mutation.SetPlateIsExist(b)
	return vdc
}

// SetNillablePlateIsExist sets the "plate_is_exist" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateIsExist(b *bool) *VehicleDataCreate {
	if b != nil {
		vdc.SetPlateIsExist(*b)
	}
	return vdc
}

// SetPlateColor sets the "plate_color" field.
func (vdc *VehicleDataCreate) SetPlateColor(s string) *VehicleDataCreate {
	vdc.mutation.SetPlateColor(s)
	return vdc
}

// SetNillablePlateColor sets the "plate_color" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateColor(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetPlateColor(*s)
	}
	return vdc
}

// SetPlateNumber sets the "plate_number" field.
func (vdc *VehicleDataCreate) SetPlateNumber(s string) *VehicleDataCreate {
	vdc.mutation.SetPlateNumber(s)
	return vdc
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateNumber(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetPlateNumber(*s)
	}
	return vdc
}

// SetPlateType sets the "plate_type" field.
func (vdc *VehicleDataCreate) SetPlateType(s string) *VehicleDataCreate {
	vdc.mutation.SetPlateType(s)
	return vdc
}

// SetNillablePlateType sets the "plate_type" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateType(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetPlateType(*s)
	}
	return vdc
}

// SetPlateRegion sets the "plate_region" field.
func (vdc *VehicleDataCreate) SetPlateRegion(s string) *VehicleDataCreate {
	vdc.mutation.SetPlateRegion(s)
	return vdc
}

// SetNillablePlateRegion sets the "plate_region" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateRegion(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetPlateRegion(*s)
	}
	return vdc
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (vdc *VehicleDataCreate) SetPlateUploadNum(i int) *VehicleDataCreate {
	vdc.mutation.SetPlateUploadNum(i)
	return vdc
}

// SetNillablePlateUploadNum sets the "plate_upload_num" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillablePlateUploadNum(i *int) *VehicleDataCreate {
	if i != nil {
		vdc.SetPlateUploadNum(*i)
	}
	return vdc
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (vdc *VehicleDataCreate) SetSnapAllowUser(b bool) *VehicleDataCreate {
	vdc.mutation.SetSnapAllowUser(b)
	return vdc
}

// SetNillableSnapAllowUser sets the "snap_allow_user" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapAllowUser(b *bool) *VehicleDataCreate {
	if b != nil {
		vdc.SetSnapAllowUser(*b)
	}
	return vdc
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (vdc *VehicleDataCreate) SetSnapAllowUserEndTime(s string) *VehicleDataCreate {
	vdc.mutation.SetSnapAllowUserEndTime(s)
	return vdc
}

// SetNillableSnapAllowUserEndTime sets the "snap_allow_user_end_time" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapAllowUserEndTime(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetSnapAllowUserEndTime(*s)
	}
	return vdc
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (vdc *VehicleDataCreate) SetSnapDefenceCode(s string) *VehicleDataCreate {
	vdc.mutation.SetSnapDefenceCode(s)
	return vdc
}

// SetNillableSnapDefenceCode sets the "snap_defence_code" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapDefenceCode(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetSnapDefenceCode(*s)
	}
	return vdc
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (vdc *VehicleDataCreate) SetSnapDeviceID(s string) *VehicleDataCreate {
	vdc.mutation.SetSnapDeviceID(s)
	return vdc
}

// SetNillableSnapDeviceID sets the "snap_device_id" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapDeviceID(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetSnapDeviceID(*s)
	}
	return vdc
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (vdc *VehicleDataCreate) SetSnapInCarPeopleNum(i int) *VehicleDataCreate {
	vdc.mutation.SetSnapInCarPeopleNum(i)
	return vdc
}

// SetNillableSnapInCarPeopleNum sets the "snap_in_car_people_num" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapInCarPeopleNum(i *int) *VehicleDataCreate {
	if i != nil {
		vdc.SetSnapInCarPeopleNum(*i)
	}
	return vdc
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (vdc *VehicleDataCreate) SetSnapLanNo(i int) *VehicleDataCreate {
	vdc.mutation.SetSnapLanNo(i)
	return vdc
}

// SetNillableSnapLanNo sets the "snap_lan_no" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapLanNo(i *int) *VehicleDataCreate {
	if i != nil {
		vdc.SetSnapLanNo(*i)
	}
	return vdc
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (vdc *VehicleDataCreate) SetSnapOpenStrobe(b bool) *VehicleDataCreate {
	vdc.mutation.SetSnapOpenStrobe(b)
	return vdc
}

// SetNillableSnapOpenStrobe sets the "snap_open_strobe" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableSnapOpenStrobe(b *bool) *VehicleDataCreate {
	if b != nil {
		vdc.SetSnapOpenStrobe(*b)
	}
	return vdc
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (vdc *VehicleDataCreate) SetVehicleBoundingBox(i []int) *VehicleDataCreate {
	vdc.mutation.SetVehicleBoundingBox(i)
	return vdc
}

// SetVehicleSeries sets the "vehicle_series" field.
func (vdc *VehicleDataCreate) SetVehicleSeries(s string) *VehicleDataCreate {
	vdc.mutation.SetVehicleSeries(s)
	return vdc
}

// SetNillableVehicleSeries sets the "vehicle_series" field if the given value is not nil.
func (vdc *VehicleDataCreate) SetNillableVehicleSeries(s *string) *VehicleDataCreate {
	if s != nil {
		vdc.SetVehicleSeries(*s)
	}
	return vdc
}

// SetID sets the "id" field.
func (vdc *VehicleDataCreate) SetID(i int) *VehicleDataCreate {
	vdc.mutation.SetID(i)
	return vdc
}

// Mutation returns the VehicleDataMutation object of the builder.
func (vdc *VehicleDataCreate) Mutation() *VehicleDataMutation {
	return vdc.mutation
}

// Save creates the VehicleData in the database.
func (vdc *VehicleDataCreate) Save(ctx context.Context) (*VehicleData, error) {
	vdc.defaults()
	return withHooks(ctx, vdc.sqlSave, vdc.mutation, vdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VehicleDataCreate) SaveX(ctx context.Context) *VehicleData {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdc *VehicleDataCreate) Exec(ctx context.Context) error {
	_, err := vdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdc *VehicleDataCreate) ExecX(ctx context.Context) {
	if err := vdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdc *VehicleDataCreate) defaults() {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		v := vehicledata.DefaultCreatedAt()
		vdc.mutation.SetCreatedAt(v)
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		v := vehicledata.DefaultUpdatedAt()
		vdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VehicleDataCreate) check() error {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VehicleData.created_at"`)}
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VehicleData.updated_at"`)}
	}
	return nil
}

func (vdc *VehicleDataCreate) sqlSave(ctx context.Context) (*VehicleData, error) {
	if err := vdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	vdc.mutation.id = &_node.ID
	vdc.mutation.done = true
	return _node, nil
}

func (vdc *VehicleDataCreate) createSpec() (*VehicleData, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleData{config: vdc.config}
		_spec = sqlgraph.NewCreateSpec(vehicledata.Table, sqlgraph.NewFieldSpec(vehicledata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vdc.conflict
	if id, ok := vdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vdc.mutation.CreatedAt(); ok {
		_spec.SetField(vehicledata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vdc.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicledata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vdc.mutation.PlateBoundingBox(); ok {
		_spec.SetField(vehicledata.FieldPlateBoundingBox, field.TypeJSON, value)
		_node.PlateBoundingBox = value
	}
	if value, ok := vdc.mutation.PlateChannel(); ok {
		_spec.SetField(vehicledata.FieldPlateChannel, field.TypeInt, value)
		_node.PlateChannel = value
	}
	if value, ok := vdc.mutation.PlateIsExist(); ok {
		_spec.SetField(vehicledata.FieldPlateIsExist, field.TypeBool, value)
		_node.PlateIsExist = value
	}
	if value, ok := vdc.mutation.PlateColor(); ok {
		_spec.SetField(vehicledata.FieldPlateColor, field.TypeString, value)
		_node.PlateColor = value
	}
	if value, ok := vdc.mutation.PlateNumber(); ok {
		_spec.SetField(vehicledata.FieldPlateNumber, field.TypeString, value)
		_node.PlateNumber = value
	}
	if value, ok := vdc.mutation.PlateType(); ok {
		_spec.SetField(vehicledata.FieldPlateType, field.TypeString, value)
		_node.PlateType = value
	}
	if value, ok := vdc.mutation.PlateRegion(); ok {
		_spec.SetField(vehicledata.FieldPlateRegion, field.TypeString, value)
		_node.PlateRegion = value
	}
	if value, ok := vdc.mutation.PlateUploadNum(); ok {
		_spec.SetField(vehicledata.FieldPlateUploadNum, field.TypeInt, value)
		_node.PlateUploadNum = value
	}
	if value, ok := vdc.mutation.SnapAllowUser(); ok {
		_spec.SetField(vehicledata.FieldSnapAllowUser, field.TypeBool, value)
		_node.SnapAllowUser = value
	}
	if value, ok := vdc.mutation.SnapAllowUserEndTime(); ok {
		_spec.SetField(vehicledata.FieldSnapAllowUserEndTime, field.TypeString, value)
		_node.SnapAllowUserEndTime = value
	}
	if value, ok := vdc.mutation.SnapDefenceCode(); ok {
		_spec.SetField(vehicledata.FieldSnapDefenceCode, field.TypeString, value)
		_node.SnapDefenceCode = value
	}
	if value, ok := vdc.mutation.SnapDeviceID(); ok {
		_spec.SetField(vehicledata.FieldSnapDeviceID, field.TypeString, value)
		_node.SnapDeviceID = value
	}
	if value, ok := vdc.mutation.SnapInCarPeopleNum(); ok {
		_spec.SetField(vehicledata.FieldSnapInCarPeopleNum, field.TypeInt, value)
		_node.SnapInCarPeopleNum = value
	}
	if value, ok := vdc.mutation.SnapLanNo(); ok {
		_spec.SetField(vehicledata.FieldSnapLanNo, field.TypeInt, value)
		_node.SnapLanNo = value
	}
	if value, ok := vdc.mutation.SnapOpenStrobe(); ok {
		_spec.SetField(vehicledata.FieldSnapOpenStrobe, field.TypeBool, value)
		_node.SnapOpenStrobe = value
	}
	if value, ok := vdc.mutation.VehicleBoundingBox(); ok {
		_spec.SetField(vehicledata.FieldVehicleBoundingBox, field.TypeJSON, value)
		_node.VehicleBoundingBox = value
	}
	if value, ok := vdc.mutation.VehicleSeries(); ok {
		_spec.SetField(vehicledata.FieldVehicleSeries, field.TypeString, value)
		_node.VehicleSeries = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleData.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleDataUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vdc *VehicleDataCreate) OnConflict(opts ...sql.ConflictOption) *VehicleDataUpsertOne {
	vdc.conflict = opts
	return &VehicleDataUpsertOne{
		create: vdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdc *VehicleDataCreate) OnConflictColumns(columns ...string) *VehicleDataUpsertOne {
	vdc.conflict = append(vdc.conflict, sql.ConflictColumns(columns...))
	return &VehicleDataUpsertOne{
		create: vdc,
	}
}

type (
	// VehicleDataUpsertOne is the builder for "upsert"-ing
	//  one VehicleData node.
	VehicleDataUpsertOne struct {
		create *VehicleDataCreate
	}

	// VehicleDataUpsert is the "OnConflict" setter.
	VehicleDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleDataUpsert) SetUpdatedAt(v time.Time) *VehicleDataUpsert {
	u.Set(vehicledata.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateUpdatedAt() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldUpdatedAt)
	return u
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (u *VehicleDataUpsert) SetPlateBoundingBox(v []int) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateBoundingBox, v)
	return u
}

// UpdatePlateBoundingBox sets the "plate_bounding_box" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateBoundingBox() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateBoundingBox)
	return u
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (u *VehicleDataUpsert) ClearPlateBoundingBox() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateBoundingBox)
	return u
}

// SetPlateChannel sets the "plate_channel" field.
func (u *VehicleDataUpsert) SetPlateChannel(v int) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateChannel, v)
	return u
}

// UpdatePlateChannel sets the "plate_channel" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateChannel() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateChannel)
	return u
}

// AddPlateChannel adds v to the "plate_channel" field.
func (u *VehicleDataUpsert) AddPlateChannel(v int) *VehicleDataUpsert {
	u.Add(vehicledata.FieldPlateChannel, v)
	return u
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (u *VehicleDataUpsert) ClearPlateChannel() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateChannel)
	return u
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (u *VehicleDataUpsert) SetPlateIsExist(v bool) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateIsExist, v)
	return u
}

// UpdatePlateIsExist sets the "plate_is_exist" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateIsExist() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateIsExist)
	return u
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (u *VehicleDataUpsert) ClearPlateIsExist() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateIsExist)
	return u
}

// SetPlateColor sets the "plate_color" field.
func (u *VehicleDataUpsert) SetPlateColor(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateColor, v)
	return u
}

// UpdatePlateColor sets the "plate_color" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateColor() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateColor)
	return u
}

// ClearPlateColor clears the value of the "plate_color" field.
func (u *VehicleDataUpsert) ClearPlateColor() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateColor)
	return u
}

// SetPlateNumber sets the "plate_number" field.
func (u *VehicleDataUpsert) SetPlateNumber(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateNumber, v)
	return u
}

// UpdatePlateNumber sets the "plate_number" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateNumber() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateNumber)
	return u
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (u *VehicleDataUpsert) ClearPlateNumber() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateNumber)
	return u
}

// SetPlateType sets the "plate_type" field.
func (u *VehicleDataUpsert) SetPlateType(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateType, v)
	return u
}

// UpdatePlateType sets the "plate_type" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateType() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateType)
	return u
}

// ClearPlateType clears the value of the "plate_type" field.
func (u *VehicleDataUpsert) ClearPlateType() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateType)
	return u
}

// SetPlateRegion sets the "plate_region" field.
func (u *VehicleDataUpsert) SetPlateRegion(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateRegion, v)
	return u
}

// UpdatePlateRegion sets the "plate_region" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateRegion() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateRegion)
	return u
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (u *VehicleDataUpsert) ClearPlateRegion() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateRegion)
	return u
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (u *VehicleDataUpsert) SetPlateUploadNum(v int) *VehicleDataUpsert {
	u.Set(vehicledata.FieldPlateUploadNum, v)
	return u
}

// UpdatePlateUploadNum sets the "plate_upload_num" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdatePlateUploadNum() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldPlateUploadNum)
	return u
}

// AddPlateUploadNum adds v to the "plate_upload_num" field.
func (u *VehicleDataUpsert) AddPlateUploadNum(v int) *VehicleDataUpsert {
	u.Add(vehicledata.FieldPlateUploadNum, v)
	return u
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (u *VehicleDataUpsert) ClearPlateUploadNum() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldPlateUploadNum)
	return u
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (u *VehicleDataUpsert) SetSnapAllowUser(v bool) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapAllowUser, v)
	return u
}

// UpdateSnapAllowUser sets the "snap_allow_user" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapAllowUser() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapAllowUser)
	return u
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (u *VehicleDataUpsert) ClearSnapAllowUser() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapAllowUser)
	return u
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (u *VehicleDataUpsert) SetSnapAllowUserEndTime(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapAllowUserEndTime, v)
	return u
}

// UpdateSnapAllowUserEndTime sets the "snap_allow_user_end_time" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapAllowUserEndTime() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapAllowUserEndTime)
	return u
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (u *VehicleDataUpsert) ClearSnapAllowUserEndTime() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapAllowUserEndTime)
	return u
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (u *VehicleDataUpsert) SetSnapDefenceCode(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapDefenceCode, v)
	return u
}

// UpdateSnapDefenceCode sets the "snap_defence_code" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapDefenceCode() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapDefenceCode)
	return u
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (u *VehicleDataUpsert) ClearSnapDefenceCode() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapDefenceCode)
	return u
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (u *VehicleDataUpsert) SetSnapDeviceID(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapDeviceID, v)
	return u
}

// UpdateSnapDeviceID sets the "snap_device_id" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapDeviceID() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapDeviceID)
	return u
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (u *VehicleDataUpsert) ClearSnapDeviceID() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapDeviceID)
	return u
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (u *VehicleDataUpsert) SetSnapInCarPeopleNum(v int) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapInCarPeopleNum, v)
	return u
}

// UpdateSnapInCarPeopleNum sets the "snap_in_car_people_num" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapInCarPeopleNum() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapInCarPeopleNum)
	return u
}

// AddSnapInCarPeopleNum adds v to the "snap_in_car_people_num" field.
func (u *VehicleDataUpsert) AddSnapInCarPeopleNum(v int) *VehicleDataUpsert {
	u.Add(vehicledata.FieldSnapInCarPeopleNum, v)
	return u
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (u *VehicleDataUpsert) ClearSnapInCarPeopleNum() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapInCarPeopleNum)
	return u
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (u *VehicleDataUpsert) SetSnapLanNo(v int) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapLanNo, v)
	return u
}

// UpdateSnapLanNo sets the "snap_lan_no" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapLanNo() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapLanNo)
	return u
}

// AddSnapLanNo adds v to the "snap_lan_no" field.
func (u *VehicleDataUpsert) AddSnapLanNo(v int) *VehicleDataUpsert {
	u.Add(vehicledata.FieldSnapLanNo, v)
	return u
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (u *VehicleDataUpsert) ClearSnapLanNo() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapLanNo)
	return u
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (u *VehicleDataUpsert) SetSnapOpenStrobe(v bool) *VehicleDataUpsert {
	u.Set(vehicledata.FieldSnapOpenStrobe, v)
	return u
}

// UpdateSnapOpenStrobe sets the "snap_open_strobe" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateSnapOpenStrobe() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldSnapOpenStrobe)
	return u
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (u *VehicleDataUpsert) ClearSnapOpenStrobe() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldSnapOpenStrobe)
	return u
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (u *VehicleDataUpsert) SetVehicleBoundingBox(v []int) *VehicleDataUpsert {
	u.Set(vehicledata.FieldVehicleBoundingBox, v)
	return u
}

// UpdateVehicleBoundingBox sets the "vehicle_bounding_box" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateVehicleBoundingBox() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldVehicleBoundingBox)
	return u
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (u *VehicleDataUpsert) ClearVehicleBoundingBox() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldVehicleBoundingBox)
	return u
}

// SetVehicleSeries sets the "vehicle_series" field.
func (u *VehicleDataUpsert) SetVehicleSeries(v string) *VehicleDataUpsert {
	u.Set(vehicledata.FieldVehicleSeries, v)
	return u
}

// UpdateVehicleSeries sets the "vehicle_series" field to the value that was provided on create.
func (u *VehicleDataUpsert) UpdateVehicleSeries() *VehicleDataUpsert {
	u.SetExcluded(vehicledata.FieldVehicleSeries)
	return u
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (u *VehicleDataUpsert) ClearVehicleSeries() *VehicleDataUpsert {
	u.SetNull(vehicledata.FieldVehicleSeries)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VehicleData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vehicledata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VehicleDataUpsertOne) UpdateNewValues() *VehicleDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(vehicledata.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(vehicledata.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VehicleData.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VehicleDataUpsertOne) Ignore() *VehicleDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleDataUpsertOne) DoNothing() *VehicleDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleDataCreate.OnConflict
// documentation for more info.
func (u *VehicleDataUpsertOne) Update(set func(*VehicleDataUpsert)) *VehicleDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleDataUpsertOne) SetUpdatedAt(v time.Time) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateUpdatedAt() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (u *VehicleDataUpsertOne) SetPlateBoundingBox(v []int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateBoundingBox(v)
	})
}

// UpdatePlateBoundingBox sets the "plate_bounding_box" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateBoundingBox() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateBoundingBox()
	})
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (u *VehicleDataUpsertOne) ClearPlateBoundingBox() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateBoundingBox()
	})
}

// SetPlateChannel sets the "plate_channel" field.
func (u *VehicleDataUpsertOne) SetPlateChannel(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateChannel(v)
	})
}

// AddPlateChannel adds v to the "plate_channel" field.
func (u *VehicleDataUpsertOne) AddPlateChannel(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddPlateChannel(v)
	})
}

// UpdatePlateChannel sets the "plate_channel" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateChannel() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateChannel()
	})
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (u *VehicleDataUpsertOne) ClearPlateChannel() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateChannel()
	})
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (u *VehicleDataUpsertOne) SetPlateIsExist(v bool) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateIsExist(v)
	})
}

// UpdatePlateIsExist sets the "plate_is_exist" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateIsExist() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateIsExist()
	})
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (u *VehicleDataUpsertOne) ClearPlateIsExist() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateIsExist()
	})
}

// SetPlateColor sets the "plate_color" field.
func (u *VehicleDataUpsertOne) SetPlateColor(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateColor(v)
	})
}

// UpdatePlateColor sets the "plate_color" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateColor() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateColor()
	})
}

// ClearPlateColor clears the value of the "plate_color" field.
func (u *VehicleDataUpsertOne) ClearPlateColor() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateColor()
	})
}

// SetPlateNumber sets the "plate_number" field.
func (u *VehicleDataUpsertOne) SetPlateNumber(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateNumber(v)
	})
}

// UpdatePlateNumber sets the "plate_number" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateNumber() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateNumber()
	})
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (u *VehicleDataUpsertOne) ClearPlateNumber() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateNumber()
	})
}

// SetPlateType sets the "plate_type" field.
func (u *VehicleDataUpsertOne) SetPlateType(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateType(v)
	})
}

// UpdatePlateType sets the "plate_type" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateType() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateType()
	})
}

// ClearPlateType clears the value of the "plate_type" field.
func (u *VehicleDataUpsertOne) ClearPlateType() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateType()
	})
}

// SetPlateRegion sets the "plate_region" field.
func (u *VehicleDataUpsertOne) SetPlateRegion(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateRegion(v)
	})
}

// UpdatePlateRegion sets the "plate_region" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateRegion() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateRegion()
	})
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (u *VehicleDataUpsertOne) ClearPlateRegion() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateRegion()
	})
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (u *VehicleDataUpsertOne) SetPlateUploadNum(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateUploadNum(v)
	})
}

// AddPlateUploadNum adds v to the "plate_upload_num" field.
func (u *VehicleDataUpsertOne) AddPlateUploadNum(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddPlateUploadNum(v)
	})
}

// UpdatePlateUploadNum sets the "plate_upload_num" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdatePlateUploadNum() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateUploadNum()
	})
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (u *VehicleDataUpsertOne) ClearPlateUploadNum() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateUploadNum()
	})
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (u *VehicleDataUpsertOne) SetSnapAllowUser(v bool) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapAllowUser(v)
	})
}

// UpdateSnapAllowUser sets the "snap_allow_user" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapAllowUser() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapAllowUser()
	})
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (u *VehicleDataUpsertOne) ClearSnapAllowUser() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapAllowUser()
	})
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (u *VehicleDataUpsertOne) SetSnapAllowUserEndTime(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapAllowUserEndTime(v)
	})
}

// UpdateSnapAllowUserEndTime sets the "snap_allow_user_end_time" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapAllowUserEndTime() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapAllowUserEndTime()
	})
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (u *VehicleDataUpsertOne) ClearSnapAllowUserEndTime() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapAllowUserEndTime()
	})
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (u *VehicleDataUpsertOne) SetSnapDefenceCode(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapDefenceCode(v)
	})
}

// UpdateSnapDefenceCode sets the "snap_defence_code" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapDefenceCode() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapDefenceCode()
	})
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (u *VehicleDataUpsertOne) ClearSnapDefenceCode() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapDefenceCode()
	})
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (u *VehicleDataUpsertOne) SetSnapDeviceID(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapDeviceID(v)
	})
}

// UpdateSnapDeviceID sets the "snap_device_id" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapDeviceID() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapDeviceID()
	})
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (u *VehicleDataUpsertOne) ClearSnapDeviceID() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapDeviceID()
	})
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (u *VehicleDataUpsertOne) SetSnapInCarPeopleNum(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapInCarPeopleNum(v)
	})
}

// AddSnapInCarPeopleNum adds v to the "snap_in_car_people_num" field.
func (u *VehicleDataUpsertOne) AddSnapInCarPeopleNum(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddSnapInCarPeopleNum(v)
	})
}

// UpdateSnapInCarPeopleNum sets the "snap_in_car_people_num" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapInCarPeopleNum() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapInCarPeopleNum()
	})
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (u *VehicleDataUpsertOne) ClearSnapInCarPeopleNum() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapInCarPeopleNum()
	})
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (u *VehicleDataUpsertOne) SetSnapLanNo(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapLanNo(v)
	})
}

// AddSnapLanNo adds v to the "snap_lan_no" field.
func (u *VehicleDataUpsertOne) AddSnapLanNo(v int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddSnapLanNo(v)
	})
}

// UpdateSnapLanNo sets the "snap_lan_no" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapLanNo() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapLanNo()
	})
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (u *VehicleDataUpsertOne) ClearSnapLanNo() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapLanNo()
	})
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (u *VehicleDataUpsertOne) SetSnapOpenStrobe(v bool) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapOpenStrobe(v)
	})
}

// UpdateSnapOpenStrobe sets the "snap_open_strobe" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateSnapOpenStrobe() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapOpenStrobe()
	})
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (u *VehicleDataUpsertOne) ClearSnapOpenStrobe() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapOpenStrobe()
	})
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (u *VehicleDataUpsertOne) SetVehicleBoundingBox(v []int) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetVehicleBoundingBox(v)
	})
}

// UpdateVehicleBoundingBox sets the "vehicle_bounding_box" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateVehicleBoundingBox() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateVehicleBoundingBox()
	})
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (u *VehicleDataUpsertOne) ClearVehicleBoundingBox() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearVehicleBoundingBox()
	})
}

// SetVehicleSeries sets the "vehicle_series" field.
func (u *VehicleDataUpsertOne) SetVehicleSeries(v string) *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetVehicleSeries(v)
	})
}

// UpdateVehicleSeries sets the "vehicle_series" field to the value that was provided on create.
func (u *VehicleDataUpsertOne) UpdateVehicleSeries() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateVehicleSeries()
	})
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (u *VehicleDataUpsertOne) ClearVehicleSeries() *VehicleDataUpsertOne {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearVehicleSeries()
	})
}

// Exec executes the query.
func (u *VehicleDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VehicleDataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VehicleDataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VehicleDataCreateBulk is the builder for creating many VehicleData entities in bulk.
type VehicleDataCreateBulk struct {
	config
	err      error
	builders []*VehicleDataCreate
	conflict []sql.ConflictOption
}

// Save creates the VehicleData entities in the database.
func (vdcb *VehicleDataCreateBulk) Save(ctx context.Context) ([]*VehicleData, error) {
	if vdcb.err != nil {
		return nil, vdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VehicleData, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VehicleDataCreateBulk) SaveX(ctx context.Context) []*VehicleData {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdcb *VehicleDataCreateBulk) Exec(ctx context.Context) error {
	_, err := vdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdcb *VehicleDataCreateBulk) ExecX(ctx context.Context) {
	if err := vdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleDataUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vdcb *VehicleDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *VehicleDataUpsertBulk {
	vdcb.conflict = opts
	return &VehicleDataUpsertBulk{
		create: vdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdcb *VehicleDataCreateBulk) OnConflictColumns(columns ...string) *VehicleDataUpsertBulk {
	vdcb.conflict = append(vdcb.conflict, sql.ConflictColumns(columns...))
	return &VehicleDataUpsertBulk{
		create: vdcb,
	}
}

// VehicleDataUpsertBulk is the builder for "upsert"-ing
// a bulk of VehicleData nodes.
type VehicleDataUpsertBulk struct {
	create *VehicleDataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VehicleData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vehicledata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VehicleDataUpsertBulk) UpdateNewValues() *VehicleDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(vehicledata.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(vehicledata.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VehicleData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VehicleDataUpsertBulk) Ignore() *VehicleDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleDataUpsertBulk) DoNothing() *VehicleDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleDataCreateBulk.OnConflict
// documentation for more info.
func (u *VehicleDataUpsertBulk) Update(set func(*VehicleDataUpsert)) *VehicleDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleDataUpsertBulk) SetUpdatedAt(v time.Time) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateUpdatedAt() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPlateBoundingBox sets the "plate_bounding_box" field.
func (u *VehicleDataUpsertBulk) SetPlateBoundingBox(v []int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateBoundingBox(v)
	})
}

// UpdatePlateBoundingBox sets the "plate_bounding_box" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateBoundingBox() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateBoundingBox()
	})
}

// ClearPlateBoundingBox clears the value of the "plate_bounding_box" field.
func (u *VehicleDataUpsertBulk) ClearPlateBoundingBox() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateBoundingBox()
	})
}

// SetPlateChannel sets the "plate_channel" field.
func (u *VehicleDataUpsertBulk) SetPlateChannel(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateChannel(v)
	})
}

// AddPlateChannel adds v to the "plate_channel" field.
func (u *VehicleDataUpsertBulk) AddPlateChannel(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddPlateChannel(v)
	})
}

// UpdatePlateChannel sets the "plate_channel" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateChannel() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateChannel()
	})
}

// ClearPlateChannel clears the value of the "plate_channel" field.
func (u *VehicleDataUpsertBulk) ClearPlateChannel() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateChannel()
	})
}

// SetPlateIsExist sets the "plate_is_exist" field.
func (u *VehicleDataUpsertBulk) SetPlateIsExist(v bool) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateIsExist(v)
	})
}

// UpdatePlateIsExist sets the "plate_is_exist" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateIsExist() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateIsExist()
	})
}

// ClearPlateIsExist clears the value of the "plate_is_exist" field.
func (u *VehicleDataUpsertBulk) ClearPlateIsExist() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateIsExist()
	})
}

// SetPlateColor sets the "plate_color" field.
func (u *VehicleDataUpsertBulk) SetPlateColor(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateColor(v)
	})
}

// UpdatePlateColor sets the "plate_color" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateColor() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateColor()
	})
}

// ClearPlateColor clears the value of the "plate_color" field.
func (u *VehicleDataUpsertBulk) ClearPlateColor() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateColor()
	})
}

// SetPlateNumber sets the "plate_number" field.
func (u *VehicleDataUpsertBulk) SetPlateNumber(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateNumber(v)
	})
}

// UpdatePlateNumber sets the "plate_number" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateNumber() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateNumber()
	})
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (u *VehicleDataUpsertBulk) ClearPlateNumber() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateNumber()
	})
}

// SetPlateType sets the "plate_type" field.
func (u *VehicleDataUpsertBulk) SetPlateType(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateType(v)
	})
}

// UpdatePlateType sets the "plate_type" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateType() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateType()
	})
}

// ClearPlateType clears the value of the "plate_type" field.
func (u *VehicleDataUpsertBulk) ClearPlateType() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateType()
	})
}

// SetPlateRegion sets the "plate_region" field.
func (u *VehicleDataUpsertBulk) SetPlateRegion(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateRegion(v)
	})
}

// UpdatePlateRegion sets the "plate_region" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateRegion() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateRegion()
	})
}

// ClearPlateRegion clears the value of the "plate_region" field.
func (u *VehicleDataUpsertBulk) ClearPlateRegion() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateRegion()
	})
}

// SetPlateUploadNum sets the "plate_upload_num" field.
func (u *VehicleDataUpsertBulk) SetPlateUploadNum(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetPlateUploadNum(v)
	})
}

// AddPlateUploadNum adds v to the "plate_upload_num" field.
func (u *VehicleDataUpsertBulk) AddPlateUploadNum(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddPlateUploadNum(v)
	})
}

// UpdatePlateUploadNum sets the "plate_upload_num" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdatePlateUploadNum() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdatePlateUploadNum()
	})
}

// ClearPlateUploadNum clears the value of the "plate_upload_num" field.
func (u *VehicleDataUpsertBulk) ClearPlateUploadNum() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearPlateUploadNum()
	})
}

// SetSnapAllowUser sets the "snap_allow_user" field.
func (u *VehicleDataUpsertBulk) SetSnapAllowUser(v bool) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapAllowUser(v)
	})
}

// UpdateSnapAllowUser sets the "snap_allow_user" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapAllowUser() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapAllowUser()
	})
}

// ClearSnapAllowUser clears the value of the "snap_allow_user" field.
func (u *VehicleDataUpsertBulk) ClearSnapAllowUser() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapAllowUser()
	})
}

// SetSnapAllowUserEndTime sets the "snap_allow_user_end_time" field.
func (u *VehicleDataUpsertBulk) SetSnapAllowUserEndTime(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapAllowUserEndTime(v)
	})
}

// UpdateSnapAllowUserEndTime sets the "snap_allow_user_end_time" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapAllowUserEndTime() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapAllowUserEndTime()
	})
}

// ClearSnapAllowUserEndTime clears the value of the "snap_allow_user_end_time" field.
func (u *VehicleDataUpsertBulk) ClearSnapAllowUserEndTime() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapAllowUserEndTime()
	})
}

// SetSnapDefenceCode sets the "snap_defence_code" field.
func (u *VehicleDataUpsertBulk) SetSnapDefenceCode(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapDefenceCode(v)
	})
}

// UpdateSnapDefenceCode sets the "snap_defence_code" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapDefenceCode() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapDefenceCode()
	})
}

// ClearSnapDefenceCode clears the value of the "snap_defence_code" field.
func (u *VehicleDataUpsertBulk) ClearSnapDefenceCode() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapDefenceCode()
	})
}

// SetSnapDeviceID sets the "snap_device_id" field.
func (u *VehicleDataUpsertBulk) SetSnapDeviceID(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapDeviceID(v)
	})
}

// UpdateSnapDeviceID sets the "snap_device_id" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapDeviceID() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapDeviceID()
	})
}

// ClearSnapDeviceID clears the value of the "snap_device_id" field.
func (u *VehicleDataUpsertBulk) ClearSnapDeviceID() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapDeviceID()
	})
}

// SetSnapInCarPeopleNum sets the "snap_in_car_people_num" field.
func (u *VehicleDataUpsertBulk) SetSnapInCarPeopleNum(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapInCarPeopleNum(v)
	})
}

// AddSnapInCarPeopleNum adds v to the "snap_in_car_people_num" field.
func (u *VehicleDataUpsertBulk) AddSnapInCarPeopleNum(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddSnapInCarPeopleNum(v)
	})
}

// UpdateSnapInCarPeopleNum sets the "snap_in_car_people_num" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapInCarPeopleNum() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapInCarPeopleNum()
	})
}

// ClearSnapInCarPeopleNum clears the value of the "snap_in_car_people_num" field.
func (u *VehicleDataUpsertBulk) ClearSnapInCarPeopleNum() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapInCarPeopleNum()
	})
}

// SetSnapLanNo sets the "snap_lan_no" field.
func (u *VehicleDataUpsertBulk) SetSnapLanNo(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapLanNo(v)
	})
}

// AddSnapLanNo adds v to the "snap_lan_no" field.
func (u *VehicleDataUpsertBulk) AddSnapLanNo(v int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.AddSnapLanNo(v)
	})
}

// UpdateSnapLanNo sets the "snap_lan_no" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapLanNo() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapLanNo()
	})
}

// ClearSnapLanNo clears the value of the "snap_lan_no" field.
func (u *VehicleDataUpsertBulk) ClearSnapLanNo() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapLanNo()
	})
}

// SetSnapOpenStrobe sets the "snap_open_strobe" field.
func (u *VehicleDataUpsertBulk) SetSnapOpenStrobe(v bool) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetSnapOpenStrobe(v)
	})
}

// UpdateSnapOpenStrobe sets the "snap_open_strobe" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateSnapOpenStrobe() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateSnapOpenStrobe()
	})
}

// ClearSnapOpenStrobe clears the value of the "snap_open_strobe" field.
func (u *VehicleDataUpsertBulk) ClearSnapOpenStrobe() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearSnapOpenStrobe()
	})
}

// SetVehicleBoundingBox sets the "vehicle_bounding_box" field.
func (u *VehicleDataUpsertBulk) SetVehicleBoundingBox(v []int) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetVehicleBoundingBox(v)
	})
}

// UpdateVehicleBoundingBox sets the "vehicle_bounding_box" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateVehicleBoundingBox() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateVehicleBoundingBox()
	})
}

// ClearVehicleBoundingBox clears the value of the "vehicle_bounding_box" field.
func (u *VehicleDataUpsertBulk) ClearVehicleBoundingBox() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearVehicleBoundingBox()
	})
}

// SetVehicleSeries sets the "vehicle_series" field.
func (u *VehicleDataUpsertBulk) SetVehicleSeries(v string) *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.SetVehicleSeries(v)
	})
}

// UpdateVehicleSeries sets the "vehicle_series" field to the value that was provided on create.
func (u *VehicleDataUpsertBulk) UpdateVehicleSeries() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.UpdateVehicleSeries()
	})
}

// ClearVehicleSeries clears the value of the "vehicle_series" field.
func (u *VehicleDataUpsertBulk) ClearVehicleSeries() *VehicleDataUpsertBulk {
	return u.Update(func(s *VehicleDataUpsert) {
		s.ClearVehicleSeries()
	})
}

// Exec executes the query.
func (u *VehicleDataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VehicleDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
