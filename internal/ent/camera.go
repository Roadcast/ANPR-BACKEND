// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/policestation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Camera is the model entity for the Camera schema.
type Camera struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Imei holds the value of the "imei" field.
	Imei string `json:"imei,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// IsWorking holds the value of the "is_working" field.
	IsWorking bool `json:"is_working,omitempty"`
	// District holds the value of the "district" field.
	District *string `json:"district,omitempty"`
	// PoliceStationID holds the value of the "police_station_id" field.
	PoliceStationID *uuid.UUID `json:"police_station_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CameraQuery when eager-loading is set.
	Edges        CameraEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CameraEdges holds the relations/edges for other nodes in the graph.
type CameraEdges struct {
	// PoliceStation holds the value of the police_station edge.
	PoliceStation *PoliceStation `json:"police_station,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PoliceStationOrErr returns the PoliceStation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CameraEdges) PoliceStationOrErr() (*PoliceStation, error) {
	if e.PoliceStation != nil {
		return e.PoliceStation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: policestation.Label}
	}
	return nil, &NotLoadedError{edge: "police_station"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Camera) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case camera.FieldPoliceStationID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case camera.FieldActive, camera.FieldIsWorking:
			values[i] = new(sql.NullBool)
		case camera.FieldName, camera.FieldModel, camera.FieldImei, camera.FieldLocation, camera.FieldDistrict:
			values[i] = new(sql.NullString)
		case camera.FieldCreatedAt, camera.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case camera.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Camera fields.
func (c *Camera) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case camera.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case camera.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case camera.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case camera.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case camera.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				c.Model = value.String
			}
		case camera.FieldImei:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imei", values[i])
			} else if value.Valid {
				c.Imei = value.String
			}
		case camera.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				c.Location = value.String
			}
		case camera.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				c.Active = value.Bool
			}
		case camera.FieldIsWorking:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_working", values[i])
			} else if value.Valid {
				c.IsWorking = value.Bool
			}
		case camera.FieldDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field district", values[i])
			} else if value.Valid {
				c.District = new(string)
				*c.District = value.String
			}
		case camera.FieldPoliceStationID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field police_station_id", values[i])
			} else if value.Valid {
				c.PoliceStationID = new(uuid.UUID)
				*c.PoliceStationID = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Camera.
// This includes values selected through modifiers, order, etc.
func (c *Camera) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryPoliceStation queries the "police_station" edge of the Camera entity.
func (c *Camera) QueryPoliceStation() *PoliceStationQuery {
	return NewCameraClient(c.config).QueryPoliceStation(c)
}

// Update returns a builder for updating this Camera.
// Note that you need to call Camera.Unwrap() before calling this method if this Camera
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Camera) Update() *CameraUpdateOne {
	return NewCameraClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Camera entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Camera) Unwrap() *Camera {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Camera is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Camera) String() string {
	var builder strings.Builder
	builder.WriteString("Camera(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(c.Model)
	builder.WriteString(", ")
	builder.WriteString("imei=")
	builder.WriteString(c.Imei)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(c.Location)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", c.Active))
	builder.WriteString(", ")
	builder.WriteString("is_working=")
	builder.WriteString(fmt.Sprintf("%v", c.IsWorking))
	builder.WriteString(", ")
	if v := c.District; v != nil {
		builder.WriteString("district=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.PoliceStationID; v != nil {
		builder.WriteString("police_station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Cameras is a parsable slice of Camera.
type Cameras []*Camera
