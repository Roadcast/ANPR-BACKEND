// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/car"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/internal/ent/predicate"
	"go-ent-project/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PoliceStationUpdate is the builder for updating PoliceStation entities.
type PoliceStationUpdate struct {
	config
	hooks    []Hook
	mutation *PoliceStationMutation
}

// Where appends a list predicates to the PoliceStationUpdate builder.
func (psu *PoliceStationUpdate) Where(ps ...predicate.PoliceStation) *PoliceStationUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *PoliceStationUpdate) SetUpdatedAt(t time.Time) *PoliceStationUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetName sets the "name" field.
func (psu *PoliceStationUpdate) SetName(s string) *PoliceStationUpdate {
	psu.mutation.SetName(s)
	return psu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableName(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetName(*s)
	}
	return psu
}

// SetLocation sets the "location" field.
func (psu *PoliceStationUpdate) SetLocation(s string) *PoliceStationUpdate {
	psu.mutation.SetLocation(s)
	return psu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableLocation(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetLocation(*s)
	}
	return psu
}

// ClearLocation clears the value of the "location" field.
func (psu *PoliceStationUpdate) ClearLocation() *PoliceStationUpdate {
	psu.mutation.ClearLocation()
	return psu
}

// SetCode sets the "code" field.
func (psu *PoliceStationUpdate) SetCode(s string) *PoliceStationUpdate {
	psu.mutation.SetCode(s)
	return psu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableCode(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetCode(*s)
	}
	return psu
}

// SetIdentifier sets the "identifier" field.
func (psu *PoliceStationUpdate) SetIdentifier(s string) *PoliceStationUpdate {
	psu.mutation.SetIdentifier(s)
	return psu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableIdentifier(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetIdentifier(*s)
	}
	return psu
}

// SetParentStationID sets the "parent_station_id" field.
func (psu *PoliceStationUpdate) SetParentStationID(u uuid.UUID) *PoliceStationUpdate {
	psu.mutation.SetParentStationID(u)
	return psu
}

// SetNillableParentStationID sets the "parent_station_id" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableParentStationID(u *uuid.UUID) *PoliceStationUpdate {
	if u != nil {
		psu.SetParentStationID(*u)
	}
	return psu
}

// ClearParentStationID clears the value of the "parent_station_id" field.
func (psu *PoliceStationUpdate) ClearParentStationID() *PoliceStationUpdate {
	psu.mutation.ClearParentStationID()
	return psu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (psu *PoliceStationUpdate) AddUserIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.AddUserIDs(ids...)
	return psu
}

// AddUsers adds the "users" edges to the User entity.
func (psu *PoliceStationUpdate) AddUsers(u ...*User) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psu.AddUserIDs(ids...)
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (psu *PoliceStationUpdate) AddCameraIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.AddCameraIDs(ids...)
	return psu
}

// AddCamera adds the "camera" edges to the Camera entity.
func (psu *PoliceStationUpdate) AddCamera(c ...*Camera) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.AddCameraIDs(ids...)
}

// AddCarIDs adds the "car" edge to the Car entity by IDs.
func (psu *PoliceStationUpdate) AddCarIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.AddCarIDs(ids...)
	return psu
}

// AddCar adds the "car" edges to the Car entity.
func (psu *PoliceStationUpdate) AddCar(c ...*Car) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.AddCarIDs(ids...)
}

// SetParentID sets the "parent" edge to the PoliceStation entity by ID.
func (psu *PoliceStationUpdate) SetParentID(id uuid.UUID) *PoliceStationUpdate {
	psu.mutation.SetParentID(id)
	return psu
}

// SetNillableParentID sets the "parent" edge to the PoliceStation entity by ID if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableParentID(id *uuid.UUID) *PoliceStationUpdate {
	if id != nil {
		psu = psu.SetParentID(*id)
	}
	return psu
}

// SetParent sets the "parent" edge to the PoliceStation entity.
func (psu *PoliceStationUpdate) SetParent(p *PoliceStation) *PoliceStationUpdate {
	return psu.SetParentID(p.ID)
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by IDs.
func (psu *PoliceStationUpdate) AddChildStationIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.AddChildStationIDs(ids...)
	return psu
}

// AddChildStations adds the "child_stations" edges to the PoliceStation entity.
func (psu *PoliceStationUpdate) AddChildStations(p ...*PoliceStation) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddChildStationIDs(ids...)
}

// Mutation returns the PoliceStationMutation object of the builder.
func (psu *PoliceStationUpdate) Mutation() *PoliceStationMutation {
	return psu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (psu *PoliceStationUpdate) ClearUsers() *PoliceStationUpdate {
	psu.mutation.ClearUsers()
	return psu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (psu *PoliceStationUpdate) RemoveUserIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.RemoveUserIDs(ids...)
	return psu
}

// RemoveUsers removes "users" edges to User entities.
func (psu *PoliceStationUpdate) RemoveUsers(u ...*User) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psu.RemoveUserIDs(ids...)
}

// ClearCamera clears all "camera" edges to the Camera entity.
func (psu *PoliceStationUpdate) ClearCamera() *PoliceStationUpdate {
	psu.mutation.ClearCamera()
	return psu
}

// RemoveCameraIDs removes the "camera" edge to Camera entities by IDs.
func (psu *PoliceStationUpdate) RemoveCameraIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.RemoveCameraIDs(ids...)
	return psu
}

// RemoveCamera removes "camera" edges to Camera entities.
func (psu *PoliceStationUpdate) RemoveCamera(c ...*Camera) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.RemoveCameraIDs(ids...)
}

// ClearCar clears all "car" edges to the Car entity.
func (psu *PoliceStationUpdate) ClearCar() *PoliceStationUpdate {
	psu.mutation.ClearCar()
	return psu
}

// RemoveCarIDs removes the "car" edge to Car entities by IDs.
func (psu *PoliceStationUpdate) RemoveCarIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.RemoveCarIDs(ids...)
	return psu
}

// RemoveCar removes "car" edges to Car entities.
func (psu *PoliceStationUpdate) RemoveCar(c ...*Car) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.RemoveCarIDs(ids...)
}

// ClearParent clears the "parent" edge to the PoliceStation entity.
func (psu *PoliceStationUpdate) ClearParent() *PoliceStationUpdate {
	psu.mutation.ClearParent()
	return psu
}

// ClearChildStations clears all "child_stations" edges to the PoliceStation entity.
func (psu *PoliceStationUpdate) ClearChildStations() *PoliceStationUpdate {
	psu.mutation.ClearChildStations()
	return psu
}

// RemoveChildStationIDs removes the "child_stations" edge to PoliceStation entities by IDs.
func (psu *PoliceStationUpdate) RemoveChildStationIDs(ids ...uuid.UUID) *PoliceStationUpdate {
	psu.mutation.RemoveChildStationIDs(ids...)
	return psu
}

// RemoveChildStations removes "child_stations" edges to PoliceStation entities.
func (psu *PoliceStationUpdate) RemoveChildStations(p ...*PoliceStation) *PoliceStationUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveChildStationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PoliceStationUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PoliceStationUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PoliceStationUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PoliceStationUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PoliceStationUpdate) defaults() {
	if _, ok := psu.mutation.UpdatedAt(); !ok {
		v := policestation.UpdateDefaultUpdatedAt()
		psu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PoliceStationUpdate) check() error {
	if v, ok := psu.mutation.Name(); ok {
		if err := policestation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.name": %w`, err)}
		}
	}
	if v, ok := psu.mutation.Code(); ok {
		if err := policestation.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.code": %w`, err)}
		}
	}
	if v, ok := psu.mutation.Identifier(); ok {
		if err := policestation.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.identifier": %w`, err)}
		}
	}
	return nil
}

func (psu *PoliceStationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(policestation.Table, policestation.Columns, sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(policestation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.Name(); ok {
		_spec.SetField(policestation.FieldName, field.TypeString, value)
	}
	if value, ok := psu.mutation.Location(); ok {
		_spec.SetField(policestation.FieldLocation, field.TypeString, value)
	}
	if psu.mutation.LocationCleared() {
		_spec.ClearField(policestation.FieldLocation, field.TypeString)
	}
	if value, ok := psu.mutation.Code(); ok {
		_spec.SetField(policestation.FieldCode, field.TypeString, value)
	}
	if value, ok := psu.mutation.Identifier(); ok {
		_spec.SetField(policestation.FieldIdentifier, field.TypeString, value)
	}
	if psu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !psu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedCameraIDs(); len(nodes) > 0 && !psu.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedCarIDs(); len(nodes) > 0 && !psu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentTable,
			Columns: []string{policestation.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentTable,
			Columns: []string{policestation.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedChildStationsIDs(); len(nodes) > 0 && !psu.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ChildStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policestation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PoliceStationUpdateOne is the builder for updating a single PoliceStation entity.
type PoliceStationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PoliceStationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *PoliceStationUpdateOne) SetUpdatedAt(t time.Time) *PoliceStationUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetName sets the "name" field.
func (psuo *PoliceStationUpdateOne) SetName(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetName(s)
	return psuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableName(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetName(*s)
	}
	return psuo
}

// SetLocation sets the "location" field.
func (psuo *PoliceStationUpdateOne) SetLocation(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetLocation(s)
	return psuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableLocation(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetLocation(*s)
	}
	return psuo
}

// ClearLocation clears the value of the "location" field.
func (psuo *PoliceStationUpdateOne) ClearLocation() *PoliceStationUpdateOne {
	psuo.mutation.ClearLocation()
	return psuo
}

// SetCode sets the "code" field.
func (psuo *PoliceStationUpdateOne) SetCode(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetCode(s)
	return psuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableCode(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetCode(*s)
	}
	return psuo
}

// SetIdentifier sets the "identifier" field.
func (psuo *PoliceStationUpdateOne) SetIdentifier(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetIdentifier(s)
	return psuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableIdentifier(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetIdentifier(*s)
	}
	return psuo
}

// SetParentStationID sets the "parent_station_id" field.
func (psuo *PoliceStationUpdateOne) SetParentStationID(u uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.SetParentStationID(u)
	return psuo
}

// SetNillableParentStationID sets the "parent_station_id" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableParentStationID(u *uuid.UUID) *PoliceStationUpdateOne {
	if u != nil {
		psuo.SetParentStationID(*u)
	}
	return psuo
}

// ClearParentStationID clears the value of the "parent_station_id" field.
func (psuo *PoliceStationUpdateOne) ClearParentStationID() *PoliceStationUpdateOne {
	psuo.mutation.ClearParentStationID()
	return psuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (psuo *PoliceStationUpdateOne) AddUserIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.AddUserIDs(ids...)
	return psuo
}

// AddUsers adds the "users" edges to the User entity.
func (psuo *PoliceStationUpdateOne) AddUsers(u ...*User) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psuo.AddUserIDs(ids...)
}

// AddCameraIDs adds the "camera" edge to the Camera entity by IDs.
func (psuo *PoliceStationUpdateOne) AddCameraIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.AddCameraIDs(ids...)
	return psuo
}

// AddCamera adds the "camera" edges to the Camera entity.
func (psuo *PoliceStationUpdateOne) AddCamera(c ...*Camera) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.AddCameraIDs(ids...)
}

// AddCarIDs adds the "car" edge to the Car entity by IDs.
func (psuo *PoliceStationUpdateOne) AddCarIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.AddCarIDs(ids...)
	return psuo
}

// AddCar adds the "car" edges to the Car entity.
func (psuo *PoliceStationUpdateOne) AddCar(c ...*Car) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.AddCarIDs(ids...)
}

// SetParentID sets the "parent" edge to the PoliceStation entity by ID.
func (psuo *PoliceStationUpdateOne) SetParentID(id uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.SetParentID(id)
	return psuo
}

// SetNillableParentID sets the "parent" edge to the PoliceStation entity by ID if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableParentID(id *uuid.UUID) *PoliceStationUpdateOne {
	if id != nil {
		psuo = psuo.SetParentID(*id)
	}
	return psuo
}

// SetParent sets the "parent" edge to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) SetParent(p *PoliceStation) *PoliceStationUpdateOne {
	return psuo.SetParentID(p.ID)
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by IDs.
func (psuo *PoliceStationUpdateOne) AddChildStationIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.AddChildStationIDs(ids...)
	return psuo
}

// AddChildStations adds the "child_stations" edges to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) AddChildStations(p ...*PoliceStation) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddChildStationIDs(ids...)
}

// Mutation returns the PoliceStationMutation object of the builder.
func (psuo *PoliceStationUpdateOne) Mutation() *PoliceStationMutation {
	return psuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (psuo *PoliceStationUpdateOne) ClearUsers() *PoliceStationUpdateOne {
	psuo.mutation.ClearUsers()
	return psuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (psuo *PoliceStationUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.RemoveUserIDs(ids...)
	return psuo
}

// RemoveUsers removes "users" edges to User entities.
func (psuo *PoliceStationUpdateOne) RemoveUsers(u ...*User) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psuo.RemoveUserIDs(ids...)
}

// ClearCamera clears all "camera" edges to the Camera entity.
func (psuo *PoliceStationUpdateOne) ClearCamera() *PoliceStationUpdateOne {
	psuo.mutation.ClearCamera()
	return psuo
}

// RemoveCameraIDs removes the "camera" edge to Camera entities by IDs.
func (psuo *PoliceStationUpdateOne) RemoveCameraIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.RemoveCameraIDs(ids...)
	return psuo
}

// RemoveCamera removes "camera" edges to Camera entities.
func (psuo *PoliceStationUpdateOne) RemoveCamera(c ...*Camera) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.RemoveCameraIDs(ids...)
}

// ClearCar clears all "car" edges to the Car entity.
func (psuo *PoliceStationUpdateOne) ClearCar() *PoliceStationUpdateOne {
	psuo.mutation.ClearCar()
	return psuo
}

// RemoveCarIDs removes the "car" edge to Car entities by IDs.
func (psuo *PoliceStationUpdateOne) RemoveCarIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.RemoveCarIDs(ids...)
	return psuo
}

// RemoveCar removes "car" edges to Car entities.
func (psuo *PoliceStationUpdateOne) RemoveCar(c ...*Car) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.RemoveCarIDs(ids...)
}

// ClearParent clears the "parent" edge to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) ClearParent() *PoliceStationUpdateOne {
	psuo.mutation.ClearParent()
	return psuo
}

// ClearChildStations clears all "child_stations" edges to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) ClearChildStations() *PoliceStationUpdateOne {
	psuo.mutation.ClearChildStations()
	return psuo
}

// RemoveChildStationIDs removes the "child_stations" edge to PoliceStation entities by IDs.
func (psuo *PoliceStationUpdateOne) RemoveChildStationIDs(ids ...uuid.UUID) *PoliceStationUpdateOne {
	psuo.mutation.RemoveChildStationIDs(ids...)
	return psuo
}

// RemoveChildStations removes "child_stations" edges to PoliceStation entities.
func (psuo *PoliceStationUpdateOne) RemoveChildStations(p ...*PoliceStation) *PoliceStationUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveChildStationIDs(ids...)
}

// Where appends a list predicates to the PoliceStationUpdate builder.
func (psuo *PoliceStationUpdateOne) Where(ps ...predicate.PoliceStation) *PoliceStationUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PoliceStationUpdateOne) Select(field string, fields ...string) *PoliceStationUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PoliceStation entity.
func (psuo *PoliceStationUpdateOne) Save(ctx context.Context) (*PoliceStation, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PoliceStationUpdateOne) SaveX(ctx context.Context) *PoliceStation {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PoliceStationUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PoliceStationUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PoliceStationUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdatedAt(); !ok {
		v := policestation.UpdateDefaultUpdatedAt()
		psuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PoliceStationUpdateOne) check() error {
	if v, ok := psuo.mutation.Name(); ok {
		if err := policestation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.name": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.Code(); ok {
		if err := policestation.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.code": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.Identifier(); ok {
		if err := policestation.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.identifier": %w`, err)}
		}
	}
	return nil
}

func (psuo *PoliceStationUpdateOne) sqlSave(ctx context.Context) (_node *PoliceStation, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(policestation.Table, policestation.Columns, sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PoliceStation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, policestation.FieldID)
		for _, f := range fields {
			if !policestation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != policestation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(policestation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.Name(); ok {
		_spec.SetField(policestation.FieldName, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Location(); ok {
		_spec.SetField(policestation.FieldLocation, field.TypeString, value)
	}
	if psuo.mutation.LocationCleared() {
		_spec.ClearField(policestation.FieldLocation, field.TypeString)
	}
	if value, ok := psuo.mutation.Code(); ok {
		_spec.SetField(policestation.FieldCode, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Identifier(); ok {
		_spec.SetField(policestation.FieldIdentifier, field.TypeString, value)
	}
	if psuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !psuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedCameraIDs(); len(nodes) > 0 && !psuo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CameraTable,
			Columns: []string{policestation.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedCarIDs(); len(nodes) > 0 && !psuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.CarTable,
			Columns: []string{policestation.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentTable,
			Columns: []string{policestation.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentTable,
			Columns: []string{policestation.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedChildStationsIDs(); len(nodes) > 0 && !psuo.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ChildStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PoliceStation{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policestation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
