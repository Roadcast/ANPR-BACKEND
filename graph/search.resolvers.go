package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"go-ent-project/internal/ent"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/internal/ent/user"
	"go-ent-project/utils/constant"
)

// GetUserByName is the resolver for the getUserByName field.
func (r *queryResolver) GetUserByName(ctx context.Context, name string, limit int, offset int) ([]*ent.User, error) {
	ctx = context.WithValue(ctx, constant.BypassPrivacyKey, true)
	data, err := r.Client.User.Query().Where(user.NameContains(name)).
		Order(user.ByName()).
		Limit(limit).Offset(offset).All(ctx)
	if err != nil {
		return nil, err
	}
	return data, nil
}

// GetPoliceStationByName is the resolver for the getPoliceStationByName field.
func (r *queryResolver) GetPoliceStationByName(ctx context.Context, name string, limit int, offset int) ([]*ent.PoliceStation, error) {
	ctx = context.WithValue(ctx, constant.BypassPrivacyKey, true)
	data, err := r.Client.PoliceStation.Query().Where(policestation.NameContains(name)).
		Order(policestation.ByName()).
		Limit(limit).Offset(offset).All(ctx)
	if err != nil {
		return nil, err
	}
	return data, nil
}

// GetCameraByName is the resolver for the getCameraByName field.
func (r *queryResolver) GetCameraByName(ctx context.Context, name string, limit int, offset int) ([]*ent.Camera, error) {
	ctx = context.WithValue(ctx, constant.BypassPrivacyKey, true)
	data, err := r.Client.Camera.Query().Where(camera.NameContains(name)).
		Order(camera.ByName()).
		Limit(limit).Offset(offset).All(ctx)
	if err != nil {
		return nil, err
	}
	return data, nil
}
