package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"go-ent-project/internal/ent"

	"github.com/google/uuid"
)

// AddCamera is the resolver for the addCamera field.
func (r *mutationResolver) AddCamera(ctx context.Context, camera *ent.CreateCameraInput) (*ent.Camera, error) {
	c, err := r.Client.Camera.Create().SetInput(*camera).Save(ctx)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// UpdateCamera is the resolver for the updateCamera field.
func (r *mutationResolver) UpdateCamera(ctx context.Context, cameraID uuid.UUID, camera *ent.UpdateCameraInput) (*ent.Camera, error) {
	c, err := r.Client.Camera.UpdateOneID(cameraID).SetInput(*camera).Save(ctx)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// DeleteCamera is the resolver for the deleteCamera field.
func (r *mutationResolver) DeleteCamera(ctx context.Context, cameraID uuid.UUID) (bool, error) {
	err := r.Client.Camera.DeleteOneID(cameraID).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// AddCar is the resolver for the addCar field.
func (r *mutationResolver) AddCar(ctx context.Context, car *ent.CreateCarInput) (*ent.Car, error) {
	c, err := r.Client.Car.Create().SetInput(*car).Save(ctx)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// UpdateCar is the resolver for the updateCar field.
func (r *mutationResolver) UpdateCar(ctx context.Context, carID uuid.UUID, car *ent.UpdateCarInput) (*ent.Car, error) {
	c, err := r.Client.Car.UpdateOneID(carID).SetInput(*car).Save(ctx)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// DeleteCar is the resolver for the deleteCar field.
func (r *mutationResolver) DeleteCar(ctx context.Context, carID uuid.UUID) (bool, error) {
	err := r.Client.Car.DeleteOneID(carID).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// AddPoliceStation is the resolver for the addPoliceStation field.
func (r *mutationResolver) AddPoliceStation(ctx context.Context, policeStation *ent.CreatePoliceStationInput) (*ent.PoliceStation, error) {
	p, err := r.Client.PoliceStation.Create().SetInput(*policeStation).Save(ctx)
	if err != nil {
		return nil, err
	}
	return p, nil
}

// UpdatePoliceStation is the resolver for the updatePoliceStation field.
func (r *mutationResolver) UpdatePoliceStation(ctx context.Context, policeStationID uuid.UUID, policeStation *ent.UpdatePoliceStationInput) (*ent.PoliceStation, error) {
	p, err := r.Client.PoliceStation.UpdateOneID(policeStationID).SetInput(*policeStation).Save(ctx)
	if err != nil {
		return nil, err
	}
	return p, nil
}

// DeletePoliceStation is the resolver for the deletePoliceStation field.
func (r *mutationResolver) DeletePoliceStation(ctx context.Context, policeStationID uuid.UUID) (bool, error) {
	err := r.Client.PoliceStation.DeleteOneID(policeStationID).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, user *ent.CreateUserInput) (*ent.User, error) {
	u, err := r.Client.User.Create().SetInput(*user).Save(ctx)
	if err != nil {
		return nil, err
	}
	return u, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID uuid.UUID, user *ent.UpdateUserInput) (*ent.User, error) {
	u, err := r.Client.User.UpdateOneID(userID).SetInput(*user).Save(ctx)
	if err != nil {
		return nil, err
	}
	return u, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID uuid.UUID) (bool, error) {
	err := r.Client.User.DeleteOneID(userID).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}
