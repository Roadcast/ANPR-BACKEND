package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"
	"go-ent-project/graph/model"
	"go-ent-project/internal/ent"
	"go-ent-project/internal/ent/camera"
	"go-ent-project/internal/ent/policestation"
	"go-ent-project/utils/constant"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
)

// AddUserToPoliceStation is the resolver for the addUserToPoliceStation field.
func (r *mutationResolver) AddUserToPoliceStation(ctx context.Context, userID uuid.UUID, policeStationID uuid.UUID) (*ent.PoliceStation, error) {
	ps, err := r.Client.PoliceStation.UpdateOneID(policeStationID).AddUserIDs(userID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to add user to police station %v", err)
	}
	return ps, nil
}

// AddCameraToPoliceStation is the resolver for the addCameraToPoliceStation field.
func (r *mutationResolver) AddCameraToPoliceStation(ctx context.Context, cameraID uuid.UUID, policeStationID uuid.UUID) (*ent.Camera, error) {
	c, err := r.Client.Camera.UpdateOneID(cameraID).SetPoliceStationID(policeStationID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to add camera to police station %v", err)
	}
	return c, nil
}

// AddPoliceStationToUser is the resolver for the addPoliceStationToUser field.
func (r *mutationResolver) AddPoliceStationToUser(ctx context.Context, userID uuid.UUID, policeStationID uuid.UUID) (*ent.User, error) {
	u, err := r.Client.User.UpdateOneID(userID).SetPoliceStationID(policeStationID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to add police station to user %v", err)
	}
	return u, nil
}

// AddChildPoliceStationToParentPoliceStation is the resolver for the addChildPoliceStationToParentPoliceStation field.
func (r *mutationResolver) AddChildPoliceStationToParentPoliceStation(ctx context.Context, parentPoliceStationID uuid.UUID, childPoliceStationID uuid.UUID) (*ent.PoliceStation, error) {
	ps, err := r.Client.PoliceStation.UpdateOneID(parentPoliceStationID).AddChildStationIDs(childPoliceStationID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to add child police station to parent police station %v", err)
	}
	return ps, nil
}

// AddParentPoliceStationToChildPoliceStation is the resolver for the addParentPoliceStationToChildPoliceStation field.
func (r *mutationResolver) AddParentPoliceStationToChildPoliceStation(ctx context.Context, parentPoliceStationID uuid.UUID, childPoliceStationID uuid.UUID) (*ent.PoliceStation, error) {
	ps, err := r.Client.PoliceStation.UpdateOneID(childPoliceStationID).SetParentID(parentPoliceStationID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to add parent police station to child police station %v", err)
	}
	return ps, nil
}

// RemoveUserFromPoliceStation is the resolver for the removeUserFromPoliceStation field.
func (r *mutationResolver) RemoveUserFromPoliceStation(ctx context.Context, userID uuid.UUID, policeStationID uuid.UUID) (*ent.PoliceStation, error) {
	ps, err := r.Client.PoliceStation.UpdateOneID(policeStationID).RemoveUserIDs(userID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to remove user from police station %v", err)
	}
	return ps, nil
}

// RemoveCameraFromPoliceStation is the resolver for the removeCameraFromPoliceStation field.
func (r *mutationResolver) RemoveCameraFromPoliceStation(ctx context.Context, cameraID uuid.UUID) (*ent.Camera, error) {
	c, err := r.Client.Camera.UpdateOneID(cameraID).ClearPoliceStation().Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to remove camera from police station %v", err)
	}
	return c, nil
}

// RemovePoliceStationFromUser is the resolver for the removePoliceStationFromUser field.
func (r *mutationResolver) RemovePoliceStationFromUser(ctx context.Context, userID uuid.UUID) (*ent.User, error) {
	u, err := r.Client.User.UpdateOneID(userID).ClearPoliceStation().Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to remove police station from user %v", err)
	}
	return u, nil
}

// RemoveChildPoliceStationFromParentPoliceStation is the resolver for the removeChildPoliceStationFromParentPoliceStation field.
func (r *mutationResolver) RemoveChildPoliceStationFromParentPoliceStation(ctx context.Context, parentPoliceStationID uuid.UUID, childPoliceStationID uuid.UUID) (*ent.PoliceStation, error) {
	parentPS, err := r.Client.PoliceStation.UpdateOneID(parentPoliceStationID).RemoveChildStationIDs(childPoliceStationID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to remove child police station from parent police station %v", err)
	}
	return parentPS, nil
}

// RemoveParentPoliceStationFromChildPoliceStation is the resolver for the removeParentPoliceStationFromChildPoliceStation field.
func (r *mutationResolver) RemoveParentPoliceStationFromChildPoliceStation(ctx context.Context, parentPoliceStationID uuid.UUID, childPoliceStationID uuid.UUID) (*ent.PoliceStation, error) {
	childPS, err := r.Client.PoliceStation.UpdateOneID(childPoliceStationID).ClearParent().Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to remove parent police station from child police station %v", err)
	}
	return childPS, nil
}

// GetCamera is the resolver for the getCamera field.
func (r *queryResolver) GetCamera(ctx context.Context, id uuid.UUID) (*ent.Camera, error) {
	u, err := r.Client.Camera.Query().Where(camera.IDEQ(id)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("camera not found %v", err)
	}
	return u, nil
}

// GetPoliceStation is the resolver for the getPoliceStation field.
func (r *queryResolver) GetPoliceStation(ctx context.Context, id uuid.UUID) (*ent.PoliceStation, error) {
	u, err := r.Client.PoliceStation.Query().Where(policestation.IDEQ(id)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("user not found %v", err)
	}
	return u, nil
}

// GetEvents is the resolver for the getEvents field.
func (r *queryResolver) GetEvents(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*ent.EventOrder, where *ent.EventWhereInput) (*model.EventList, error) {
	fmt.Printf("where: %v\n", where)
	ctx = context.WithValue(ctx, constant.BypassPrivacyKey, true)
	d := r.Client.Event.Query().AllX(ctx)
	paginate, err := r.Client.Event.Query().Paginate(ctx, after, first, before, last, ent.WithEventFilter(where.Filter), ent.WithEventOrder(orderBy))
	if err != nil {
		return nil, err
	}
	if paginate == nil {
		return nil, fmt.Errorf("no results found")

	}
	fmt.Printf("paginate: %v\n", paginate)

	var data []*model.CustomEvent
	for _, v := range d {
		data = append(data, &model.CustomEvent{
			Event:  v,
			Camera: r.Client.Camera.Query().Where(camera.ImeiEQ(v.SnapDeviceID)).OnlyX(ctx),
		})
	}
	return &model.EventList{
		PageInfo: &ent.PageInfo{
			HasNextPage:     paginate.PageInfo.HasNextPage,
			HasPreviousPage: paginate.PageInfo.HasPreviousPage,
			StartCursor:     paginate.PageInfo.StartCursor,
			EndCursor:       paginate.PageInfo.EndCursor,
		},
		Node: data,
	}, nil
}
