// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"go-ent-project/internal/ent"
	"io"
	"strconv"
	"time"
)

type CameraConnection struct {
	PageInfo *PageInfo     `json:"pageInfo"`
	Edges    []*ent.Camera `json:"edges"`
}

type Car struct {
	ID           string    `json:"id"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	Make         string    `json:"make"`
	Model        string    `json:"model"`
	Year         int32     `json:"year"`
	Registration string    `json:"registration"`
	Color        string    `json:"color"`
}

func (Car) IsNode() {}

// Ordering options for Car connections
type CarOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order Cars.
	Field CarOrderField `json:"field"`
}

// CarWhereInput is used for filtering Car objects.
// Input was generated by ent.
type CarWhereInput struct {
	Not *CarWhereInput   `json:"not,omitempty"`
	And []*CarWhereInput `json:"and,omitempty"`
	Or  []*CarWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// make field predicates
	Make             *string  `json:"make,omitempty"`
	MakeNeq          *string  `json:"makeNEQ,omitempty"`
	MakeIn           []string `json:"makeIn,omitempty"`
	MakeNotIn        []string `json:"makeNotIn,omitempty"`
	MakeGt           *string  `json:"makeGT,omitempty"`
	MakeGte          *string  `json:"makeGTE,omitempty"`
	MakeLt           *string  `json:"makeLT,omitempty"`
	MakeLte          *string  `json:"makeLTE,omitempty"`
	MakeContains     *string  `json:"makeContains,omitempty"`
	MakeHasPrefix    *string  `json:"makeHasPrefix,omitempty"`
	MakeHasSuffix    *string  `json:"makeHasSuffix,omitempty"`
	MakeEqualFold    *string  `json:"makeEqualFold,omitempty"`
	MakeContainsFold *string  `json:"makeContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// year field predicates
	Year      *int32  `json:"year,omitempty"`
	YearNeq   *int32  `json:"yearNEQ,omitempty"`
	YearIn    []int32 `json:"yearIn,omitempty"`
	YearNotIn []int32 `json:"yearNotIn,omitempty"`
	YearGt    *int32  `json:"yearGT,omitempty"`
	YearGte   *int32  `json:"yearGTE,omitempty"`
	YearLt    *int32  `json:"yearLT,omitempty"`
	YearLte   *int32  `json:"yearLTE,omitempty"`
	// registration field predicates
	Registration             *string  `json:"registration,omitempty"`
	RegistrationNeq          *string  `json:"registrationNEQ,omitempty"`
	RegistrationIn           []string `json:"registrationIn,omitempty"`
	RegistrationNotIn        []string `json:"registrationNotIn,omitempty"`
	RegistrationGt           *string  `json:"registrationGT,omitempty"`
	RegistrationGte          *string  `json:"registrationGTE,omitempty"`
	RegistrationLt           *string  `json:"registrationLT,omitempty"`
	RegistrationLte          *string  `json:"registrationLTE,omitempty"`
	RegistrationContains     *string  `json:"registrationContains,omitempty"`
	RegistrationHasPrefix    *string  `json:"registrationHasPrefix,omitempty"`
	RegistrationHasSuffix    *string  `json:"registrationHasSuffix,omitempty"`
	RegistrationEqualFold    *string  `json:"registrationEqualFold,omitempty"`
	RegistrationContainsFold *string  `json:"registrationContainsFold,omitempty"`
	// color field predicates
	Color             *string  `json:"color,omitempty"`
	ColorNeq          *string  `json:"colorNEQ,omitempty"`
	ColorIn           []string `json:"colorIn,omitempty"`
	ColorNotIn        []string `json:"colorNotIn,omitempty"`
	ColorGt           *string  `json:"colorGT,omitempty"`
	ColorGte          *string  `json:"colorGTE,omitempty"`
	ColorLt           *string  `json:"colorLT,omitempty"`
	ColorLte          *string  `json:"colorLTE,omitempty"`
	ColorContains     *string  `json:"colorContains,omitempty"`
	ColorHasPrefix    *string  `json:"colorHasPrefix,omitempty"`
	ColorHasSuffix    *string  `json:"colorHasSuffix,omitempty"`
	ColorEqualFold    *string  `json:"colorEqualFold,omitempty"`
	ColorContainsFold *string  `json:"colorContainsFold,omitempty"`
}

type LoginResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type Mutation struct {
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type PoliceStationConnection struct {
	PageInfo *PageInfo            `json:"pageInfo"`
	Edges    []*ent.PoliceStation `json:"edges"`
}

type Query struct {
}

type RefreshTokenResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type UserConnection struct {
	PageInfo *PageInfo   `json:"pageInfo"`
	Edges    []*ent.User `json:"edges"`
}

type VehicleData struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// Bounding box coordinates of the plate
	PlateBoundingBox []int32 `json:"plateBoundingBox,omitempty"`
	// Channel of the plate
	PlateChannel *int32 `json:"plateChannel,omitempty"`
	// Indicates whether the plate exists
	PlateIsExist *bool `json:"plateIsExist,omitempty"`
	// Color of the plate
	PlateColor *string `json:"plateColor,omitempty"`
	// Number on the plate
	PlateNumber *string `json:"plateNumber,omitempty"`
	// Type of the plate
	PlateType *string `json:"plateType,omitempty"`
	// Region of the plate
	PlateRegion *string `json:"plateRegion,omitempty"`
	// Upload number of the plate
	PlateUploadNum *int32 `json:"plateUploadNum,omitempty"`
	// Indicates if user interaction is allowed
	SnapAllowUser *bool `json:"snapAllowUser,omitempty"`
	// End time for user interaction allowance
	SnapAllowUserEndTime *string `json:"snapAllowUserEndTime,omitempty"`
	// Defence code
	SnapDefenceCode *string `json:"snapDefenceCode,omitempty"`
	// Device ID
	SnapDeviceID *string `json:"snapDeviceID,omitempty"`
	// Number of people in the car
	SnapInCarPeopleNum *int32 `json:"snapInCarPeopleNum,omitempty"`
	// LAN number
	SnapLanNo *int32 `json:"snapLanNo,omitempty"`
	// Indicates if strobe is open
	SnapOpenStrobe *bool `json:"snapOpenStrobe,omitempty"`
	// Bounding box coordinates of the vehicle
	VehicleBoundingBox []int32 `json:"vehicleBoundingBox,omitempty"`
	// Vehicle series
	VehicleSeries *string `json:"vehicleSeries,omitempty"`
}

func (VehicleData) IsNode() {}

// Ordering options for VehicleData connections
type VehicleDataOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order VehicleDataSlice.
	Field VehicleDataOrderField `json:"field"`
}

// VehicleDataWhereInput is used for filtering VehicleData objects.
// Input was generated by ent.
type VehicleDataWhereInput struct {
	Not *VehicleDataWhereInput   `json:"not,omitempty"`
	And []*VehicleDataWhereInput `json:"and,omitempty"`
	Or  []*VehicleDataWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// plate_channel field predicates
	PlateChannel       *int32  `json:"plateChannel,omitempty"`
	PlateChannelNeq    *int32  `json:"plateChannelNEQ,omitempty"`
	PlateChannelIn     []int32 `json:"plateChannelIn,omitempty"`
	PlateChannelNotIn  []int32 `json:"plateChannelNotIn,omitempty"`
	PlateChannelGt     *int32  `json:"plateChannelGT,omitempty"`
	PlateChannelGte    *int32  `json:"plateChannelGTE,omitempty"`
	PlateChannelLt     *int32  `json:"plateChannelLT,omitempty"`
	PlateChannelLte    *int32  `json:"plateChannelLTE,omitempty"`
	PlateChannelIsNil  *bool   `json:"plateChannelIsNil,omitempty"`
	PlateChannelNotNil *bool   `json:"plateChannelNotNil,omitempty"`
	// plate_is_exist field predicates
	PlateIsExist       *bool `json:"plateIsExist,omitempty"`
	PlateIsExistNeq    *bool `json:"plateIsExistNEQ,omitempty"`
	PlateIsExistIsNil  *bool `json:"plateIsExistIsNil,omitempty"`
	PlateIsExistNotNil *bool `json:"plateIsExistNotNil,omitempty"`
	// plate_color field predicates
	PlateColor             *string  `json:"plateColor,omitempty"`
	PlateColorNeq          *string  `json:"plateColorNEQ,omitempty"`
	PlateColorIn           []string `json:"plateColorIn,omitempty"`
	PlateColorNotIn        []string `json:"plateColorNotIn,omitempty"`
	PlateColorGt           *string  `json:"plateColorGT,omitempty"`
	PlateColorGte          *string  `json:"plateColorGTE,omitempty"`
	PlateColorLt           *string  `json:"plateColorLT,omitempty"`
	PlateColorLte          *string  `json:"plateColorLTE,omitempty"`
	PlateColorContains     *string  `json:"plateColorContains,omitempty"`
	PlateColorHasPrefix    *string  `json:"plateColorHasPrefix,omitempty"`
	PlateColorHasSuffix    *string  `json:"plateColorHasSuffix,omitempty"`
	PlateColorIsNil        *bool    `json:"plateColorIsNil,omitempty"`
	PlateColorNotNil       *bool    `json:"plateColorNotNil,omitempty"`
	PlateColorEqualFold    *string  `json:"plateColorEqualFold,omitempty"`
	PlateColorContainsFold *string  `json:"plateColorContainsFold,omitempty"`
	// plate_number field predicates
	PlateNumber             *string  `json:"plateNumber,omitempty"`
	PlateNumberNeq          *string  `json:"plateNumberNEQ,omitempty"`
	PlateNumberIn           []string `json:"plateNumberIn,omitempty"`
	PlateNumberNotIn        []string `json:"plateNumberNotIn,omitempty"`
	PlateNumberGt           *string  `json:"plateNumberGT,omitempty"`
	PlateNumberGte          *string  `json:"plateNumberGTE,omitempty"`
	PlateNumberLt           *string  `json:"plateNumberLT,omitempty"`
	PlateNumberLte          *string  `json:"plateNumberLTE,omitempty"`
	PlateNumberContains     *string  `json:"plateNumberContains,omitempty"`
	PlateNumberHasPrefix    *string  `json:"plateNumberHasPrefix,omitempty"`
	PlateNumberHasSuffix    *string  `json:"plateNumberHasSuffix,omitempty"`
	PlateNumberIsNil        *bool    `json:"plateNumberIsNil,omitempty"`
	PlateNumberNotNil       *bool    `json:"plateNumberNotNil,omitempty"`
	PlateNumberEqualFold    *string  `json:"plateNumberEqualFold,omitempty"`
	PlateNumberContainsFold *string  `json:"plateNumberContainsFold,omitempty"`
	// plate_type field predicates
	PlateType             *string  `json:"plateType,omitempty"`
	PlateTypeNeq          *string  `json:"plateTypeNEQ,omitempty"`
	PlateTypeIn           []string `json:"plateTypeIn,omitempty"`
	PlateTypeNotIn        []string `json:"plateTypeNotIn,omitempty"`
	PlateTypeGt           *string  `json:"plateTypeGT,omitempty"`
	PlateTypeGte          *string  `json:"plateTypeGTE,omitempty"`
	PlateTypeLt           *string  `json:"plateTypeLT,omitempty"`
	PlateTypeLte          *string  `json:"plateTypeLTE,omitempty"`
	PlateTypeContains     *string  `json:"plateTypeContains,omitempty"`
	PlateTypeHasPrefix    *string  `json:"plateTypeHasPrefix,omitempty"`
	PlateTypeHasSuffix    *string  `json:"plateTypeHasSuffix,omitempty"`
	PlateTypeIsNil        *bool    `json:"plateTypeIsNil,omitempty"`
	PlateTypeNotNil       *bool    `json:"plateTypeNotNil,omitempty"`
	PlateTypeEqualFold    *string  `json:"plateTypeEqualFold,omitempty"`
	PlateTypeContainsFold *string  `json:"plateTypeContainsFold,omitempty"`
	// plate_region field predicates
	PlateRegion             *string  `json:"plateRegion,omitempty"`
	PlateRegionNeq          *string  `json:"plateRegionNEQ,omitempty"`
	PlateRegionIn           []string `json:"plateRegionIn,omitempty"`
	PlateRegionNotIn        []string `json:"plateRegionNotIn,omitempty"`
	PlateRegionGt           *string  `json:"plateRegionGT,omitempty"`
	PlateRegionGte          *string  `json:"plateRegionGTE,omitempty"`
	PlateRegionLt           *string  `json:"plateRegionLT,omitempty"`
	PlateRegionLte          *string  `json:"plateRegionLTE,omitempty"`
	PlateRegionContains     *string  `json:"plateRegionContains,omitempty"`
	PlateRegionHasPrefix    *string  `json:"plateRegionHasPrefix,omitempty"`
	PlateRegionHasSuffix    *string  `json:"plateRegionHasSuffix,omitempty"`
	PlateRegionIsNil        *bool    `json:"plateRegionIsNil,omitempty"`
	PlateRegionNotNil       *bool    `json:"plateRegionNotNil,omitempty"`
	PlateRegionEqualFold    *string  `json:"plateRegionEqualFold,omitempty"`
	PlateRegionContainsFold *string  `json:"plateRegionContainsFold,omitempty"`
	// plate_upload_num field predicates
	PlateUploadNum       *int32  `json:"plateUploadNum,omitempty"`
	PlateUploadNumNeq    *int32  `json:"plateUploadNumNEQ,omitempty"`
	PlateUploadNumIn     []int32 `json:"plateUploadNumIn,omitempty"`
	PlateUploadNumNotIn  []int32 `json:"plateUploadNumNotIn,omitempty"`
	PlateUploadNumGt     *int32  `json:"plateUploadNumGT,omitempty"`
	PlateUploadNumGte    *int32  `json:"plateUploadNumGTE,omitempty"`
	PlateUploadNumLt     *int32  `json:"plateUploadNumLT,omitempty"`
	PlateUploadNumLte    *int32  `json:"plateUploadNumLTE,omitempty"`
	PlateUploadNumIsNil  *bool   `json:"plateUploadNumIsNil,omitempty"`
	PlateUploadNumNotNil *bool   `json:"plateUploadNumNotNil,omitempty"`
	// snap_allow_user field predicates
	SnapAllowUser       *bool `json:"snapAllowUser,omitempty"`
	SnapAllowUserNeq    *bool `json:"snapAllowUserNEQ,omitempty"`
	SnapAllowUserIsNil  *bool `json:"snapAllowUserIsNil,omitempty"`
	SnapAllowUserNotNil *bool `json:"snapAllowUserNotNil,omitempty"`
	// snap_allow_user_end_time field predicates
	SnapAllowUserEndTime             *string  `json:"snapAllowUserEndTime,omitempty"`
	SnapAllowUserEndTimeNeq          *string  `json:"snapAllowUserEndTimeNEQ,omitempty"`
	SnapAllowUserEndTimeIn           []string `json:"snapAllowUserEndTimeIn,omitempty"`
	SnapAllowUserEndTimeNotIn        []string `json:"snapAllowUserEndTimeNotIn,omitempty"`
	SnapAllowUserEndTimeGt           *string  `json:"snapAllowUserEndTimeGT,omitempty"`
	SnapAllowUserEndTimeGte          *string  `json:"snapAllowUserEndTimeGTE,omitempty"`
	SnapAllowUserEndTimeLt           *string  `json:"snapAllowUserEndTimeLT,omitempty"`
	SnapAllowUserEndTimeLte          *string  `json:"snapAllowUserEndTimeLTE,omitempty"`
	SnapAllowUserEndTimeContains     *string  `json:"snapAllowUserEndTimeContains,omitempty"`
	SnapAllowUserEndTimeHasPrefix    *string  `json:"snapAllowUserEndTimeHasPrefix,omitempty"`
	SnapAllowUserEndTimeHasSuffix    *string  `json:"snapAllowUserEndTimeHasSuffix,omitempty"`
	SnapAllowUserEndTimeIsNil        *bool    `json:"snapAllowUserEndTimeIsNil,omitempty"`
	SnapAllowUserEndTimeNotNil       *bool    `json:"snapAllowUserEndTimeNotNil,omitempty"`
	SnapAllowUserEndTimeEqualFold    *string  `json:"snapAllowUserEndTimeEqualFold,omitempty"`
	SnapAllowUserEndTimeContainsFold *string  `json:"snapAllowUserEndTimeContainsFold,omitempty"`
	// snap_defence_code field predicates
	SnapDefenceCode             *string  `json:"snapDefenceCode,omitempty"`
	SnapDefenceCodeNeq          *string  `json:"snapDefenceCodeNEQ,omitempty"`
	SnapDefenceCodeIn           []string `json:"snapDefenceCodeIn,omitempty"`
	SnapDefenceCodeNotIn        []string `json:"snapDefenceCodeNotIn,omitempty"`
	SnapDefenceCodeGt           *string  `json:"snapDefenceCodeGT,omitempty"`
	SnapDefenceCodeGte          *string  `json:"snapDefenceCodeGTE,omitempty"`
	SnapDefenceCodeLt           *string  `json:"snapDefenceCodeLT,omitempty"`
	SnapDefenceCodeLte          *string  `json:"snapDefenceCodeLTE,omitempty"`
	SnapDefenceCodeContains     *string  `json:"snapDefenceCodeContains,omitempty"`
	SnapDefenceCodeHasPrefix    *string  `json:"snapDefenceCodeHasPrefix,omitempty"`
	SnapDefenceCodeHasSuffix    *string  `json:"snapDefenceCodeHasSuffix,omitempty"`
	SnapDefenceCodeIsNil        *bool    `json:"snapDefenceCodeIsNil,omitempty"`
	SnapDefenceCodeNotNil       *bool    `json:"snapDefenceCodeNotNil,omitempty"`
	SnapDefenceCodeEqualFold    *string  `json:"snapDefenceCodeEqualFold,omitempty"`
	SnapDefenceCodeContainsFold *string  `json:"snapDefenceCodeContainsFold,omitempty"`
	// snap_device_id field predicates
	SnapDeviceID             *string  `json:"snapDeviceID,omitempty"`
	SnapDeviceIdneq          *string  `json:"snapDeviceIDNEQ,omitempty"`
	SnapDeviceIDIn           []string `json:"snapDeviceIDIn,omitempty"`
	SnapDeviceIDNotIn        []string `json:"snapDeviceIDNotIn,omitempty"`
	SnapDeviceIdgt           *string  `json:"snapDeviceIDGT,omitempty"`
	SnapDeviceIdgte          *string  `json:"snapDeviceIDGTE,omitempty"`
	SnapDeviceIdlt           *string  `json:"snapDeviceIDLT,omitempty"`
	SnapDeviceIdlte          *string  `json:"snapDeviceIDLTE,omitempty"`
	SnapDeviceIDContains     *string  `json:"snapDeviceIDContains,omitempty"`
	SnapDeviceIDHasPrefix    *string  `json:"snapDeviceIDHasPrefix,omitempty"`
	SnapDeviceIDHasSuffix    *string  `json:"snapDeviceIDHasSuffix,omitempty"`
	SnapDeviceIDIsNil        *bool    `json:"snapDeviceIDIsNil,omitempty"`
	SnapDeviceIDNotNil       *bool    `json:"snapDeviceIDNotNil,omitempty"`
	SnapDeviceIDEqualFold    *string  `json:"snapDeviceIDEqualFold,omitempty"`
	SnapDeviceIDContainsFold *string  `json:"snapDeviceIDContainsFold,omitempty"`
	// snap_in_car_people_num field predicates
	SnapInCarPeopleNum       *int32  `json:"snapInCarPeopleNum,omitempty"`
	SnapInCarPeopleNumNeq    *int32  `json:"snapInCarPeopleNumNEQ,omitempty"`
	SnapInCarPeopleNumIn     []int32 `json:"snapInCarPeopleNumIn,omitempty"`
	SnapInCarPeopleNumNotIn  []int32 `json:"snapInCarPeopleNumNotIn,omitempty"`
	SnapInCarPeopleNumGt     *int32  `json:"snapInCarPeopleNumGT,omitempty"`
	SnapInCarPeopleNumGte    *int32  `json:"snapInCarPeopleNumGTE,omitempty"`
	SnapInCarPeopleNumLt     *int32  `json:"snapInCarPeopleNumLT,omitempty"`
	SnapInCarPeopleNumLte    *int32  `json:"snapInCarPeopleNumLTE,omitempty"`
	SnapInCarPeopleNumIsNil  *bool   `json:"snapInCarPeopleNumIsNil,omitempty"`
	SnapInCarPeopleNumNotNil *bool   `json:"snapInCarPeopleNumNotNil,omitempty"`
	// snap_lan_no field predicates
	SnapLanNo       *int32  `json:"snapLanNo,omitempty"`
	SnapLanNoNeq    *int32  `json:"snapLanNoNEQ,omitempty"`
	SnapLanNoIn     []int32 `json:"snapLanNoIn,omitempty"`
	SnapLanNoNotIn  []int32 `json:"snapLanNoNotIn,omitempty"`
	SnapLanNoGt     *int32  `json:"snapLanNoGT,omitempty"`
	SnapLanNoGte    *int32  `json:"snapLanNoGTE,omitempty"`
	SnapLanNoLt     *int32  `json:"snapLanNoLT,omitempty"`
	SnapLanNoLte    *int32  `json:"snapLanNoLTE,omitempty"`
	SnapLanNoIsNil  *bool   `json:"snapLanNoIsNil,omitempty"`
	SnapLanNoNotNil *bool   `json:"snapLanNoNotNil,omitempty"`
	// snap_open_strobe field predicates
	SnapOpenStrobe       *bool `json:"snapOpenStrobe,omitempty"`
	SnapOpenStrobeNeq    *bool `json:"snapOpenStrobeNEQ,omitempty"`
	SnapOpenStrobeIsNil  *bool `json:"snapOpenStrobeIsNil,omitempty"`
	SnapOpenStrobeNotNil *bool `json:"snapOpenStrobeNotNil,omitempty"`
	// vehicle_series field predicates
	VehicleSeries             *string  `json:"vehicleSeries,omitempty"`
	VehicleSeriesNeq          *string  `json:"vehicleSeriesNEQ,omitempty"`
	VehicleSeriesIn           []string `json:"vehicleSeriesIn,omitempty"`
	VehicleSeriesNotIn        []string `json:"vehicleSeriesNotIn,omitempty"`
	VehicleSeriesGt           *string  `json:"vehicleSeriesGT,omitempty"`
	VehicleSeriesGte          *string  `json:"vehicleSeriesGTE,omitempty"`
	VehicleSeriesLt           *string  `json:"vehicleSeriesLT,omitempty"`
	VehicleSeriesLte          *string  `json:"vehicleSeriesLTE,omitempty"`
	VehicleSeriesContains     *string  `json:"vehicleSeriesContains,omitempty"`
	VehicleSeriesHasPrefix    *string  `json:"vehicleSeriesHasPrefix,omitempty"`
	VehicleSeriesHasSuffix    *string  `json:"vehicleSeriesHasSuffix,omitempty"`
	VehicleSeriesIsNil        *bool    `json:"vehicleSeriesIsNil,omitempty"`
	VehicleSeriesNotNil       *bool    `json:"vehicleSeriesNotNil,omitempty"`
	VehicleSeriesEqualFold    *string  `json:"vehicleSeriesEqualFold,omitempty"`
	VehicleSeriesContainsFold *string  `json:"vehicleSeriesContainsFold,omitempty"`
}

// Properties by which Camera connections can be ordered.
type CameraOrderField string

const (
	CameraOrderFieldID   CameraOrderField = "ID"
	CameraOrderFieldName CameraOrderField = "NAME"
)

var AllCameraOrderField = []CameraOrderField{
	CameraOrderFieldID,
	CameraOrderFieldName,
}

func (e CameraOrderField) IsValid() bool {
	switch e {
	case CameraOrderFieldID, CameraOrderFieldName:
		return true
	}
	return false
}

func (e CameraOrderField) String() string {
	return string(e)
}

func (e *CameraOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CameraOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CameraOrderField", str)
	}
	return nil
}

func (e CameraOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Car connections can be ordered.
type CarOrderField string

const (
	CarOrderFieldID CarOrderField = "ID"
)

var AllCarOrderField = []CarOrderField{
	CarOrderFieldID,
}

func (e CarOrderField) IsValid() bool {
	switch e {
	case CarOrderFieldID:
		return true
	}
	return false
}

func (e CarOrderField) String() string {
	return string(e)
}

func (e *CarOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CarOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CarOrderField", str)
	}
	return nil
}

func (e CarOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Permission connections can be ordered.
type PermissionOrderField string

const (
	PermissionOrderFieldID PermissionOrderField = "ID"
)

var AllPermissionOrderField = []PermissionOrderField{
	PermissionOrderFieldID,
}

func (e PermissionOrderField) IsValid() bool {
	switch e {
	case PermissionOrderFieldID:
		return true
	}
	return false
}

func (e PermissionOrderField) String() string {
	return string(e)
}

func (e *PermissionOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionOrderField", str)
	}
	return nil
}

func (e PermissionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which PoliceStation connections can be ordered.
type PoliceStationOrderField string

const (
	PoliceStationOrderFieldID   PoliceStationOrderField = "ID"
	PoliceStationOrderFieldName PoliceStationOrderField = "NAME"
)

var AllPoliceStationOrderField = []PoliceStationOrderField{
	PoliceStationOrderFieldID,
	PoliceStationOrderFieldName,
}

func (e PoliceStationOrderField) IsValid() bool {
	switch e {
	case PoliceStationOrderFieldID, PoliceStationOrderFieldName:
		return true
	}
	return false
}

func (e PoliceStationOrderField) String() string {
	return string(e)
}

func (e *PoliceStationOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PoliceStationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PoliceStationOrderField", str)
	}
	return nil
}

func (e PoliceStationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Role connections can be ordered.
type RoleOrderField string

const (
	RoleOrderFieldID RoleOrderField = "ID"
)

var AllRoleOrderField = []RoleOrderField{
	RoleOrderFieldID,
}

func (e RoleOrderField) IsValid() bool {
	switch e {
	case RoleOrderFieldID:
		return true
	}
	return false
}

func (e RoleOrderField) String() string {
	return string(e)
}

func (e *RoleOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleOrderField", str)
	}
	return nil
}

func (e RoleOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which User connections can be ordered.
type UserOrderField string

const (
	UserOrderFieldID    UserOrderField = "ID"
	UserOrderFieldName  UserOrderField = "NAME"
	UserOrderFieldEmail UserOrderField = "EMAIL"
)

var AllUserOrderField = []UserOrderField{
	UserOrderFieldID,
	UserOrderFieldName,
	UserOrderFieldEmail,
}

func (e UserOrderField) IsValid() bool {
	switch e {
	case UserOrderFieldID, UserOrderFieldName, UserOrderFieldEmail:
		return true
	}
	return false
}

func (e UserOrderField) String() string {
	return string(e)
}

func (e *UserOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

func (e UserOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which VehicleData connections can be ordered.
type VehicleDataOrderField string

const (
	VehicleDataOrderFieldID VehicleDataOrderField = "ID"
)

var AllVehicleDataOrderField = []VehicleDataOrderField{
	VehicleDataOrderFieldID,
}

func (e VehicleDataOrderField) IsValid() bool {
	switch e {
	case VehicleDataOrderFieldID:
		return true
	}
	return false
}

func (e VehicleDataOrderField) String() string {
	return string(e)
}

func (e *VehicleDataOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleDataOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleDataOrderField", str)
	}
	return nil
}

func (e VehicleDataOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
