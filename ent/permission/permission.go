// Code generated by ent, DO NOT EDIT.

package permission

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCanRead holds the string denoting the can_read field in the database.
	FieldCanRead = "can_read"
	// FieldCanCreate holds the string denoting the can_create field in the database.
	FieldCanCreate = "can_create"
	// FieldCanUpdate holds the string denoting the can_update field in the database.
	FieldCanUpdate = "can_update"
	// FieldCanDelete holds the string denoting the can_delete field in the database.
	FieldCanDelete = "can_delete"
	// Table holds the table name of the permission in the database.
	Table = "permissions"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCanRead,
	FieldCanCreate,
	FieldCanUpdate,
	FieldCanDelete,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"role_permissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCanRead holds the default value on creation for the "can_read" field.
	DefaultCanRead bool
	// DefaultCanCreate holds the default value on creation for the "can_create" field.
	DefaultCanCreate bool
	// DefaultCanUpdate holds the default value on creation for the "can_update" field.
	DefaultCanUpdate bool
	// DefaultCanDelete holds the default value on creation for the "can_delete" field.
	DefaultCanDelete bool
)

// OrderOption defines the ordering options for the Permission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCanRead orders the results by the can_read field.
func ByCanRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanRead, opts...).ToFunc()
}

// ByCanCreate orders the results by the can_create field.
func ByCanCreate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanCreate, opts...).ToFunc()
}

// ByCanUpdate orders the results by the can_update field.
func ByCanUpdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanUpdate, opts...).ToFunc()
}

// ByCanDelete orders the results by the can_delete field.
func ByCanDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDelete, opts...).ToFunc()
}
