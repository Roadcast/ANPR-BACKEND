// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/ent/policestation"
	"go-ent-project/ent/predicate"
	"go-ent-project/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PoliceStationUpdate is the builder for updating PoliceStation entities.
type PoliceStationUpdate struct {
	config
	hooks    []Hook
	mutation *PoliceStationMutation
}

// Where appends a list predicates to the PoliceStationUpdate builder.
func (psu *PoliceStationUpdate) Where(ps ...predicate.PoliceStation) *PoliceStationUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetName sets the "name" field.
func (psu *PoliceStationUpdate) SetName(s string) *PoliceStationUpdate {
	psu.mutation.SetName(s)
	return psu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableName(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetName(*s)
	}
	return psu
}

// SetLocation sets the "location" field.
func (psu *PoliceStationUpdate) SetLocation(m map[string]interface{}) *PoliceStationUpdate {
	psu.mutation.SetLocation(m)
	return psu
}

// ClearLocation clears the value of the "location" field.
func (psu *PoliceStationUpdate) ClearLocation() *PoliceStationUpdate {
	psu.mutation.ClearLocation()
	return psu
}

// SetCode sets the "code" field.
func (psu *PoliceStationUpdate) SetCode(s string) *PoliceStationUpdate {
	psu.mutation.SetCode(s)
	return psu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableCode(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetCode(*s)
	}
	return psu
}

// SetIdentifier sets the "identifier" field.
func (psu *PoliceStationUpdate) SetIdentifier(s string) *PoliceStationUpdate {
	psu.mutation.SetIdentifier(s)
	return psu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableIdentifier(s *string) *PoliceStationUpdate {
	if s != nil {
		psu.SetIdentifier(*s)
	}
	return psu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (psu *PoliceStationUpdate) AddUserIDs(ids ...int) *PoliceStationUpdate {
	psu.mutation.AddUserIDs(ids...)
	return psu
}

// AddUsers adds the "users" edges to the User entity.
func (psu *PoliceStationUpdate) AddUsers(u ...*User) *PoliceStationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psu.AddUserIDs(ids...)
}

// SetParentStationID sets the "parent_station" edge to the PoliceStation entity by ID.
func (psu *PoliceStationUpdate) SetParentStationID(id int) *PoliceStationUpdate {
	psu.mutation.SetParentStationID(id)
	return psu
}

// SetNillableParentStationID sets the "parent_station" edge to the PoliceStation entity by ID if the given value is not nil.
func (psu *PoliceStationUpdate) SetNillableParentStationID(id *int) *PoliceStationUpdate {
	if id != nil {
		psu = psu.SetParentStationID(*id)
	}
	return psu
}

// SetParentStation sets the "parent_station" edge to the PoliceStation entity.
func (psu *PoliceStationUpdate) SetParentStation(p *PoliceStation) *PoliceStationUpdate {
	return psu.SetParentStationID(p.ID)
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by IDs.
func (psu *PoliceStationUpdate) AddChildStationIDs(ids ...int) *PoliceStationUpdate {
	psu.mutation.AddChildStationIDs(ids...)
	return psu
}

// AddChildStations adds the "child_stations" edges to the PoliceStation entity.
func (psu *PoliceStationUpdate) AddChildStations(p ...*PoliceStation) *PoliceStationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddChildStationIDs(ids...)
}

// Mutation returns the PoliceStationMutation object of the builder.
func (psu *PoliceStationUpdate) Mutation() *PoliceStationMutation {
	return psu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (psu *PoliceStationUpdate) ClearUsers() *PoliceStationUpdate {
	psu.mutation.ClearUsers()
	return psu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (psu *PoliceStationUpdate) RemoveUserIDs(ids ...int) *PoliceStationUpdate {
	psu.mutation.RemoveUserIDs(ids...)
	return psu
}

// RemoveUsers removes "users" edges to User entities.
func (psu *PoliceStationUpdate) RemoveUsers(u ...*User) *PoliceStationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psu.RemoveUserIDs(ids...)
}

// ClearParentStation clears the "parent_station" edge to the PoliceStation entity.
func (psu *PoliceStationUpdate) ClearParentStation() *PoliceStationUpdate {
	psu.mutation.ClearParentStation()
	return psu
}

// ClearChildStations clears all "child_stations" edges to the PoliceStation entity.
func (psu *PoliceStationUpdate) ClearChildStations() *PoliceStationUpdate {
	psu.mutation.ClearChildStations()
	return psu
}

// RemoveChildStationIDs removes the "child_stations" edge to PoliceStation entities by IDs.
func (psu *PoliceStationUpdate) RemoveChildStationIDs(ids ...int) *PoliceStationUpdate {
	psu.mutation.RemoveChildStationIDs(ids...)
	return psu
}

// RemoveChildStations removes "child_stations" edges to PoliceStation entities.
func (psu *PoliceStationUpdate) RemoveChildStations(p ...*PoliceStation) *PoliceStationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveChildStationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PoliceStationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PoliceStationUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PoliceStationUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PoliceStationUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PoliceStationUpdate) check() error {
	if v, ok := psu.mutation.Name(); ok {
		if err := policestation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.name": %w`, err)}
		}
	}
	if v, ok := psu.mutation.Code(); ok {
		if err := policestation.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.code": %w`, err)}
		}
	}
	if v, ok := psu.mutation.Identifier(); ok {
		if err := policestation.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.identifier": %w`, err)}
		}
	}
	return nil
}

func (psu *PoliceStationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(policestation.Table, policestation.Columns, sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Name(); ok {
		_spec.SetField(policestation.FieldName, field.TypeString, value)
	}
	if value, ok := psu.mutation.Location(); ok {
		_spec.SetField(policestation.FieldLocation, field.TypeJSON, value)
	}
	if psu.mutation.LocationCleared() {
		_spec.ClearField(policestation.FieldLocation, field.TypeJSON)
	}
	if value, ok := psu.mutation.Code(); ok {
		_spec.SetField(policestation.FieldCode, field.TypeString, value)
	}
	if value, ok := psu.mutation.Identifier(); ok {
		_spec.SetField(policestation.FieldIdentifier, field.TypeString, value)
	}
	if psu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !psu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ParentStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentStationTable,
			Columns: []string{policestation.ParentStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ParentStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentStationTable,
			Columns: []string{policestation.ParentStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedChildStationsIDs(); len(nodes) > 0 && !psu.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ChildStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policestation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PoliceStationUpdateOne is the builder for updating a single PoliceStation entity.
type PoliceStationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PoliceStationMutation
}

// SetName sets the "name" field.
func (psuo *PoliceStationUpdateOne) SetName(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetName(s)
	return psuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableName(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetName(*s)
	}
	return psuo
}

// SetLocation sets the "location" field.
func (psuo *PoliceStationUpdateOne) SetLocation(m map[string]interface{}) *PoliceStationUpdateOne {
	psuo.mutation.SetLocation(m)
	return psuo
}

// ClearLocation clears the value of the "location" field.
func (psuo *PoliceStationUpdateOne) ClearLocation() *PoliceStationUpdateOne {
	psuo.mutation.ClearLocation()
	return psuo
}

// SetCode sets the "code" field.
func (psuo *PoliceStationUpdateOne) SetCode(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetCode(s)
	return psuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableCode(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetCode(*s)
	}
	return psuo
}

// SetIdentifier sets the "identifier" field.
func (psuo *PoliceStationUpdateOne) SetIdentifier(s string) *PoliceStationUpdateOne {
	psuo.mutation.SetIdentifier(s)
	return psuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableIdentifier(s *string) *PoliceStationUpdateOne {
	if s != nil {
		psuo.SetIdentifier(*s)
	}
	return psuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (psuo *PoliceStationUpdateOne) AddUserIDs(ids ...int) *PoliceStationUpdateOne {
	psuo.mutation.AddUserIDs(ids...)
	return psuo
}

// AddUsers adds the "users" edges to the User entity.
func (psuo *PoliceStationUpdateOne) AddUsers(u ...*User) *PoliceStationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psuo.AddUserIDs(ids...)
}

// SetParentStationID sets the "parent_station" edge to the PoliceStation entity by ID.
func (psuo *PoliceStationUpdateOne) SetParentStationID(id int) *PoliceStationUpdateOne {
	psuo.mutation.SetParentStationID(id)
	return psuo
}

// SetNillableParentStationID sets the "parent_station" edge to the PoliceStation entity by ID if the given value is not nil.
func (psuo *PoliceStationUpdateOne) SetNillableParentStationID(id *int) *PoliceStationUpdateOne {
	if id != nil {
		psuo = psuo.SetParentStationID(*id)
	}
	return psuo
}

// SetParentStation sets the "parent_station" edge to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) SetParentStation(p *PoliceStation) *PoliceStationUpdateOne {
	return psuo.SetParentStationID(p.ID)
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by IDs.
func (psuo *PoliceStationUpdateOne) AddChildStationIDs(ids ...int) *PoliceStationUpdateOne {
	psuo.mutation.AddChildStationIDs(ids...)
	return psuo
}

// AddChildStations adds the "child_stations" edges to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) AddChildStations(p ...*PoliceStation) *PoliceStationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddChildStationIDs(ids...)
}

// Mutation returns the PoliceStationMutation object of the builder.
func (psuo *PoliceStationUpdateOne) Mutation() *PoliceStationMutation {
	return psuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (psuo *PoliceStationUpdateOne) ClearUsers() *PoliceStationUpdateOne {
	psuo.mutation.ClearUsers()
	return psuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (psuo *PoliceStationUpdateOne) RemoveUserIDs(ids ...int) *PoliceStationUpdateOne {
	psuo.mutation.RemoveUserIDs(ids...)
	return psuo
}

// RemoveUsers removes "users" edges to User entities.
func (psuo *PoliceStationUpdateOne) RemoveUsers(u ...*User) *PoliceStationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psuo.RemoveUserIDs(ids...)
}

// ClearParentStation clears the "parent_station" edge to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) ClearParentStation() *PoliceStationUpdateOne {
	psuo.mutation.ClearParentStation()
	return psuo
}

// ClearChildStations clears all "child_stations" edges to the PoliceStation entity.
func (psuo *PoliceStationUpdateOne) ClearChildStations() *PoliceStationUpdateOne {
	psuo.mutation.ClearChildStations()
	return psuo
}

// RemoveChildStationIDs removes the "child_stations" edge to PoliceStation entities by IDs.
func (psuo *PoliceStationUpdateOne) RemoveChildStationIDs(ids ...int) *PoliceStationUpdateOne {
	psuo.mutation.RemoveChildStationIDs(ids...)
	return psuo
}

// RemoveChildStations removes "child_stations" edges to PoliceStation entities.
func (psuo *PoliceStationUpdateOne) RemoveChildStations(p ...*PoliceStation) *PoliceStationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveChildStationIDs(ids...)
}

// Where appends a list predicates to the PoliceStationUpdate builder.
func (psuo *PoliceStationUpdateOne) Where(ps ...predicate.PoliceStation) *PoliceStationUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PoliceStationUpdateOne) Select(field string, fields ...string) *PoliceStationUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PoliceStation entity.
func (psuo *PoliceStationUpdateOne) Save(ctx context.Context) (*PoliceStation, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PoliceStationUpdateOne) SaveX(ctx context.Context) *PoliceStation {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PoliceStationUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PoliceStationUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PoliceStationUpdateOne) check() error {
	if v, ok := psuo.mutation.Name(); ok {
		if err := policestation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.name": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.Code(); ok {
		if err := policestation.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.code": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.Identifier(); ok {
		if err := policestation.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.identifier": %w`, err)}
		}
	}
	return nil
}

func (psuo *PoliceStationUpdateOne) sqlSave(ctx context.Context) (_node *PoliceStation, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(policestation.Table, policestation.Columns, sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PoliceStation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, policestation.FieldID)
		for _, f := range fields {
			if !policestation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != policestation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Name(); ok {
		_spec.SetField(policestation.FieldName, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Location(); ok {
		_spec.SetField(policestation.FieldLocation, field.TypeJSON, value)
	}
	if psuo.mutation.LocationCleared() {
		_spec.ClearField(policestation.FieldLocation, field.TypeJSON)
	}
	if value, ok := psuo.mutation.Code(); ok {
		_spec.SetField(policestation.FieldCode, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Identifier(); ok {
		_spec.SetField(policestation.FieldIdentifier, field.TypeString, value)
	}
	if psuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !psuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ParentStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentStationTable,
			Columns: []string{policestation.ParentStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ParentStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentStationTable,
			Columns: []string{policestation.ParentStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedChildStationsIDs(); len(nodes) > 0 && !psuo.mutation.ChildStationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ChildStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PoliceStation{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policestation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
