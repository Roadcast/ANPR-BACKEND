// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-ent-project/ent/policestation"
	"go-ent-project/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PoliceStationCreate is the builder for creating a PoliceStation entity.
type PoliceStationCreate struct {
	config
	mutation *PoliceStationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (psc *PoliceStationCreate) SetName(s string) *PoliceStationCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetLocation sets the "location" field.
func (psc *PoliceStationCreate) SetLocation(m map[string]interface{}) *PoliceStationCreate {
	psc.mutation.SetLocation(m)
	return psc
}

// SetCode sets the "code" field.
func (psc *PoliceStationCreate) SetCode(s string) *PoliceStationCreate {
	psc.mutation.SetCode(s)
	return psc
}

// SetIdentifier sets the "identifier" field.
func (psc *PoliceStationCreate) SetIdentifier(s string) *PoliceStationCreate {
	psc.mutation.SetIdentifier(s)
	return psc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (psc *PoliceStationCreate) AddUserIDs(ids ...int) *PoliceStationCreate {
	psc.mutation.AddUserIDs(ids...)
	return psc
}

// AddUsers adds the "users" edges to the User entity.
func (psc *PoliceStationCreate) AddUsers(u ...*User) *PoliceStationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return psc.AddUserIDs(ids...)
}

// SetParentStationID sets the "parent_station" edge to the PoliceStation entity by ID.
func (psc *PoliceStationCreate) SetParentStationID(id int) *PoliceStationCreate {
	psc.mutation.SetParentStationID(id)
	return psc
}

// SetNillableParentStationID sets the "parent_station" edge to the PoliceStation entity by ID if the given value is not nil.
func (psc *PoliceStationCreate) SetNillableParentStationID(id *int) *PoliceStationCreate {
	if id != nil {
		psc = psc.SetParentStationID(*id)
	}
	return psc
}

// SetParentStation sets the "parent_station" edge to the PoliceStation entity.
func (psc *PoliceStationCreate) SetParentStation(p *PoliceStation) *PoliceStationCreate {
	return psc.SetParentStationID(p.ID)
}

// AddChildStationIDs adds the "child_stations" edge to the PoliceStation entity by IDs.
func (psc *PoliceStationCreate) AddChildStationIDs(ids ...int) *PoliceStationCreate {
	psc.mutation.AddChildStationIDs(ids...)
	return psc
}

// AddChildStations adds the "child_stations" edges to the PoliceStation entity.
func (psc *PoliceStationCreate) AddChildStations(p ...*PoliceStation) *PoliceStationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psc.AddChildStationIDs(ids...)
}

// Mutation returns the PoliceStationMutation object of the builder.
func (psc *PoliceStationCreate) Mutation() *PoliceStationMutation {
	return psc.mutation
}

// Save creates the PoliceStation in the database.
func (psc *PoliceStationCreate) Save(ctx context.Context) (*PoliceStation, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PoliceStationCreate) SaveX(ctx context.Context) *PoliceStation {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PoliceStationCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PoliceStationCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PoliceStationCreate) check() error {
	if _, ok := psc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PoliceStation.name"`)}
	}
	if v, ok := psc.mutation.Name(); ok {
		if err := policestation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.name": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "PoliceStation.code"`)}
	}
	if v, ok := psc.mutation.Code(); ok {
		if err := policestation.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.code": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "PoliceStation.identifier"`)}
	}
	if v, ok := psc.mutation.Identifier(); ok {
		if err := policestation.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "PoliceStation.identifier": %w`, err)}
		}
	}
	return nil
}

func (psc *PoliceStationCreate) sqlSave(ctx context.Context) (*PoliceStation, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PoliceStationCreate) createSpec() (*PoliceStation, *sqlgraph.CreateSpec) {
	var (
		_node = &PoliceStation{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(policestation.Table, sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.Name(); ok {
		_spec.SetField(policestation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := psc.mutation.Location(); ok {
		_spec.SetField(policestation.FieldLocation, field.TypeJSON, value)
		_node.Location = value
	}
	if value, ok := psc.mutation.Code(); ok {
		_spec.SetField(policestation.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := psc.mutation.Identifier(); ok {
		_spec.SetField(policestation.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if nodes := psc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.UsersTable,
			Columns: []string{policestation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ParentStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policestation.ParentStationTable,
			Columns: []string{policestation.ParentStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.police_station_child_stations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ChildStationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policestation.ChildStationsTable,
			Columns: []string{policestation.ChildStationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PoliceStationCreateBulk is the builder for creating many PoliceStation entities in bulk.
type PoliceStationCreateBulk struct {
	config
	err      error
	builders []*PoliceStationCreate
}

// Save creates the PoliceStation entities in the database.
func (pscb *PoliceStationCreateBulk) Save(ctx context.Context) ([]*PoliceStation, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PoliceStation, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoliceStationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PoliceStationCreateBulk) SaveX(ctx context.Context) []*PoliceStation {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PoliceStationCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PoliceStationCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
