// Code generated by ent, DO NOT EDIT.

package camera

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the camera type in the database.
	Label = "camera"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldImei holds the string denoting the imei field in the database.
	FieldImei = "imei"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// Table holds the table name of the camera in the database.
	Table = "cameras"
)

// Columns holds all SQL columns for camera fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldModel,
	FieldImei,
	FieldLocation,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ModelValidator is a validator for the "model" field. It is called by the builders before save.
	ModelValidator func(string) error
	// ImeiValidator is a validator for the "imei" field. It is called by the builders before save.
	ImeiValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the Camera queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByImei orders the results by the imei field.
func ByImei(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImei, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}
